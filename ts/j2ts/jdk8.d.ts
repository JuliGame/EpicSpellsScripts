/*
 * Project: java2typescript - https://github.com/bsorrentino/java2typescript
 *
 * Author: bsorrentino 
 *
 * TYPESCRIPT DEFINITIONS
 *
 */

type int    = number;
type long   = number;
type float	= number;
type double = number;
type byte   = number;
type char   = string;

type chararray = [byte];
type bytearray = [char];

declare namespace java.lang {

	interface Class<T> {}
	interface AutoCloseable {}
	interface Cloneable {}

	type Object = any;
}

declare namespace java.util {

	interface RandomAccess {}
}

declare namespace java.io {

	interface Closeable {}
	interface Serializable {}
}

//
// Rhino
//

declare const Packages:any;

declare function print( ...args: any[] ):void

declare function load( module:string ):void

//
// Generated declarations
//

declare namespace java.lang {

class String/* extends Object implements java.io.Serializable, Comparable<any>, CharSequence, java.lang.constant.Constable, java.lang.constant.ConstantDesc*/ {

	charAt( arg0:int ):any /*char*/;
	chars(  ):any /*java.util.stream.IntStream*/;
	codePointAt( arg0:int ):int;
	codePointBefore( arg0:int ):int;
	codePointCount( arg0:int, arg1:int ):int;
	codePoints(  ):any /*java.util.stream.IntStream*/;
	compareTo( arg0:string ):int;
	compareToIgnoreCase( arg0:string ):int;
	concat( arg0:string ):string;
	contains( arg0:any /*java.lang.CharSequence*/ ):boolean;
	contentEquals( arg0:any /*java.lang.CharSequence*/ ):boolean;
	contentEquals( arg0:any /*java.lang.StringBuffer*/ ):boolean;
	describeConstable(  ):java.util.Optional<string>;
	endsWith( arg0:string ):boolean;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	equalsIgnoreCase( arg0:string ):boolean;
	formatted( ...arg0:any /*java.lang.Object*/[] ):string;
	getBytes(  ):bytearray;
	getBytes( arg0:any /*java.nio.charset.Charset*/ ):bytearray;
	getBytes( arg0:int, arg1:int, arg2:bytearray, arg3:int ):void;
	getBytes( arg0:string ):bytearray;
	getChars( arg0:int, arg1:int, arg2:chararray, arg3:int ):void;
	indent( arg0:int ):string;
	indexOf( arg0:int ):int;
	indexOf( arg0:int, arg1:int ):int;
	indexOf( arg0:string ):int;
	indexOf( arg0:string, arg1:int ):int;
	intern(  ):string;
	isBlank(  ):boolean;
	isEmpty(  ):boolean;
	lastIndexOf( arg0:int ):int;
	lastIndexOf( arg0:int, arg1:int ):int;
	lastIndexOf( arg0:string ):int;
	lastIndexOf( arg0:string, arg1:int ):int;
	length(  ):int;
	lines(  ):java.util.stream.Stream<string>;
	matches( arg0:string ):boolean;
	offsetByCodePoints( arg0:int, arg1:int ):int;
	regionMatches( arg0:boolean, arg1:int, arg2:string, arg3:int, arg4:int ):boolean;
	regionMatches( arg0:int, arg1:string, arg2:int, arg3:int ):boolean;
	repeat( arg0:int ):string;
	replace( arg0:any /*char*/, arg1:any /*char*/ ):string;
	replace( arg0:any /*java.lang.CharSequence*/, arg1:any /*java.lang.CharSequence*/ ):string;
	replaceAll( arg0:string, arg1:string ):string;
	replaceFirst( arg0:string, arg1:string ):string;
	resolveConstantDesc( arg0:any /*java.lang.invoke.MethodHandles$Lookup*/ ):string;
	split( arg0:string ):[string];
	split( arg0:string, arg1:int ):[string];
	startsWith( arg0:string ):boolean;
	startsWith( arg0:string, arg1:int ):boolean;
	strip(  ):string;
	stripIndent(  ):string;
	stripLeading(  ):string;
	stripTrailing(  ):string;
	subSequence( arg0:int, arg1:int ):any /*java.lang.CharSequence*/;
	substring( arg0:int ):string;
	substring( arg0:int, arg1:int ):string;
	toCharArray(  ):chararray;
	toLowerCase(  ):string;
	toLowerCase( arg0:any /*java.util.Locale*/ ):string;
	toString(  ):string;
	toUpperCase(  ):string;
	toUpperCase( arg0:any /*java.util.Locale*/ ):string;
	transform<R>( arg0:Func<string, R> ):R;
	translateEscapes(  ):string;
	trim(  ):string;

} // end String

} // end namespace java.lang
declare namespace java.lang {

interface Comparable<T> {

	compareTo( arg0:T ):int;

} // end Comparable

} // end namespace java.lang
declare namespace java.lang {

interface Iterable<T> {

	(  ):java.util.Iterator<T>;
	forEach?( arg0:Consumer<T> ):void;
	spliterator?(  ):any /*java.util.Spliterator*/;

} // end Iterable

} // end namespace java.lang
declare namespace java.lang {

interface Runnable {

	(  ):void;

} // end Runnable

} // end namespace java.lang
declare namespace java.util {

class ArrayList<E>/* extends AbstractList<E> implements List<E>, RandomAccess, java.lang.Cloneable, java.io.Serializable*/ {

	add( arg0:E ):boolean;
	add( arg0:int, arg1:E ):void;
	addAll( arg0:Collection<E> ):boolean;
	addAll( arg0:int, arg1:Collection<E> ):boolean;
	clear(  ):void;
	clone(  ):any /*java.lang.Object*/;
	contains( arg0:any /*java.lang.Object*/ ):boolean;
	containsAll( arg0:Collection<any /*java.lang.Object*/> ):boolean;
	ensureCapacity( arg0:int ):void;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	forEach( arg0:Consumer<E> ):void;
	get( arg0:int ):E;
	indexOf( arg0:any /*java.lang.Object*/ ):int;
	isEmpty(  ):boolean;
	iterator(  ):Iterator<E>;
	lastIndexOf( arg0:any /*java.lang.Object*/ ):int;
	listIterator(  ):any /*java.util.ListIterator*/;
	listIterator( arg0:int ):any /*java.util.ListIterator*/;
	parallelStream(  ):java.util.stream.Stream<E>;
	remove( arg0:any /*java.lang.Object*/ ):boolean;
	remove( arg0:int ):E;
	removeAll( arg0:Collection<any /*java.lang.Object*/> ):boolean;
	removeIf( arg0:Predicate<E> ):boolean;
	replaceAll( arg0:UnaryOperator<E> ):void;
	retainAll( arg0:Collection<any /*java.lang.Object*/> ):boolean;
	set( arg0:int, arg1:E ):E;
	size(  ):int;
	sort( arg0:any /*java.util.Comparator*/ ):void;
	spliterator(  ):any /*java.util.Spliterator*/;
	stream(  ):java.util.stream.Stream<E>;
	subList( arg0:int, arg1:int ):List<E>;
	toArray(  ):[any /*java.lang.Object*/];
	toArray<T>( arg0:[T] ):[T];
	toArray<T>( arg0:any /*java.util.function.IntFunction*/ ):[T];
	toString(  ):string;
	trimToSize(  ):void;

} // end ArrayList

} // end namespace java.util
declare namespace java.util {

class Collections/* extends java.lang.Object*/ {

	equals( arg0:any /*java.lang.Object*/ ):boolean;
	toString(  ):string;

} // end Collections

} // end namespace java.util
declare namespace java.util {

class HashMap<K, V>/* extends AbstractMap<K, V> implements Map<K, V>, java.lang.Cloneable, java.io.Serializable*/ {

	clear(  ):void;
	clone(  ):any /*java.lang.Object*/;
	compute( arg0:K, arg1:BiFunction<K, V, V> ):V;
	computeIfAbsent( arg0:K, arg1:Func<K, V> ):V;
	computeIfPresent( arg0:K, arg1:BiFunction<K, V, V> ):V;
	containsKey( arg0:any /*java.lang.Object*/ ):boolean;
	containsValue( arg0:any /*java.lang.Object*/ ):boolean;
	entrySet(  ):Set<any /*java.util.Map$Entry*/>;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	forEach( arg0:BiConsumer<K, V> ):void;
	get( arg0:any /*java.lang.Object*/ ):V;
	getOrDefault( arg0:any /*java.lang.Object*/, arg1:V ):V;
	isEmpty(  ):boolean;
	keySet(  ):Set<K>;
	merge( arg0:K, arg1:V, arg2:BiFunction<V, V, V> ):V;
	put( arg0:K, arg1:V ):V;
	putAll( arg0:Map<K, V> ):void;
	putIfAbsent( arg0:K, arg1:V ):V;
	remove( arg0:any /*java.lang.Object*/ ):V;
	remove( arg0:any /*java.lang.Object*/, arg1:any /*java.lang.Object*/ ):boolean;
	replace( arg0:K, arg1:V ):V;
	replace( arg0:K, arg1:V, arg2:V ):boolean;
	replaceAll( arg0:BiFunction<K, V, V> ):void;
	size(  ):int;
	toString(  ):string;
	values(  ):Collection<V>;

} // end HashMap

} // end namespace java.util
declare namespace java.util {

class Optional<T>/* extends java.lang.Object*/ {

	equals( arg0:any /*java.lang.Object*/ ):boolean;
	filter( arg0:Predicate<T> ):Optional<T>;
	flatMap<U>( arg0:Func<T, Optional<U>> ):Optional<U>;
	get(  ):T;
	ifPresent( arg0:Consumer<T> ):void;
	ifPresentOrElse( arg0:Consumer<T>, arg1:java.lang.Runnable ):void;
	isEmpty(  ):boolean;
	isPresent(  ):boolean;
	map<U>( arg0:Func<T, U> ):Optional<U>;
	or( arg0:Supplier<Optional<T>> ):Optional<T>;
	orElse( arg0:T ):T;
	orElseGet( arg0:Supplier<T> ):T;
	orElseThrow(  ):T;
	orElseThrow<X>( arg0:Supplier<X> ):T;
	stream(  ):java.util.stream.Stream<T>;
	toString(  ):string;

} // end Optional

} // end namespace java.util
declare namespace java.util {

interface Collection<E>/* extends java.lang.Iterable<E>*/ {

	add( arg0:E ):boolean;
	addAll( arg0:Collection<E> ):boolean;
	clear(  ):void;
	contains( arg0:any /*java.lang.Object*/ ):boolean;
	containsAll( arg0:Collection<any /*java.lang.Object*/> ):boolean;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	forEach<T>( arg0:Consumer<T> ):void;
	isEmpty(  ):boolean;
	iterator(  ):Iterator<E>;
	parallelStream(  ):java.util.stream.Stream<E>;
	remove( arg0:any /*java.lang.Object*/ ):boolean;
	removeAll( arg0:Collection<any /*java.lang.Object*/> ):boolean;
	removeIf( arg0:Predicate<E> ):boolean;
	retainAll( arg0:Collection<any /*java.lang.Object*/> ):boolean;
	size(  ):int;
	spliterator(  ):any /*java.util.Spliterator*/;
	stream(  ):java.util.stream.Stream<E>;
	toArray(  ):[any /*java.lang.Object*/];
	toArray<T>( arg0:[T] ):[T];
	toArray<T>( arg0:any /*java.util.function.IntFunction*/ ):[T];

} // end Collection

} // end namespace java.util
declare namespace java.util {

interface Iterator<E> {

	forEachRemaining( arg0:Consumer<E> ):void;
	hasNext(  ):boolean;
	next(  ):E;
	remove(  ):void;

} // end Iterator

} // end namespace java.util
declare namespace java.util {

interface List<E>/* extends Collection<E>*/ {

	// static copyOf<E>( arg0:Collection<E> ):List<E>;
	// static of<E>(  ):List<E>;
	// static of<E>( ...arg0:E[] ):List<E>;
	// static of<E>( arg0:E ):List<E>;
	// static of<E>( arg0:E, arg1:E ):List<E>;
	// static of<E>( arg0:E, arg1:E, arg2:E ):List<E>;
	// static of<E>( arg0:E, arg1:E, arg2:E, arg3:E ):List<E>;
	// static of<E>( arg0:E, arg1:E, arg2:E, arg3:E, arg4:E ):List<E>;
	// static of<E>( arg0:E, arg1:E, arg2:E, arg3:E, arg4:E, arg5:E ):List<E>;
	// static of<E>( arg0:E, arg1:E, arg2:E, arg3:E, arg4:E, arg5:E, arg6:E ):List<E>;
	// static of<E>( arg0:E, arg1:E, arg2:E, arg3:E, arg4:E, arg5:E, arg6:E, arg7:E ):List<E>;
	// static of<E>( arg0:E, arg1:E, arg2:E, arg3:E, arg4:E, arg5:E, arg6:E, arg7:E, arg8:E ):List<E>;
	// static of<E>( arg0:E, arg1:E, arg2:E, arg3:E, arg4:E, arg5:E, arg6:E, arg7:E, arg8:E, arg9:E ):List<E>;
	add( arg0:E ):boolean;
	add( arg0:int, arg1:E ):void;
	addAll( arg0:Collection<E> ):boolean;
	addAll( arg0:int, arg1:Collection<E> ):boolean;
	clear(  ):void;
	contains( arg0:any /*java.lang.Object*/ ):boolean;
	containsAll( arg0:Collection<any /*java.lang.Object*/> ):boolean;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	forEach<T>( arg0:Consumer<T> ):void;
	get( arg0:int ):E;
	indexOf( arg0:any /*java.lang.Object*/ ):int;
	isEmpty(  ):boolean;
	iterator(  ):Iterator<E>;
	lastIndexOf( arg0:any /*java.lang.Object*/ ):int;
	listIterator(  ):any /*java.util.ListIterator*/;
	listIterator( arg0:int ):any /*java.util.ListIterator*/;
	parallelStream(  ):java.util.stream.Stream<E>;
	remove( arg0:any /*java.lang.Object*/ ):boolean;
	remove( arg0:int ):E;
	removeAll( arg0:Collection<any /*java.lang.Object*/> ):boolean;
	removeIf( arg0:Predicate<E> ):boolean;
	replaceAll( arg0:UnaryOperator<E> ):void;
	retainAll( arg0:Collection<any /*java.lang.Object*/> ):boolean;
	set( arg0:int, arg1:E ):E;
	size(  ):int;
	sort( arg0:any /*java.util.Comparator*/ ):void;
	spliterator(  ):any /*java.util.Spliterator*/;
	stream(  ):java.util.stream.Stream<E>;
	subList( arg0:int, arg1:int ):List<E>;
	toArray(  ):[any /*java.lang.Object*/];
	toArray<T>( arg0:[T] ):[T];
	toArray<T>( arg0:any /*java.util.function.IntFunction*/ ):[T];

} // end List

} // end namespace java.util
declare namespace java.util {

interface Map<K, V> {

	// static copyOf<K,V>( arg0:Map<K, V> ):Map<K, V>;
	// static entry<K,V>( arg0:K, arg1:V ):any /*java.util.Map$Entry*/;
	// static of<K,V>(  ):Map<K, V>;
	// static of<K,V>( arg0:K, arg1:V ):Map<K, V>;
	// static of<K,V>( arg0:K, arg1:V, arg2:K, arg3:V ):Map<K, V>;
	// static of<K,V>( arg0:K, arg1:V, arg2:K, arg3:V, arg4:K, arg5:V ):Map<K, V>;
	// static of<K,V>( arg0:K, arg1:V, arg2:K, arg3:V, arg4:K, arg5:V, arg6:K, arg7:V ):Map<K, V>;
	// static of<K,V>( arg0:K, arg1:V, arg2:K, arg3:V, arg4:K, arg5:V, arg6:K, arg7:V, arg8:K, arg9:V ):Map<K, V>;
	// static of<K,V>( arg0:K, arg1:V, arg2:K, arg3:V, arg4:K, arg5:V, arg6:K, arg7:V, arg8:K, arg9:V, arg10:K, arg11:V ):Map<K, V>;
	// static of<K,V>( arg0:K, arg1:V, arg2:K, arg3:V, arg4:K, arg5:V, arg6:K, arg7:V, arg8:K, arg9:V, arg10:K, arg11:V, arg12:K, arg13:V ):Map<K, V>;
	// static of<K,V>( arg0:K, arg1:V, arg2:K, arg3:V, arg4:K, arg5:V, arg6:K, arg7:V, arg8:K, arg9:V, arg10:K, arg11:V, arg12:K, arg13:V, arg14:K, arg15:V ):Map<K, V>;
	// static of<K,V>( arg0:K, arg1:V, arg2:K, arg3:V, arg4:K, arg5:V, arg6:K, arg7:V, arg8:K, arg9:V, arg10:K, arg11:V, arg12:K, arg13:V, arg14:K, arg15:V, arg16:K, arg17:V ):Map<K, V>;
	// static of<K,V>( arg0:K, arg1:V, arg2:K, arg3:V, arg4:K, arg5:V, arg6:K, arg7:V, arg8:K, arg9:V, arg10:K, arg11:V, arg12:K, arg13:V, arg14:K, arg15:V, arg16:K, arg17:V, arg18:K, arg19:V ):Map<K, V>;
	// static ofEntries<K,V>( ...arg0:any /*java.util.Map$Entry*/[] ):Map<K, V>;
	clear(  ):void;
	compute( arg0:K, arg1:BiFunction<K, V, V> ):V;
	computeIfAbsent( arg0:K, arg1:Func<K, V> ):V;
	computeIfPresent( arg0:K, arg1:BiFunction<K, V, V> ):V;
	containsKey( arg0:any /*java.lang.Object*/ ):boolean;
	containsValue( arg0:any /*java.lang.Object*/ ):boolean;
	entrySet(  ):Set<any /*java.util.Map$Entry*/>;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	forEach( arg0:BiConsumer<K, V> ):void;
	get( arg0:any /*java.lang.Object*/ ):V;
	getOrDefault( arg0:any /*java.lang.Object*/, arg1:V ):V;
	isEmpty(  ):boolean;
	keySet(  ):Set<K>;
	merge( arg0:K, arg1:V, arg2:BiFunction<V, V, V> ):V;
	put( arg0:K, arg1:V ):V;
	putAll( arg0:Map<K, V> ):void;
	putIfAbsent( arg0:K, arg1:V ):V;
	remove( arg0:any /*java.lang.Object*/ ):V;
	remove( arg0:any /*java.lang.Object*/, arg1:any /*java.lang.Object*/ ):boolean;
	replace( arg0:K, arg1:V ):V;
	replace( arg0:K, arg1:V, arg2:V ):boolean;
	replaceAll( arg0:BiFunction<K, V, V> ):void;
	size(  ):int;
	values(  ):Collection<V>;

} // end Map

} // end namespace java.util
declare namespace java.util {

interface Set<E>/* extends Collection<E>*/ {

	// static copyOf<E>( arg0:Collection<E> ):Set<E>;
	// static of<E>(  ):Set<E>;
	// static of<E>( ...arg0:E[] ):Set<E>;
	// static of<E>( arg0:E ):Set<E>;
	// static of<E>( arg0:E, arg1:E ):Set<E>;
	// static of<E>( arg0:E, arg1:E, arg2:E ):Set<E>;
	// static of<E>( arg0:E, arg1:E, arg2:E, arg3:E ):Set<E>;
	// static of<E>( arg0:E, arg1:E, arg2:E, arg3:E, arg4:E ):Set<E>;
	// static of<E>( arg0:E, arg1:E, arg2:E, arg3:E, arg4:E, arg5:E ):Set<E>;
	// static of<E>( arg0:E, arg1:E, arg2:E, arg3:E, arg4:E, arg5:E, arg6:E ):Set<E>;
	// static of<E>( arg0:E, arg1:E, arg2:E, arg3:E, arg4:E, arg5:E, arg6:E, arg7:E ):Set<E>;
	// static of<E>( arg0:E, arg1:E, arg2:E, arg3:E, arg4:E, arg5:E, arg6:E, arg7:E, arg8:E ):Set<E>;
	// static of<E>( arg0:E, arg1:E, arg2:E, arg3:E, arg4:E, arg5:E, arg6:E, arg7:E, arg8:E, arg9:E ):Set<E>;
	add( arg0:E ):boolean;
	addAll( arg0:Collection<E> ):boolean;
	clear(  ):void;
	contains( arg0:any /*java.lang.Object*/ ):boolean;
	containsAll( arg0:Collection<any /*java.lang.Object*/> ):boolean;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	forEach<T>( arg0:Consumer<T> ):void;
	isEmpty(  ):boolean;
	iterator(  ):Iterator<E>;
	parallelStream(  ):java.util.stream.Stream<E>;
	remove( arg0:any /*java.lang.Object*/ ):boolean;
	removeAll( arg0:Collection<any /*java.lang.Object*/> ):boolean;
	removeIf( arg0:Predicate<E> ):boolean;
	retainAll( arg0:Collection<any /*java.lang.Object*/> ):boolean;
	size(  ):int;
	spliterator(  ):any /*java.util.Spliterator*/;
	stream(  ):java.util.stream.Stream<E>;
	toArray(  ):[any /*java.lang.Object*/];
	toArray<T>( arg0:[T] ):[T];
	toArray<T>( arg0:any /*java.util.function.IntFunction*/ ):[T];

} // end Set

} // end namespace java.util
declare namespace java.util.stream {

class Collectors/* extends java.lang.Object*/ {

	equals( arg0:any /*java.lang.Object*/ ):boolean;
	toString(  ):string;

} // end Collectors

} // end namespace java.util.stream
declare namespace java.util.stream {

interface Stream<T>/* extends BaseStream<T, any>*/ {

	allMatch( arg0:Predicate<T> ):boolean;
	anyMatch( arg0:Predicate<T> ):boolean;
	close(  ):void;
	collect<R>( arg0:Supplier<R>, arg1:BiConsumer<R, T>, arg2:BiConsumer<R, R> ):R;
	collect<R>( arg0:any /*java.util.stream.Collector*/ ):R;
	count(  ):long;
	distinct(  ):Stream<T>;
	dropWhile( arg0:Predicate<T> ):Stream<T>;
	filter( arg0:Predicate<T> ):Stream<T>;
	findAny(  ):java.util.Optional<T>;
	findFirst(  ):java.util.Optional<T>;
	flatMap<R>( arg0:Func<T, Stream<R>> ):Stream<R>;
	flatMapToDouble( arg0:Func<T, any /*java.util.stream.DoubleStream*/> ):any /*java.util.stream.DoubleStream*/;
	flatMapToInt( arg0:Func<T, any /*java.util.stream.IntStream*/> ):any /*java.util.stream.IntStream*/;
	flatMapToLong( arg0:Func<T, any /*java.util.stream.LongStream*/> ):any /*java.util.stream.LongStream*/;
	forEach( arg0:Consumer<T> ):void;
	forEachOrdered( arg0:Consumer<T> ):void;
	isParallel(  ):boolean;
	iterator(  ):java.util.Iterator<T>;
	limit( arg0:long ):Stream<T>;
	map<R>( arg0:Func<T, R> ):Stream<R>;
	mapMulti<R>( arg0:BiConsumer<T, Consumer<R>> ):Stream<R>;
	mapMultiToDouble( arg0:BiConsumer<T, any /*java.util.function.DoubleConsumer*/> ):any /*java.util.stream.DoubleStream*/;
	mapMultiToInt( arg0:BiConsumer<T, any /*java.util.function.IntConsumer*/> ):any /*java.util.stream.IntStream*/;
	mapMultiToLong( arg0:BiConsumer<T, any /*java.util.function.LongConsumer*/> ):any /*java.util.stream.LongStream*/;
	mapToDouble( arg0:any /*java.util.function.ToDoubleFunction*/ ):any /*java.util.stream.DoubleStream*/;
	mapToInt( arg0:any /*java.util.function.ToIntFunction*/ ):any /*java.util.stream.IntStream*/;
	mapToLong( arg0:any /*java.util.function.ToLongFunction*/ ):any /*java.util.stream.LongStream*/;
	max( arg0:any /*java.util.Comparator*/ ):java.util.Optional<T>;
	min( arg0:any /*java.util.Comparator*/ ):java.util.Optional<T>;
	noneMatch( arg0:Predicate<T> ):boolean;
	onClose<S>( arg0:java.lang.Runnable ):S;
	parallel<S>(  ):S;
	peek( arg0:Consumer<T> ):Stream<T>;
	reduce( arg0:BinaryOperator<T> ):java.util.Optional<T>;
	reduce( arg0:T, arg1:BinaryOperator<T> ):T;
	reduce<U>( arg0:U, arg1:BiFunction<U, T, U>, arg2:BinaryOperator<U> ):U;
	sequential<S>(  ):S;
	skip( arg0:long ):Stream<T>;
	sorted(  ):Stream<T>;
	sorted( arg0:any /*java.util.Comparator*/ ):Stream<T>;
	spliterator(  ):any /*java.util.Spliterator*/;
	takeWhile( arg0:Predicate<T> ):Stream<T>;
	toArray(  ):[any /*java.lang.Object*/];
	toArray<A>( arg0:any /*java.util.function.IntFunction*/ ):[A];
	toList(  ):java.util.List<T>;
	unordered<S>(  ):S;

} // end Stream

} // end namespace java.util.stream
declare namespace net.juligame.epicspells {

class API/* extends java.lang.Object*/ {

	equals( arg0:any /*java.lang.Object*/ ):boolean;
	toString(  ):string;

} // end API

} // end namespace net.juligame.epicspells
declare namespace net.juligame.epicspells {

class EpicSpells/* extends org.bukkit.plugin.java.JavaPlugin*/ {

	equals( arg0:any /*java.lang.Object*/ ):boolean;
	getCommand( arg0:string ):any /*org.bukkit.command.PluginCommand*/;
	getComponentLogger(  ):any /*net.kyori.adventure.text.logger.slf4j.ComponentLogger*/;
	getConfig(  ):any /*org.bukkit.configuration.file.FileConfiguration*/;
	getDataFolder(  ):any /*java.io.File*/;
	getDefaultBiomeProvider( arg0:string, arg1:string ):any /*org.bukkit.generator.BiomeProvider*/;
	getDefaultWorldGenerator( arg0:string, arg1:string ):any /*org.bukkit.generator.ChunkGenerator*/;
	getDescription(  ):any /*org.bukkit.plugin.PluginDescriptionFile*/;
	getLog4JLogger(  ):any /*org.apache.logging.log4j.Logger*/;
	getLogger(  ):any /*java.util.logging.Logger*/;
	getName(  ):string;
	getPluginLoader(  ):any /*org.bukkit.plugin.PluginLoader*/;
	getPluginMeta(  ):any /*io.papermc.paper.plugin.configuration.PluginMeta*/;
	getResource( arg0:string ):any /*java.io.InputStream*/;
	getSLF4JLogger(  ):any /*org.slf4j.Logger*/;
	getServer(  ):any /*org.bukkit.Server*/;
	init( arg0:any /*org.bukkit.Server*/, arg1:any /*org.bukkit.plugin.PluginDescriptionFile*/, arg2:any /*java.io.File*/, arg3:any /*java.io.File*/, arg4:any /*java.lang.ClassLoader*/, arg5:any /*io.papermc.paper.plugin.configuration.PluginMeta*/, arg6:any /*java.util.logging.Logger*/ ):void;
	init( arg0:any /*org.bukkit.plugin.PluginLoader*/, arg1:any /*org.bukkit.Server*/, arg2:any /*org.bukkit.plugin.PluginDescriptionFile*/, arg3:any /*java.io.File*/, arg4:any /*java.io.File*/, arg5:any /*java.lang.ClassLoader*/ ):void;
	isEnabled(  ):boolean;
	isNaggable(  ):boolean;
	onCommand( arg0:any /*org.bukkit.command.CommandSender*/, arg1:any /*org.bukkit.command.Command*/, arg2:string, arg3:[string] ):boolean;
	onDisable(  ):void;
	onEnable(  ):void;
	onLoad(  ):void;
	onTabComplete( arg0:any /*org.bukkit.command.CommandSender*/, arg1:any /*org.bukkit.command.Command*/, arg2:string, arg3:[string] ):java.util.List<string>;
	reloadConfig(  ):void;
	saveConfig(  ):void;
	saveDefaultConfig(  ):void;
	saveResource( arg0:string, arg1:boolean ):void;
	setEnabled( arg0:boolean ):void;
	setNaggable( arg0:boolean ):void;
	toString(  ):string;

} // end EpicSpells

} // end namespace net.juligame.epicspells
declare namespace net.juligame.epicspells.classes {

class EpicPlayer/* extends net.juligame.Jsql.JSql*/ {

	delete(  ):void;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	getPlayerWand( wandModel:net.juligame.epicspells.classes.wand.WandModel ):any /*net.juligame.epicspells.classes.wand.PlayerWand*/;
	getPlayerWand( wandName:string ):any /*net.juligame.epicspells.classes.wand.PlayerWand*/;
	save(  ):void;
	toString(  ):string;

} // end EpicPlayer

} // end namespace net.juligame.epicspells.classes
declare namespace net.juligame.epicspells.classes.effects {

class Dot/* extends net.juligame.epicspells.classes.effects.interfaces.movable implements net.juligame.epicspells.classes.effects.interfaces.hittable*/ {

	MoveTo( finalLoc:org.bukkit.Location, blocksPerSecond:float ):void;
	MoveTo( finalLoc:org.bukkit.Location, inTicks:float, interpolation:net.juligame.epicspells.classes.enums.Interpolations ):void;
	Spawn( spawnLocation:org.bukkit.Location ):void;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	getCurrentLocation(  ):org.bukkit.Location;
	getHitbox(  ):net.juligame.epicspells.classes.util.Hitbox;
	onEndMove( hitground:boolean ):void;
	setOnCasterHit( onCasterHit:Func<org.bukkit.entity.LivingEntity, boolean|null> ):void;
	setOnEntityHit( onEntityHit:Func<org.bukkit.entity.LivingEntity, boolean|null> ):void;
	setOnGroundHit( onGroundHit:org.bukkit.util.Consumer<org.bukkit.Location> ):void;
	startHitDetection( onHitEntity:Func<java.util.List<org.bukkit.entity.LivingEntity>, boolean|null> ):void;
	stopMove(  ):void;
	toString(  ):string;

} // end Dot

} // end namespace net.juligame.epicspells.classes.effects
declare namespace net.juligame.epicspells.classes.effects {

class MMobEntity/* extends net.juligame.epicspells.classes.effects.interfaces.movable*/ {

	MoveTo( finalLoc:org.bukkit.Location, blocksPerSecond:float ):void;
	MoveTo( finalLoc:org.bukkit.Location, inTicks:float, interpolation:net.juligame.epicspells.classes.enums.Interpolations ):void;
	despawn(  ):void;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	onEndMove( hitGround:boolean ):void;
	setOnCasterHit( onCasterHit:Func<org.bukkit.entity.LivingEntity, boolean|null> ):void;
	setOnEntityHit( onEntityHit:Func<org.bukkit.entity.LivingEntity, boolean|null> ):void;
	setOnGroundHit( onGroundHit:org.bukkit.util.Consumer<org.bukkit.Location> ):void;
	stopMove(  ):void;
	toString(  ):string;

} // end MMobEntity

} // end namespace net.juligame.epicspells.classes.effects
declare namespace net.juligame.epicspells.classes.effects {

class MultiDot/* extends Dot*/ {

	MoveTo( finalLoc:org.bukkit.Location, blocksPerSecond:float ):void;
	MoveTo( finalLoc:org.bukkit.Location, inTicks:float, interpolation:net.juligame.epicspells.classes.enums.Interpolations ):void;
	Spawn( location:org.bukkit.Location, quantity:int ):void;
	Spawn( spawnLocation:org.bukkit.Location ):void;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	getCurrentLocation(  ):org.bukkit.Location;
	getHitbox(  ):net.juligame.epicspells.classes.util.Hitbox;
	onEndMove( hitground:boolean ):void;
	setOnCasterHit( onCasterHit:Func<org.bukkit.entity.LivingEntity, boolean|null> ):void;
	setOnEntityHit( onEntityHit:Func<org.bukkit.entity.LivingEntity, boolean|null> ):void;
	setOnGroundHit( onGroundHit:org.bukkit.util.Consumer<org.bukkit.Location> ):void;
	startHitDetection( onHitEntity:Func<java.util.List<org.bukkit.entity.LivingEntity>, boolean|null> ):void;
	stopMove(  ):void;
	toString(  ):string;

} // end MultiDot

} // end namespace net.juligame.epicspells.classes.effects
declare namespace net.juligame.epicspells.classes.effects {

class Pentagrama/* extends java.lang.Object*/ {

	addRotation( yaw:double, pitch:double, roll:double ):void;
	chageRotation( yaw:double, pitch:double, roll:double ):void;
	changeRGB( r:int, g:int, b:int ):void;
	drawFrame( location:org.bukkit.Location ):void;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	toString(  ):string;

} // end Pentagrama

} // end namespace net.juligame.epicspells.classes.effects
declare namespace net.juligame.epicspells.classes.effects.event {

class PlayerHitEntityEvent/* extends java.lang.Object*/ {

	equals( arg0:any /*java.lang.Object*/ ):boolean;
	toString(  ):string;

} // end PlayerHitEntityEvent

} // end namespace net.juligame.epicspells.classes.effects.event
declare namespace net.juligame.epicspells.classes.effects.interfaces {

class movable/* extends java.lang.Object*/ {

	MoveTo( finalLoc:org.bukkit.Location, blocksPerSecond:float ):void;
	MoveTo( finalLoc:org.bukkit.Location, inTicks:float, interpolation:net.juligame.epicspells.classes.enums.Interpolations ):void;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	onEndMove( hitGround:boolean ):void;
	stopMove(  ):void;
	toString(  ):string;

} // end movable

} // end namespace net.juligame.epicspells.classes.effects.interfaces
declare namespace net.juligame.epicspells.classes.effects.interfaces {

interface hittable {

	getCurrentLocation(  ):org.bukkit.Location;
	getHitbox(  ):net.juligame.epicspells.classes.util.Hitbox;
	startHitDetection( onHitEntity:Func<java.util.List<org.bukkit.entity.LivingEntity>, boolean|null> ):void;

} // end hittable

} // end namespace net.juligame.epicspells.classes.effects.interfaces
declare namespace net.juligame.epicspells.classes.enums {

/* enum */class Element/* extends java.lang.Enum<any>*/ {

	// FIRE:Element;
	// ICE:Element;
	// WATER:Element;
	// AIR:Element;
	// LIGHT:Element;
	// DARK:Element;
	// HOLY:Element;
	// NINGUNO:Element;
	// POISON:Element;
	// ELECTRIC:Element;

	color(  ):string;
	compareTo<E>( arg0:E ):int;
	describeConstable(  ):java.util.Optional<any /*java.lang.Enum$EnumDesc*/>;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	getDeclaringClass<E>(  ):java.lang.Class<E>;
	name(  ):string;
	ordinal(  ):int;
	toString(  ):string;

} // end Element

} // end namespace net.juligame.epicspells.classes.enums
declare namespace net.juligame.epicspells.classes.enums {

/* enum */class Interpolations/* extends java.lang.Enum<any>*/ {

	// LINEAR:Interpolations;
	// QUADRATIC:Interpolations;
	// CUBIC:Interpolations;
	// SIN:Interpolations;
	// COS:Interpolations;
	// CIRCLE:Interpolations;
	// EXPONENTIAL:Interpolations;
	// ELASTIC:Interpolations;
	// BACK:Interpolations;
	// BOUNCE:Interpolations;

	compareTo<E>( arg0:E ):int;
	describeConstable(  ):java.util.Optional<any /*java.lang.Enum$EnumDesc*/>;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	get( time:double ):void;
	get( time:double, start:org.bukkit.Location, end:org.bukkit.Location ):org.bukkit.Location;
	getDeclaringClass<E>(  ):java.lang.Class<E>;
	name(  ):string;
	ordinal(  ):int;
	toString(  ):string;

} // end Interpolations

} // end namespace net.juligame.epicspells.classes.enums
declare namespace net.juligame.epicspells.classes.spell {

class SpellLogic/* extends java.lang.Object*/ {

	equals( arg0:any /*java.lang.Object*/ ):boolean;
	getName(  ):string;
	getOnCast(  ):Func<net.juligame.epicspells.classes.spell.events.CastEvent, boolean|null>;
	setOnCast( onCast:Func<net.juligame.epicspells.classes.spell.events.CastEvent, boolean|null> ):void;
	toString(  ):string;

} // end SpellLogic

} // end namespace net.juligame.epicspells.classes.spell
declare namespace net.juligame.epicspells.classes.spell {

class SpellStats/* extends java.lang.Object*/ {

	add( other:SpellStats ):SpellStats;
	clone(  ):SpellStats;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	getAlcance(  ):int;
	getArea(  ):double;
	getCooldown(  ):int;
	getDamage(  ):double;
	getDuration(  ):int;
	getElement(  ):string;
	toString(  ):string;

} // end SpellStats

} // end namespace net.juligame.epicspells.classes.spell
declare namespace net.juligame.epicspells.classes.spell.events {

class CastEvent/* extends java.lang.Object*/ {

	equals( arg0:any /*java.lang.Object*/ ):boolean;
	getCaster(  ):org.bukkit.entity.Player;
	getEndCastLocation(  ):org.bukkit.Location;
	getFinalStats(  ):net.juligame.epicspells.classes.spell.SpellStats;
	toString(  ):string;

} // end CastEvent

} // end namespace net.juligame.epicspells.classes.spell.events
declare namespace net.juligame.epicspells.classes.util {

class FastEvent/* extends java.lang.Object*/ {

	equals( arg0:any /*java.lang.Object*/ ):boolean;
	onStop( consumer:java.lang.Runnable ):void;
	stop(  ):void;
	stopIn( ticks:int ):FastEvent;
	toString(  ):string;

} // end FastEvent

} // end namespace net.juligame.epicspells.classes.util
declare namespace net.juligame.epicspells.classes.util {

class Hitbox/* extends java.lang.Object*/ {

	equals( arg0:any /*java.lang.Object*/ ):boolean;
	getHitEntities( location:org.bukkit.Location ):java.util.List<org.bukkit.entity.LivingEntity>;
	toString(  ):string;

} // end Hitbox

} // end namespace net.juligame.epicspells.classes.util
declare namespace net.juligame.epicspells.classes.wand {

class WandLogic/* extends java.lang.Object*/ {

	equals( arg0:any /*java.lang.Object*/ ):boolean;
	getName(  ):string;
	getOnEvent(  ):org.bukkit.util.Consumer<net.juligame.epicspells.classes.wand.events.WandEvent>;
	setOnEvent( onEvent:org.bukkit.util.Consumer<net.juligame.epicspells.classes.wand.events.WandEvent> ):void;
	toString(  ):string;

} // end WandLogic

} // end namespace net.juligame.epicspells.classes.wand
declare namespace net.juligame.epicspells.classes.wand {

class WandModel/* extends java.lang.Object*/ {

	OnBasicCast( player:org.bukkit.entity.Player, itemStack:org.bukkit.inventory.ItemStack ):void;
	OnEquip( player:org.bukkit.entity.Player, itemStack:org.bukkit.inventory.ItemStack ):void;
	OnSecondaryCast( player:org.bukkit.entity.Player, itemStack:org.bukkit.inventory.ItemStack ):void;
	OnUnequip( player:org.bukkit.entity.Player, itemStack:org.bukkit.inventory.ItemStack ):void;
	StartHold( player:org.bukkit.entity.Player ):void;
	StopHold( player:org.bukkit.entity.Player ):void;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	getItemStack(  ):org.bukkit.inventory.ItemStack;
	toString(  ):string;

} // end WandModel

} // end namespace net.juligame.epicspells.classes.wand
declare namespace net.juligame.epicspells.classes.wand.events {

class WandEvent/* extends java.lang.Object*/ {

	equals( arg0:any /*java.lang.Object*/ ):boolean;
	getItemStack(  ):org.bukkit.inventory.ItemStack;
	getPlayer(  ):org.bukkit.entity.Player;
	getWandModel(  ):net.juligame.epicspells.classes.wand.WandModel;
	toString(  ):string;

} // end WandEvent

} // end namespace net.juligame.epicspells.classes.wand.events
declare namespace org.bukkit {

/* enum */class Effect/* extends java.lang.Enum<any>*/ {

	// CLICK2:Effect;
	// CLICK1:Effect;
	// BOW_FIRE:Effect;
	// DOOR_TOGGLE:Effect;
	// IRON_DOOR_TOGGLE:Effect;
	// TRAPDOOR_TOGGLE:Effect;
	// IRON_TRAPDOOR_TOGGLE:Effect;
	// FENCE_GATE_TOGGLE:Effect;
	// DOOR_CLOSE:Effect;
	// IRON_DOOR_CLOSE:Effect;
	// TRAPDOOR_CLOSE:Effect;
	// IRON_TRAPDOOR_CLOSE:Effect;
	// FENCE_GATE_CLOSE:Effect;
	// EXTINGUISH:Effect;
	// RECORD_PLAY:Effect;
	// GHAST_SHRIEK:Effect;
	// GHAST_SHOOT:Effect;
	// BLAZE_SHOOT:Effect;
	// ZOMBIE_CHEW_WOODEN_DOOR:Effect;
	// ZOMBIE_CHEW_IRON_DOOR:Effect;
	// ZOMBIE_DESTROY_DOOR:Effect;
	// SMOKE:Effect;
	// STEP_SOUND:Effect;
	// POTION_BREAK:Effect;
	// INSTANT_POTION_BREAK:Effect;
	// ENDER_SIGNAL:Effect;
	// MOBSPAWNER_FLAMES:Effect;
	// BREWING_STAND_BREW:Effect;
	// CHORUS_FLOWER_GROW:Effect;
	// CHORUS_FLOWER_DEATH:Effect;
	// PORTAL_TRAVEL:Effect;
	// ENDEREYE_LAUNCH:Effect;
	// FIREWORK_SHOOT:Effect;
	// VILLAGER_PLANT_GROW:Effect;
	// DRAGON_BREATH:Effect;
	// ANVIL_BREAK:Effect;
	// ANVIL_USE:Effect;
	// ANVIL_LAND:Effect;
	// ENDERDRAGON_SHOOT:Effect;
	// WITHER_BREAK_BLOCK:Effect;
	// WITHER_SHOOT:Effect;
	// ZOMBIE_INFECT:Effect;
	// ZOMBIE_CONVERTED_VILLAGER:Effect;
	// BAT_TAKEOFF:Effect;
	// END_GATEWAY_SPAWN:Effect;
	// ENDERDRAGON_GROWL:Effect;
	// PHANTOM_BITE:Effect;
	// ZOMBIE_CONVERTED_TO_DROWNED:Effect;
	// HUSK_CONVERTED_TO_ZOMBIE:Effect;
	// GRINDSTONE_USE:Effect;
	// BOOK_PAGE_TURN:Effect;
	// SMITHING_TABLE_USE:Effect;
	// POINTED_DRIPSTONE_LAND:Effect;
	// POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON:Effect;
	// POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON:Effect;
	// SKELETON_CONVERTED_TO_STRAY:Effect;
	// COMPOSTER_FILL_ATTEMPT:Effect;
	// LAVA_INTERACT:Effect;
	// REDSTONE_TORCH_BURNOUT:Effect;
	// END_PORTAL_FRAME_FILL:Effect;
	// DRIPPING_DRIPSTONE:Effect;
	// BONE_MEAL_USE:Effect;
	// ENDER_DRAGON_DESTROY_BLOCK:Effect;
	// SPONGE_DRY:Effect;
	// ELECTRIC_SPARK:Effect;
	// COPPER_WAX_ON:Effect;
	// COPPER_WAX_OFF:Effect;
	// OXIDISED_COPPER_SCRAPE:Effect;
	// WITHER_SPAWNED:Effect;
	// ENDER_DRAGON_DEATH:Effect;
	// END_PORTAL_CREATED_IN_OVERWORLD:Effect;
	// PHANTOM_BITES:Effect;
	// ZOMBIE_CONVERTS_TO_DROWNED:Effect;
	// HUSK_CONVERTS_TO_ZOMBIE:Effect;
	// GRINDSTONE_USED:Effect;
	// BOOK_PAGE_TURNED:Effect;
	// COMPOSTER_COMPOSTS:Effect;
	// LAVA_CONVERTS_BLOCK:Effect;
	// REDSTONE_TORCH_BURNS_OUT:Effect;
	// ENDER_EYE_PLACED:Effect;
	// ENDER_DRAGON_DESTROYS_BLOCK:Effect;
	// WET_SPONGE_VAPORIZES_IN_NETHER:Effect;

	compareTo<E>( arg0:E ):int;
	describeConstable(  ):java.util.Optional<any /*java.lang.Enum$EnumDesc*/>;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	getData(  ):java.lang.Class<any /*java.lang.Object*/>;
	getDeclaringClass<E>(  ):java.lang.Class<E>;
	getId(  ):int;
	getType(  ):any /*org.bukkit.Effect$Type*/;
	name(  ):string;
	ordinal(  ):int;
	toString(  ):string;

} // end Effect

} // end namespace org.bukkit
declare namespace org.bukkit {

/* enum */class Material/* extends java.lang.Enum<any> implements Keyed, Translatable, net.kyori.adventure.translation.Translatable*/ {

	// AIR:Material;
	// STONE:Material;
	// GRANITE:Material;
	// POLISHED_GRANITE:Material;
	// DIORITE:Material;
	// POLISHED_DIORITE:Material;
	// ANDESITE:Material;
	// POLISHED_ANDESITE:Material;
	// DEEPSLATE:Material;
	// COBBLED_DEEPSLATE:Material;
	// POLISHED_DEEPSLATE:Material;
	// CALCITE:Material;
	// TUFF:Material;
	// DRIPSTONE_BLOCK:Material;
	// GRASS_BLOCK:Material;
	// DIRT:Material;
	// COARSE_DIRT:Material;
	// PODZOL:Material;
	// ROOTED_DIRT:Material;
	// MUD:Material;
	// CRIMSON_NYLIUM:Material;
	// WARPED_NYLIUM:Material;
	// COBBLESTONE:Material;
	// OAK_PLANKS:Material;
	// SPRUCE_PLANKS:Material;
	// BIRCH_PLANKS:Material;
	// JUNGLE_PLANKS:Material;
	// ACACIA_PLANKS:Material;
	// CHERRY_PLANKS:Material;
	// DARK_OAK_PLANKS:Material;
	// MANGROVE_PLANKS:Material;
	// BAMBOO_PLANKS:Material;
	// CRIMSON_PLANKS:Material;
	// WARPED_PLANKS:Material;
	// BAMBOO_MOSAIC:Material;
	// OAK_SAPLING:Material;
	// SPRUCE_SAPLING:Material;
	// BIRCH_SAPLING:Material;
	// JUNGLE_SAPLING:Material;
	// ACACIA_SAPLING:Material;
	// CHERRY_SAPLING:Material;
	// DARK_OAK_SAPLING:Material;
	// MANGROVE_PROPAGULE:Material;
	// BEDROCK:Material;
	// SAND:Material;
	// SUSPICIOUS_SAND:Material;
	// RED_SAND:Material;
	// GRAVEL:Material;
	// COAL_ORE:Material;
	// DEEPSLATE_COAL_ORE:Material;
	// IRON_ORE:Material;
	// DEEPSLATE_IRON_ORE:Material;
	// COPPER_ORE:Material;
	// DEEPSLATE_COPPER_ORE:Material;
	// GOLD_ORE:Material;
	// DEEPSLATE_GOLD_ORE:Material;
	// REDSTONE_ORE:Material;
	// DEEPSLATE_REDSTONE_ORE:Material;
	// EMERALD_ORE:Material;
	// DEEPSLATE_EMERALD_ORE:Material;
	// LAPIS_ORE:Material;
	// DEEPSLATE_LAPIS_ORE:Material;
	// DIAMOND_ORE:Material;
	// DEEPSLATE_DIAMOND_ORE:Material;
	// NETHER_GOLD_ORE:Material;
	// NETHER_QUARTZ_ORE:Material;
	// ANCIENT_DEBRIS:Material;
	// COAL_BLOCK:Material;
	// RAW_IRON_BLOCK:Material;
	// RAW_COPPER_BLOCK:Material;
	// RAW_GOLD_BLOCK:Material;
	// AMETHYST_BLOCK:Material;
	// BUDDING_AMETHYST:Material;
	// IRON_BLOCK:Material;
	// COPPER_BLOCK:Material;
	// GOLD_BLOCK:Material;
	// DIAMOND_BLOCK:Material;
	// NETHERITE_BLOCK:Material;
	// EXPOSED_COPPER:Material;
	// WEATHERED_COPPER:Material;
	// OXIDIZED_COPPER:Material;
	// CUT_COPPER:Material;
	// EXPOSED_CUT_COPPER:Material;
	// WEATHERED_CUT_COPPER:Material;
	// OXIDIZED_CUT_COPPER:Material;
	// CUT_COPPER_STAIRS:Material;
	// EXPOSED_CUT_COPPER_STAIRS:Material;
	// WEATHERED_CUT_COPPER_STAIRS:Material;
	// OXIDIZED_CUT_COPPER_STAIRS:Material;
	// CUT_COPPER_SLAB:Material;
	// EXPOSED_CUT_COPPER_SLAB:Material;
	// WEATHERED_CUT_COPPER_SLAB:Material;
	// OXIDIZED_CUT_COPPER_SLAB:Material;
	// WAXED_COPPER_BLOCK:Material;
	// WAXED_EXPOSED_COPPER:Material;
	// WAXED_WEATHERED_COPPER:Material;
	// WAXED_OXIDIZED_COPPER:Material;
	// WAXED_CUT_COPPER:Material;
	// WAXED_EXPOSED_CUT_COPPER:Material;
	// WAXED_WEATHERED_CUT_COPPER:Material;
	// WAXED_OXIDIZED_CUT_COPPER:Material;
	// WAXED_CUT_COPPER_STAIRS:Material;
	// WAXED_EXPOSED_CUT_COPPER_STAIRS:Material;
	// WAXED_WEATHERED_CUT_COPPER_STAIRS:Material;
	// WAXED_OXIDIZED_CUT_COPPER_STAIRS:Material;
	// WAXED_CUT_COPPER_SLAB:Material;
	// WAXED_EXPOSED_CUT_COPPER_SLAB:Material;
	// WAXED_WEATHERED_CUT_COPPER_SLAB:Material;
	// WAXED_OXIDIZED_CUT_COPPER_SLAB:Material;
	// OAK_LOG:Material;
	// SPRUCE_LOG:Material;
	// BIRCH_LOG:Material;
	// JUNGLE_LOG:Material;
	// ACACIA_LOG:Material;
	// CHERRY_LOG:Material;
	// DARK_OAK_LOG:Material;
	// MANGROVE_LOG:Material;
	// MANGROVE_ROOTS:Material;
	// MUDDY_MANGROVE_ROOTS:Material;
	// CRIMSON_STEM:Material;
	// WARPED_STEM:Material;
	// BAMBOO_BLOCK:Material;
	// STRIPPED_OAK_LOG:Material;
	// STRIPPED_SPRUCE_LOG:Material;
	// STRIPPED_BIRCH_LOG:Material;
	// STRIPPED_JUNGLE_LOG:Material;
	// STRIPPED_ACACIA_LOG:Material;
	// STRIPPED_CHERRY_LOG:Material;
	// STRIPPED_DARK_OAK_LOG:Material;
	// STRIPPED_MANGROVE_LOG:Material;
	// STRIPPED_CRIMSON_STEM:Material;
	// STRIPPED_WARPED_STEM:Material;
	// STRIPPED_OAK_WOOD:Material;
	// STRIPPED_SPRUCE_WOOD:Material;
	// STRIPPED_BIRCH_WOOD:Material;
	// STRIPPED_JUNGLE_WOOD:Material;
	// STRIPPED_ACACIA_WOOD:Material;
	// STRIPPED_CHERRY_WOOD:Material;
	// STRIPPED_DARK_OAK_WOOD:Material;
	// STRIPPED_MANGROVE_WOOD:Material;
	// STRIPPED_CRIMSON_HYPHAE:Material;
	// STRIPPED_WARPED_HYPHAE:Material;
	// STRIPPED_BAMBOO_BLOCK:Material;
	// OAK_WOOD:Material;
	// SPRUCE_WOOD:Material;
	// BIRCH_WOOD:Material;
	// JUNGLE_WOOD:Material;
	// ACACIA_WOOD:Material;
	// CHERRY_WOOD:Material;
	// DARK_OAK_WOOD:Material;
	// MANGROVE_WOOD:Material;
	// CRIMSON_HYPHAE:Material;
	// WARPED_HYPHAE:Material;
	// OAK_LEAVES:Material;
	// SPRUCE_LEAVES:Material;
	// BIRCH_LEAVES:Material;
	// JUNGLE_LEAVES:Material;
	// ACACIA_LEAVES:Material;
	// CHERRY_LEAVES:Material;
	// DARK_OAK_LEAVES:Material;
	// MANGROVE_LEAVES:Material;
	// AZALEA_LEAVES:Material;
	// FLOWERING_AZALEA_LEAVES:Material;
	// SPONGE:Material;
	// WET_SPONGE:Material;
	// GLASS:Material;
	// TINTED_GLASS:Material;
	// LAPIS_BLOCK:Material;
	// SANDSTONE:Material;
	// CHISELED_SANDSTONE:Material;
	// CUT_SANDSTONE:Material;
	// COBWEB:Material;
	// GRASS:Material;
	// FERN:Material;
	// AZALEA:Material;
	// FLOWERING_AZALEA:Material;
	// DEAD_BUSH:Material;
	// SEAGRASS:Material;
	// SEA_PICKLE:Material;
	// WHITE_WOOL:Material;
	// ORANGE_WOOL:Material;
	// MAGENTA_WOOL:Material;
	// LIGHT_BLUE_WOOL:Material;
	// YELLOW_WOOL:Material;
	// LIME_WOOL:Material;
	// PINK_WOOL:Material;
	// GRAY_WOOL:Material;
	// LIGHT_GRAY_WOOL:Material;
	// CYAN_WOOL:Material;
	// PURPLE_WOOL:Material;
	// BLUE_WOOL:Material;
	// BROWN_WOOL:Material;
	// GREEN_WOOL:Material;
	// RED_WOOL:Material;
	// BLACK_WOOL:Material;
	// DANDELION:Material;
	// POPPY:Material;
	// BLUE_ORCHID:Material;
	// ALLIUM:Material;
	// AZURE_BLUET:Material;
	// RED_TULIP:Material;
	// ORANGE_TULIP:Material;
	// WHITE_TULIP:Material;
	// PINK_TULIP:Material;
	// OXEYE_DAISY:Material;
	// CORNFLOWER:Material;
	// LILY_OF_THE_VALLEY:Material;
	// WITHER_ROSE:Material;
	// TORCHFLOWER:Material;
	// SPORE_BLOSSOM:Material;
	// BROWN_MUSHROOM:Material;
	// RED_MUSHROOM:Material;
	// CRIMSON_FUNGUS:Material;
	// WARPED_FUNGUS:Material;
	// CRIMSON_ROOTS:Material;
	// WARPED_ROOTS:Material;
	// NETHER_SPROUTS:Material;
	// WEEPING_VINES:Material;
	// TWISTING_VINES:Material;
	// SUGAR_CANE:Material;
	// KELP:Material;
	// MOSS_CARPET:Material;
	// PINK_PETALS:Material;
	// MOSS_BLOCK:Material;
	// HANGING_ROOTS:Material;
	// BIG_DRIPLEAF:Material;
	// SMALL_DRIPLEAF:Material;
	// BAMBOO:Material;
	// OAK_SLAB:Material;
	// SPRUCE_SLAB:Material;
	// BIRCH_SLAB:Material;
	// JUNGLE_SLAB:Material;
	// ACACIA_SLAB:Material;
	// CHERRY_SLAB:Material;
	// DARK_OAK_SLAB:Material;
	// MANGROVE_SLAB:Material;
	// BAMBOO_SLAB:Material;
	// BAMBOO_MOSAIC_SLAB:Material;
	// CRIMSON_SLAB:Material;
	// WARPED_SLAB:Material;
	// STONE_SLAB:Material;
	// SMOOTH_STONE_SLAB:Material;
	// SANDSTONE_SLAB:Material;
	// CUT_SANDSTONE_SLAB:Material;
	// PETRIFIED_OAK_SLAB:Material;
	// COBBLESTONE_SLAB:Material;
	// BRICK_SLAB:Material;
	// STONE_BRICK_SLAB:Material;
	// MUD_BRICK_SLAB:Material;
	// NETHER_BRICK_SLAB:Material;
	// QUARTZ_SLAB:Material;
	// RED_SANDSTONE_SLAB:Material;
	// CUT_RED_SANDSTONE_SLAB:Material;
	// PURPUR_SLAB:Material;
	// PRISMARINE_SLAB:Material;
	// PRISMARINE_BRICK_SLAB:Material;
	// DARK_PRISMARINE_SLAB:Material;
	// SMOOTH_QUARTZ:Material;
	// SMOOTH_RED_SANDSTONE:Material;
	// SMOOTH_SANDSTONE:Material;
	// SMOOTH_STONE:Material;
	// BRICKS:Material;
	// BOOKSHELF:Material;
	// CHISELED_BOOKSHELF:Material;
	// DECORATED_POT:Material;
	// MOSSY_COBBLESTONE:Material;
	// OBSIDIAN:Material;
	// TORCH:Material;
	// END_ROD:Material;
	// CHORUS_PLANT:Material;
	// CHORUS_FLOWER:Material;
	// PURPUR_BLOCK:Material;
	// PURPUR_PILLAR:Material;
	// PURPUR_STAIRS:Material;
	// SPAWNER:Material;
	// CHEST:Material;
	// CRAFTING_TABLE:Material;
	// FARMLAND:Material;
	// FURNACE:Material;
	// LADDER:Material;
	// COBBLESTONE_STAIRS:Material;
	// SNOW:Material;
	// ICE:Material;
	// SNOW_BLOCK:Material;
	// CACTUS:Material;
	// CLAY:Material;
	// JUKEBOX:Material;
	// OAK_FENCE:Material;
	// SPRUCE_FENCE:Material;
	// BIRCH_FENCE:Material;
	// JUNGLE_FENCE:Material;
	// ACACIA_FENCE:Material;
	// CHERRY_FENCE:Material;
	// DARK_OAK_FENCE:Material;
	// MANGROVE_FENCE:Material;
	// BAMBOO_FENCE:Material;
	// CRIMSON_FENCE:Material;
	// WARPED_FENCE:Material;
	// PUMPKIN:Material;
	// CARVED_PUMPKIN:Material;
	// JACK_O_LANTERN:Material;
	// NETHERRACK:Material;
	// SOUL_SAND:Material;
	// SOUL_SOIL:Material;
	// BASALT:Material;
	// POLISHED_BASALT:Material;
	// SMOOTH_BASALT:Material;
	// SOUL_TORCH:Material;
	// GLOWSTONE:Material;
	// INFESTED_STONE:Material;
	// INFESTED_COBBLESTONE:Material;
	// INFESTED_STONE_BRICKS:Material;
	// INFESTED_MOSSY_STONE_BRICKS:Material;
	// INFESTED_CRACKED_STONE_BRICKS:Material;
	// INFESTED_CHISELED_STONE_BRICKS:Material;
	// INFESTED_DEEPSLATE:Material;
	// STONE_BRICKS:Material;
	// MOSSY_STONE_BRICKS:Material;
	// CRACKED_STONE_BRICKS:Material;
	// CHISELED_STONE_BRICKS:Material;
	// PACKED_MUD:Material;
	// MUD_BRICKS:Material;
	// DEEPSLATE_BRICKS:Material;
	// CRACKED_DEEPSLATE_BRICKS:Material;
	// DEEPSLATE_TILES:Material;
	// CRACKED_DEEPSLATE_TILES:Material;
	// CHISELED_DEEPSLATE:Material;
	// REINFORCED_DEEPSLATE:Material;
	// BROWN_MUSHROOM_BLOCK:Material;
	// RED_MUSHROOM_BLOCK:Material;
	// MUSHROOM_STEM:Material;
	// IRON_BARS:Material;
	// CHAIN:Material;
	// GLASS_PANE:Material;
	// MELON:Material;
	// VINE:Material;
	// GLOW_LICHEN:Material;
	// BRICK_STAIRS:Material;
	// STONE_BRICK_STAIRS:Material;
	// MUD_BRICK_STAIRS:Material;
	// MYCELIUM:Material;
	// LILY_PAD:Material;
	// NETHER_BRICKS:Material;
	// CRACKED_NETHER_BRICKS:Material;
	// CHISELED_NETHER_BRICKS:Material;
	// NETHER_BRICK_FENCE:Material;
	// NETHER_BRICK_STAIRS:Material;
	// SCULK:Material;
	// SCULK_VEIN:Material;
	// SCULK_CATALYST:Material;
	// SCULK_SHRIEKER:Material;
	// ENCHANTING_TABLE:Material;
	// END_PORTAL_FRAME:Material;
	// END_STONE:Material;
	// END_STONE_BRICKS:Material;
	// DRAGON_EGG:Material;
	// SANDSTONE_STAIRS:Material;
	// ENDER_CHEST:Material;
	// EMERALD_BLOCK:Material;
	// OAK_STAIRS:Material;
	// SPRUCE_STAIRS:Material;
	// BIRCH_STAIRS:Material;
	// JUNGLE_STAIRS:Material;
	// ACACIA_STAIRS:Material;
	// CHERRY_STAIRS:Material;
	// DARK_OAK_STAIRS:Material;
	// MANGROVE_STAIRS:Material;
	// BAMBOO_STAIRS:Material;
	// BAMBOO_MOSAIC_STAIRS:Material;
	// CRIMSON_STAIRS:Material;
	// WARPED_STAIRS:Material;
	// COMMAND_BLOCK:Material;
	// BEACON:Material;
	// COBBLESTONE_WALL:Material;
	// MOSSY_COBBLESTONE_WALL:Material;
	// BRICK_WALL:Material;
	// PRISMARINE_WALL:Material;
	// RED_SANDSTONE_WALL:Material;
	// MOSSY_STONE_BRICK_WALL:Material;
	// GRANITE_WALL:Material;
	// STONE_BRICK_WALL:Material;
	// MUD_BRICK_WALL:Material;
	// NETHER_BRICK_WALL:Material;
	// ANDESITE_WALL:Material;
	// RED_NETHER_BRICK_WALL:Material;
	// SANDSTONE_WALL:Material;
	// END_STONE_BRICK_WALL:Material;
	// DIORITE_WALL:Material;
	// BLACKSTONE_WALL:Material;
	// POLISHED_BLACKSTONE_WALL:Material;
	// POLISHED_BLACKSTONE_BRICK_WALL:Material;
	// COBBLED_DEEPSLATE_WALL:Material;
	// POLISHED_DEEPSLATE_WALL:Material;
	// DEEPSLATE_BRICK_WALL:Material;
	// DEEPSLATE_TILE_WALL:Material;
	// ANVIL:Material;
	// CHIPPED_ANVIL:Material;
	// DAMAGED_ANVIL:Material;
	// CHISELED_QUARTZ_BLOCK:Material;
	// QUARTZ_BLOCK:Material;
	// QUARTZ_BRICKS:Material;
	// QUARTZ_PILLAR:Material;
	// QUARTZ_STAIRS:Material;
	// WHITE_TERRACOTTA:Material;
	// ORANGE_TERRACOTTA:Material;
	// MAGENTA_TERRACOTTA:Material;
	// LIGHT_BLUE_TERRACOTTA:Material;
	// YELLOW_TERRACOTTA:Material;
	// LIME_TERRACOTTA:Material;
	// PINK_TERRACOTTA:Material;
	// GRAY_TERRACOTTA:Material;
	// LIGHT_GRAY_TERRACOTTA:Material;
	// CYAN_TERRACOTTA:Material;
	// PURPLE_TERRACOTTA:Material;
	// BLUE_TERRACOTTA:Material;
	// BROWN_TERRACOTTA:Material;
	// GREEN_TERRACOTTA:Material;
	// RED_TERRACOTTA:Material;
	// BLACK_TERRACOTTA:Material;
	// BARRIER:Material;
	// LIGHT:Material;
	// HAY_BLOCK:Material;
	// WHITE_CARPET:Material;
	// ORANGE_CARPET:Material;
	// MAGENTA_CARPET:Material;
	// LIGHT_BLUE_CARPET:Material;
	// YELLOW_CARPET:Material;
	// LIME_CARPET:Material;
	// PINK_CARPET:Material;
	// GRAY_CARPET:Material;
	// LIGHT_GRAY_CARPET:Material;
	// CYAN_CARPET:Material;
	// PURPLE_CARPET:Material;
	// BLUE_CARPET:Material;
	// BROWN_CARPET:Material;
	// GREEN_CARPET:Material;
	// RED_CARPET:Material;
	// BLACK_CARPET:Material;
	// TERRACOTTA:Material;
	// PACKED_ICE:Material;
	// DIRT_PATH:Material;
	// SUNFLOWER:Material;
	// LILAC:Material;
	// ROSE_BUSH:Material;
	// PEONY:Material;
	// TALL_GRASS:Material;
	// LARGE_FERN:Material;
	// WHITE_STAINED_GLASS:Material;
	// ORANGE_STAINED_GLASS:Material;
	// MAGENTA_STAINED_GLASS:Material;
	// LIGHT_BLUE_STAINED_GLASS:Material;
	// YELLOW_STAINED_GLASS:Material;
	// LIME_STAINED_GLASS:Material;
	// PINK_STAINED_GLASS:Material;
	// GRAY_STAINED_GLASS:Material;
	// LIGHT_GRAY_STAINED_GLASS:Material;
	// CYAN_STAINED_GLASS:Material;
	// PURPLE_STAINED_GLASS:Material;
	// BLUE_STAINED_GLASS:Material;
	// BROWN_STAINED_GLASS:Material;
	// GREEN_STAINED_GLASS:Material;
	// RED_STAINED_GLASS:Material;
	// BLACK_STAINED_GLASS:Material;
	// WHITE_STAINED_GLASS_PANE:Material;
	// ORANGE_STAINED_GLASS_PANE:Material;
	// MAGENTA_STAINED_GLASS_PANE:Material;
	// LIGHT_BLUE_STAINED_GLASS_PANE:Material;
	// YELLOW_STAINED_GLASS_PANE:Material;
	// LIME_STAINED_GLASS_PANE:Material;
	// PINK_STAINED_GLASS_PANE:Material;
	// GRAY_STAINED_GLASS_PANE:Material;
	// LIGHT_GRAY_STAINED_GLASS_PANE:Material;
	// CYAN_STAINED_GLASS_PANE:Material;
	// PURPLE_STAINED_GLASS_PANE:Material;
	// BLUE_STAINED_GLASS_PANE:Material;
	// BROWN_STAINED_GLASS_PANE:Material;
	// GREEN_STAINED_GLASS_PANE:Material;
	// RED_STAINED_GLASS_PANE:Material;
	// BLACK_STAINED_GLASS_PANE:Material;
	// PRISMARINE:Material;
	// PRISMARINE_BRICKS:Material;
	// DARK_PRISMARINE:Material;
	// PRISMARINE_STAIRS:Material;
	// PRISMARINE_BRICK_STAIRS:Material;
	// DARK_PRISMARINE_STAIRS:Material;
	// SEA_LANTERN:Material;
	// RED_SANDSTONE:Material;
	// CHISELED_RED_SANDSTONE:Material;
	// CUT_RED_SANDSTONE:Material;
	// RED_SANDSTONE_STAIRS:Material;
	// REPEATING_COMMAND_BLOCK:Material;
	// CHAIN_COMMAND_BLOCK:Material;
	// MAGMA_BLOCK:Material;
	// NETHER_WART_BLOCK:Material;
	// WARPED_WART_BLOCK:Material;
	// RED_NETHER_BRICKS:Material;
	// BONE_BLOCK:Material;
	// STRUCTURE_VOID:Material;
	// SHULKER_BOX:Material;
	// WHITE_SHULKER_BOX:Material;
	// ORANGE_SHULKER_BOX:Material;
	// MAGENTA_SHULKER_BOX:Material;
	// LIGHT_BLUE_SHULKER_BOX:Material;
	// YELLOW_SHULKER_BOX:Material;
	// LIME_SHULKER_BOX:Material;
	// PINK_SHULKER_BOX:Material;
	// GRAY_SHULKER_BOX:Material;
	// LIGHT_GRAY_SHULKER_BOX:Material;
	// CYAN_SHULKER_BOX:Material;
	// PURPLE_SHULKER_BOX:Material;
	// BLUE_SHULKER_BOX:Material;
	// BROWN_SHULKER_BOX:Material;
	// GREEN_SHULKER_BOX:Material;
	// RED_SHULKER_BOX:Material;
	// BLACK_SHULKER_BOX:Material;
	// WHITE_GLAZED_TERRACOTTA:Material;
	// ORANGE_GLAZED_TERRACOTTA:Material;
	// MAGENTA_GLAZED_TERRACOTTA:Material;
	// LIGHT_BLUE_GLAZED_TERRACOTTA:Material;
	// YELLOW_GLAZED_TERRACOTTA:Material;
	// LIME_GLAZED_TERRACOTTA:Material;
	// PINK_GLAZED_TERRACOTTA:Material;
	// GRAY_GLAZED_TERRACOTTA:Material;
	// LIGHT_GRAY_GLAZED_TERRACOTTA:Material;
	// CYAN_GLAZED_TERRACOTTA:Material;
	// PURPLE_GLAZED_TERRACOTTA:Material;
	// BLUE_GLAZED_TERRACOTTA:Material;
	// BROWN_GLAZED_TERRACOTTA:Material;
	// GREEN_GLAZED_TERRACOTTA:Material;
	// RED_GLAZED_TERRACOTTA:Material;
	// BLACK_GLAZED_TERRACOTTA:Material;
	// WHITE_CONCRETE:Material;
	// ORANGE_CONCRETE:Material;
	// MAGENTA_CONCRETE:Material;
	// LIGHT_BLUE_CONCRETE:Material;
	// YELLOW_CONCRETE:Material;
	// LIME_CONCRETE:Material;
	// PINK_CONCRETE:Material;
	// GRAY_CONCRETE:Material;
	// LIGHT_GRAY_CONCRETE:Material;
	// CYAN_CONCRETE:Material;
	// PURPLE_CONCRETE:Material;
	// BLUE_CONCRETE:Material;
	// BROWN_CONCRETE:Material;
	// GREEN_CONCRETE:Material;
	// RED_CONCRETE:Material;
	// BLACK_CONCRETE:Material;
	// WHITE_CONCRETE_POWDER:Material;
	// ORANGE_CONCRETE_POWDER:Material;
	// MAGENTA_CONCRETE_POWDER:Material;
	// LIGHT_BLUE_CONCRETE_POWDER:Material;
	// YELLOW_CONCRETE_POWDER:Material;
	// LIME_CONCRETE_POWDER:Material;
	// PINK_CONCRETE_POWDER:Material;
	// GRAY_CONCRETE_POWDER:Material;
	// LIGHT_GRAY_CONCRETE_POWDER:Material;
	// CYAN_CONCRETE_POWDER:Material;
	// PURPLE_CONCRETE_POWDER:Material;
	// BLUE_CONCRETE_POWDER:Material;
	// BROWN_CONCRETE_POWDER:Material;
	// GREEN_CONCRETE_POWDER:Material;
	// RED_CONCRETE_POWDER:Material;
	// BLACK_CONCRETE_POWDER:Material;
	// TURTLE_EGG:Material;
	// DEAD_TUBE_CORAL_BLOCK:Material;
	// DEAD_BRAIN_CORAL_BLOCK:Material;
	// DEAD_BUBBLE_CORAL_BLOCK:Material;
	// DEAD_FIRE_CORAL_BLOCK:Material;
	// DEAD_HORN_CORAL_BLOCK:Material;
	// TUBE_CORAL_BLOCK:Material;
	// BRAIN_CORAL_BLOCK:Material;
	// BUBBLE_CORAL_BLOCK:Material;
	// FIRE_CORAL_BLOCK:Material;
	// HORN_CORAL_BLOCK:Material;
	// TUBE_CORAL:Material;
	// BRAIN_CORAL:Material;
	// BUBBLE_CORAL:Material;
	// FIRE_CORAL:Material;
	// HORN_CORAL:Material;
	// DEAD_BRAIN_CORAL:Material;
	// DEAD_BUBBLE_CORAL:Material;
	// DEAD_FIRE_CORAL:Material;
	// DEAD_HORN_CORAL:Material;
	// DEAD_TUBE_CORAL:Material;
	// TUBE_CORAL_FAN:Material;
	// BRAIN_CORAL_FAN:Material;
	// BUBBLE_CORAL_FAN:Material;
	// FIRE_CORAL_FAN:Material;
	// HORN_CORAL_FAN:Material;
	// DEAD_TUBE_CORAL_FAN:Material;
	// DEAD_BRAIN_CORAL_FAN:Material;
	// DEAD_BUBBLE_CORAL_FAN:Material;
	// DEAD_FIRE_CORAL_FAN:Material;
	// DEAD_HORN_CORAL_FAN:Material;
	// BLUE_ICE:Material;
	// CONDUIT:Material;
	// POLISHED_GRANITE_STAIRS:Material;
	// SMOOTH_RED_SANDSTONE_STAIRS:Material;
	// MOSSY_STONE_BRICK_STAIRS:Material;
	// POLISHED_DIORITE_STAIRS:Material;
	// MOSSY_COBBLESTONE_STAIRS:Material;
	// END_STONE_BRICK_STAIRS:Material;
	// STONE_STAIRS:Material;
	// SMOOTH_SANDSTONE_STAIRS:Material;
	// SMOOTH_QUARTZ_STAIRS:Material;
	// GRANITE_STAIRS:Material;
	// ANDESITE_STAIRS:Material;
	// RED_NETHER_BRICK_STAIRS:Material;
	// POLISHED_ANDESITE_STAIRS:Material;
	// DIORITE_STAIRS:Material;
	// COBBLED_DEEPSLATE_STAIRS:Material;
	// POLISHED_DEEPSLATE_STAIRS:Material;
	// DEEPSLATE_BRICK_STAIRS:Material;
	// DEEPSLATE_TILE_STAIRS:Material;
	// POLISHED_GRANITE_SLAB:Material;
	// SMOOTH_RED_SANDSTONE_SLAB:Material;
	// MOSSY_STONE_BRICK_SLAB:Material;
	// POLISHED_DIORITE_SLAB:Material;
	// MOSSY_COBBLESTONE_SLAB:Material;
	// END_STONE_BRICK_SLAB:Material;
	// SMOOTH_SANDSTONE_SLAB:Material;
	// SMOOTH_QUARTZ_SLAB:Material;
	// GRANITE_SLAB:Material;
	// ANDESITE_SLAB:Material;
	// RED_NETHER_BRICK_SLAB:Material;
	// POLISHED_ANDESITE_SLAB:Material;
	// DIORITE_SLAB:Material;
	// COBBLED_DEEPSLATE_SLAB:Material;
	// POLISHED_DEEPSLATE_SLAB:Material;
	// DEEPSLATE_BRICK_SLAB:Material;
	// DEEPSLATE_TILE_SLAB:Material;
	// SCAFFOLDING:Material;
	// REDSTONE:Material;
	// REDSTONE_TORCH:Material;
	// REDSTONE_BLOCK:Material;
	// REPEATER:Material;
	// COMPARATOR:Material;
	// PISTON:Material;
	// STICKY_PISTON:Material;
	// SLIME_BLOCK:Material;
	// HONEY_BLOCK:Material;
	// OBSERVER:Material;
	// HOPPER:Material;
	// DISPENSER:Material;
	// DROPPER:Material;
	// LECTERN:Material;
	// TARGET:Material;
	// LEVER:Material;
	// LIGHTNING_ROD:Material;
	// DAYLIGHT_DETECTOR:Material;
	// SCULK_SENSOR:Material;
	// TRIPWIRE_HOOK:Material;
	// TRAPPED_CHEST:Material;
	// TNT:Material;
	// REDSTONE_LAMP:Material;
	// NOTE_BLOCK:Material;
	// STONE_BUTTON:Material;
	// POLISHED_BLACKSTONE_BUTTON:Material;
	// OAK_BUTTON:Material;
	// SPRUCE_BUTTON:Material;
	// BIRCH_BUTTON:Material;
	// JUNGLE_BUTTON:Material;
	// ACACIA_BUTTON:Material;
	// CHERRY_BUTTON:Material;
	// DARK_OAK_BUTTON:Material;
	// MANGROVE_BUTTON:Material;
	// BAMBOO_BUTTON:Material;
	// CRIMSON_BUTTON:Material;
	// WARPED_BUTTON:Material;
	// STONE_PRESSURE_PLATE:Material;
	// POLISHED_BLACKSTONE_PRESSURE_PLATE:Material;
	// LIGHT_WEIGHTED_PRESSURE_PLATE:Material;
	// HEAVY_WEIGHTED_PRESSURE_PLATE:Material;
	// OAK_PRESSURE_PLATE:Material;
	// SPRUCE_PRESSURE_PLATE:Material;
	// BIRCH_PRESSURE_PLATE:Material;
	// JUNGLE_PRESSURE_PLATE:Material;
	// ACACIA_PRESSURE_PLATE:Material;
	// CHERRY_PRESSURE_PLATE:Material;
	// DARK_OAK_PRESSURE_PLATE:Material;
	// MANGROVE_PRESSURE_PLATE:Material;
	// BAMBOO_PRESSURE_PLATE:Material;
	// CRIMSON_PRESSURE_PLATE:Material;
	// WARPED_PRESSURE_PLATE:Material;
	// IRON_DOOR:Material;
	// OAK_DOOR:Material;
	// SPRUCE_DOOR:Material;
	// BIRCH_DOOR:Material;
	// JUNGLE_DOOR:Material;
	// ACACIA_DOOR:Material;
	// CHERRY_DOOR:Material;
	// DARK_OAK_DOOR:Material;
	// MANGROVE_DOOR:Material;
	// BAMBOO_DOOR:Material;
	// CRIMSON_DOOR:Material;
	// WARPED_DOOR:Material;
	// IRON_TRAPDOOR:Material;
	// OAK_TRAPDOOR:Material;
	// SPRUCE_TRAPDOOR:Material;
	// BIRCH_TRAPDOOR:Material;
	// JUNGLE_TRAPDOOR:Material;
	// ACACIA_TRAPDOOR:Material;
	// CHERRY_TRAPDOOR:Material;
	// DARK_OAK_TRAPDOOR:Material;
	// MANGROVE_TRAPDOOR:Material;
	// BAMBOO_TRAPDOOR:Material;
	// CRIMSON_TRAPDOOR:Material;
	// WARPED_TRAPDOOR:Material;
	// OAK_FENCE_GATE:Material;
	// SPRUCE_FENCE_GATE:Material;
	// BIRCH_FENCE_GATE:Material;
	// JUNGLE_FENCE_GATE:Material;
	// ACACIA_FENCE_GATE:Material;
	// CHERRY_FENCE_GATE:Material;
	// DARK_OAK_FENCE_GATE:Material;
	// MANGROVE_FENCE_GATE:Material;
	// BAMBOO_FENCE_GATE:Material;
	// CRIMSON_FENCE_GATE:Material;
	// WARPED_FENCE_GATE:Material;
	// POWERED_RAIL:Material;
	// DETECTOR_RAIL:Material;
	// RAIL:Material;
	// ACTIVATOR_RAIL:Material;
	// SADDLE:Material;
	// MINECART:Material;
	// CHEST_MINECART:Material;
	// FURNACE_MINECART:Material;
	// TNT_MINECART:Material;
	// HOPPER_MINECART:Material;
	// CARROT_ON_A_STICK:Material;
	// WARPED_FUNGUS_ON_A_STICK:Material;
	// ELYTRA:Material;
	// OAK_BOAT:Material;
	// OAK_CHEST_BOAT:Material;
	// SPRUCE_BOAT:Material;
	// SPRUCE_CHEST_BOAT:Material;
	// BIRCH_BOAT:Material;
	// BIRCH_CHEST_BOAT:Material;
	// JUNGLE_BOAT:Material;
	// JUNGLE_CHEST_BOAT:Material;
	// ACACIA_BOAT:Material;
	// ACACIA_CHEST_BOAT:Material;
	// CHERRY_BOAT:Material;
	// CHERRY_CHEST_BOAT:Material;
	// DARK_OAK_BOAT:Material;
	// DARK_OAK_CHEST_BOAT:Material;
	// MANGROVE_BOAT:Material;
	// MANGROVE_CHEST_BOAT:Material;
	// BAMBOO_RAFT:Material;
	// BAMBOO_CHEST_RAFT:Material;
	// STRUCTURE_BLOCK:Material;
	// JIGSAW:Material;
	// TURTLE_HELMET:Material;
	// SCUTE:Material;
	// FLINT_AND_STEEL:Material;
	// APPLE:Material;
	// BOW:Material;
	// ARROW:Material;
	// COAL:Material;
	// CHARCOAL:Material;
	// DIAMOND:Material;
	// EMERALD:Material;
	// LAPIS_LAZULI:Material;
	// QUARTZ:Material;
	// AMETHYST_SHARD:Material;
	// RAW_IRON:Material;
	// IRON_INGOT:Material;
	// RAW_COPPER:Material;
	// COPPER_INGOT:Material;
	// RAW_GOLD:Material;
	// GOLD_INGOT:Material;
	// NETHERITE_INGOT:Material;
	// NETHERITE_SCRAP:Material;
	// WOODEN_SWORD:Material;
	// WOODEN_SHOVEL:Material;
	// WOODEN_PICKAXE:Material;
	// WOODEN_AXE:Material;
	// WOODEN_HOE:Material;
	// STONE_SWORD:Material;
	// STONE_SHOVEL:Material;
	// STONE_PICKAXE:Material;
	// STONE_AXE:Material;
	// STONE_HOE:Material;
	// GOLDEN_SWORD:Material;
	// GOLDEN_SHOVEL:Material;
	// GOLDEN_PICKAXE:Material;
	// GOLDEN_AXE:Material;
	// GOLDEN_HOE:Material;
	// IRON_SWORD:Material;
	// IRON_SHOVEL:Material;
	// IRON_PICKAXE:Material;
	// IRON_AXE:Material;
	// IRON_HOE:Material;
	// DIAMOND_SWORD:Material;
	// DIAMOND_SHOVEL:Material;
	// DIAMOND_PICKAXE:Material;
	// DIAMOND_AXE:Material;
	// DIAMOND_HOE:Material;
	// NETHERITE_SWORD:Material;
	// NETHERITE_SHOVEL:Material;
	// NETHERITE_PICKAXE:Material;
	// NETHERITE_AXE:Material;
	// NETHERITE_HOE:Material;
	// STICK:Material;
	// BOWL:Material;
	// MUSHROOM_STEW:Material;
	// STRING:Material;
	// FEATHER:Material;
	// GUNPOWDER:Material;
	// WHEAT_SEEDS:Material;
	// WHEAT:Material;
	// BREAD:Material;
	// LEATHER_HELMET:Material;
	// LEATHER_CHESTPLATE:Material;
	// LEATHER_LEGGINGS:Material;
	// LEATHER_BOOTS:Material;
	// CHAINMAIL_HELMET:Material;
	// CHAINMAIL_CHESTPLATE:Material;
	// CHAINMAIL_LEGGINGS:Material;
	// CHAINMAIL_BOOTS:Material;
	// IRON_HELMET:Material;
	// IRON_CHESTPLATE:Material;
	// IRON_LEGGINGS:Material;
	// IRON_BOOTS:Material;
	// DIAMOND_HELMET:Material;
	// DIAMOND_CHESTPLATE:Material;
	// DIAMOND_LEGGINGS:Material;
	// DIAMOND_BOOTS:Material;
	// GOLDEN_HELMET:Material;
	// GOLDEN_CHESTPLATE:Material;
	// GOLDEN_LEGGINGS:Material;
	// GOLDEN_BOOTS:Material;
	// NETHERITE_HELMET:Material;
	// NETHERITE_CHESTPLATE:Material;
	// NETHERITE_LEGGINGS:Material;
	// NETHERITE_BOOTS:Material;
	// FLINT:Material;
	// PORKCHOP:Material;
	// COOKED_PORKCHOP:Material;
	// PAINTING:Material;
	// GOLDEN_APPLE:Material;
	// ENCHANTED_GOLDEN_APPLE:Material;
	// OAK_SIGN:Material;
	// SPRUCE_SIGN:Material;
	// BIRCH_SIGN:Material;
	// JUNGLE_SIGN:Material;
	// ACACIA_SIGN:Material;
	// CHERRY_SIGN:Material;
	// DARK_OAK_SIGN:Material;
	// MANGROVE_SIGN:Material;
	// BAMBOO_SIGN:Material;
	// CRIMSON_SIGN:Material;
	// WARPED_SIGN:Material;
	// OAK_HANGING_SIGN:Material;
	// SPRUCE_HANGING_SIGN:Material;
	// BIRCH_HANGING_SIGN:Material;
	// JUNGLE_HANGING_SIGN:Material;
	// ACACIA_HANGING_SIGN:Material;
	// CHERRY_HANGING_SIGN:Material;
	// DARK_OAK_HANGING_SIGN:Material;
	// MANGROVE_HANGING_SIGN:Material;
	// BAMBOO_HANGING_SIGN:Material;
	// CRIMSON_HANGING_SIGN:Material;
	// WARPED_HANGING_SIGN:Material;
	// BUCKET:Material;
	// WATER_BUCKET:Material;
	// LAVA_BUCKET:Material;
	// POWDER_SNOW_BUCKET:Material;
	// SNOWBALL:Material;
	// LEATHER:Material;
	// MILK_BUCKET:Material;
	// PUFFERFISH_BUCKET:Material;
	// SALMON_BUCKET:Material;
	// COD_BUCKET:Material;
	// TROPICAL_FISH_BUCKET:Material;
	// AXOLOTL_BUCKET:Material;
	// TADPOLE_BUCKET:Material;
	// BRICK:Material;
	// CLAY_BALL:Material;
	// DRIED_KELP_BLOCK:Material;
	// PAPER:Material;
	// BOOK:Material;
	// SLIME_BALL:Material;
	// EGG:Material;
	// COMPASS:Material;
	// RECOVERY_COMPASS:Material;
	// BUNDLE:Material;
	// FISHING_ROD:Material;
	// CLOCK:Material;
	// SPYGLASS:Material;
	// GLOWSTONE_DUST:Material;
	// COD:Material;
	// SALMON:Material;
	// TROPICAL_FISH:Material;
	// PUFFERFISH:Material;
	// COOKED_COD:Material;
	// COOKED_SALMON:Material;
	// INK_SAC:Material;
	// GLOW_INK_SAC:Material;
	// COCOA_BEANS:Material;
	// WHITE_DYE:Material;
	// ORANGE_DYE:Material;
	// MAGENTA_DYE:Material;
	// LIGHT_BLUE_DYE:Material;
	// YELLOW_DYE:Material;
	// LIME_DYE:Material;
	// PINK_DYE:Material;
	// GRAY_DYE:Material;
	// LIGHT_GRAY_DYE:Material;
	// CYAN_DYE:Material;
	// PURPLE_DYE:Material;
	// BLUE_DYE:Material;
	// BROWN_DYE:Material;
	// GREEN_DYE:Material;
	// RED_DYE:Material;
	// BLACK_DYE:Material;
	// BONE_MEAL:Material;
	// BONE:Material;
	// SUGAR:Material;
	// CAKE:Material;
	// WHITE_BED:Material;
	// ORANGE_BED:Material;
	// MAGENTA_BED:Material;
	// LIGHT_BLUE_BED:Material;
	// YELLOW_BED:Material;
	// LIME_BED:Material;
	// PINK_BED:Material;
	// GRAY_BED:Material;
	// LIGHT_GRAY_BED:Material;
	// CYAN_BED:Material;
	// PURPLE_BED:Material;
	// BLUE_BED:Material;
	// BROWN_BED:Material;
	// GREEN_BED:Material;
	// RED_BED:Material;
	// BLACK_BED:Material;
	// COOKIE:Material;
	// FILLED_MAP:Material;
	// SHEARS:Material;
	// MELON_SLICE:Material;
	// DRIED_KELP:Material;
	// PUMPKIN_SEEDS:Material;
	// MELON_SEEDS:Material;
	// BEEF:Material;
	// COOKED_BEEF:Material;
	// CHICKEN:Material;
	// COOKED_CHICKEN:Material;
	// ROTTEN_FLESH:Material;
	// ENDER_PEARL:Material;
	// BLAZE_ROD:Material;
	// GHAST_TEAR:Material;
	// GOLD_NUGGET:Material;
	// NETHER_WART:Material;
	// POTION:Material;
	// GLASS_BOTTLE:Material;
	// SPIDER_EYE:Material;
	// FERMENTED_SPIDER_EYE:Material;
	// BLAZE_POWDER:Material;
	// MAGMA_CREAM:Material;
	// BREWING_STAND:Material;
	// CAULDRON:Material;
	// ENDER_EYE:Material;
	// GLISTERING_MELON_SLICE:Material;
	// ALLAY_SPAWN_EGG:Material;
	// AXOLOTL_SPAWN_EGG:Material;
	// BAT_SPAWN_EGG:Material;
	// BEE_SPAWN_EGG:Material;
	// BLAZE_SPAWN_EGG:Material;
	// CAT_SPAWN_EGG:Material;
	// CAMEL_SPAWN_EGG:Material;
	// CAVE_SPIDER_SPAWN_EGG:Material;
	// CHICKEN_SPAWN_EGG:Material;
	// COD_SPAWN_EGG:Material;
	// COW_SPAWN_EGG:Material;
	// CREEPER_SPAWN_EGG:Material;
	// DOLPHIN_SPAWN_EGG:Material;
	// DONKEY_SPAWN_EGG:Material;
	// DROWNED_SPAWN_EGG:Material;
	// ELDER_GUARDIAN_SPAWN_EGG:Material;
	// ENDER_DRAGON_SPAWN_EGG:Material;
	// ENDERMAN_SPAWN_EGG:Material;
	// ENDERMITE_SPAWN_EGG:Material;
	// EVOKER_SPAWN_EGG:Material;
	// FOX_SPAWN_EGG:Material;
	// FROG_SPAWN_EGG:Material;
	// GHAST_SPAWN_EGG:Material;
	// GLOW_SQUID_SPAWN_EGG:Material;
	// GOAT_SPAWN_EGG:Material;
	// GUARDIAN_SPAWN_EGG:Material;
	// HOGLIN_SPAWN_EGG:Material;
	// HORSE_SPAWN_EGG:Material;
	// HUSK_SPAWN_EGG:Material;
	// IRON_GOLEM_SPAWN_EGG:Material;
	// LLAMA_SPAWN_EGG:Material;
	// MAGMA_CUBE_SPAWN_EGG:Material;
	// MOOSHROOM_SPAWN_EGG:Material;
	// MULE_SPAWN_EGG:Material;
	// OCELOT_SPAWN_EGG:Material;
	// PANDA_SPAWN_EGG:Material;
	// PARROT_SPAWN_EGG:Material;
	// PHANTOM_SPAWN_EGG:Material;
	// PIG_SPAWN_EGG:Material;
	// PIGLIN_SPAWN_EGG:Material;
	// PIGLIN_BRUTE_SPAWN_EGG:Material;
	// PILLAGER_SPAWN_EGG:Material;
	// POLAR_BEAR_SPAWN_EGG:Material;
	// PUFFERFISH_SPAWN_EGG:Material;
	// RABBIT_SPAWN_EGG:Material;
	// RAVAGER_SPAWN_EGG:Material;
	// SALMON_SPAWN_EGG:Material;
	// SHEEP_SPAWN_EGG:Material;
	// SHULKER_SPAWN_EGG:Material;
	// SILVERFISH_SPAWN_EGG:Material;
	// SKELETON_SPAWN_EGG:Material;
	// SKELETON_HORSE_SPAWN_EGG:Material;
	// SLIME_SPAWN_EGG:Material;
	// SNIFFER_SPAWN_EGG:Material;
	// SNOW_GOLEM_SPAWN_EGG:Material;
	// SPIDER_SPAWN_EGG:Material;
	// SQUID_SPAWN_EGG:Material;
	// STRAY_SPAWN_EGG:Material;
	// STRIDER_SPAWN_EGG:Material;
	// TADPOLE_SPAWN_EGG:Material;
	// TRADER_LLAMA_SPAWN_EGG:Material;
	// TROPICAL_FISH_SPAWN_EGG:Material;
	// TURTLE_SPAWN_EGG:Material;
	// VEX_SPAWN_EGG:Material;
	// VILLAGER_SPAWN_EGG:Material;
	// VINDICATOR_SPAWN_EGG:Material;
	// WANDERING_TRADER_SPAWN_EGG:Material;
	// WARDEN_SPAWN_EGG:Material;
	// WITCH_SPAWN_EGG:Material;
	// WITHER_SPAWN_EGG:Material;
	// WITHER_SKELETON_SPAWN_EGG:Material;
	// WOLF_SPAWN_EGG:Material;
	// ZOGLIN_SPAWN_EGG:Material;
	// ZOMBIE_SPAWN_EGG:Material;
	// ZOMBIE_HORSE_SPAWN_EGG:Material;
	// ZOMBIE_VILLAGER_SPAWN_EGG:Material;
	// ZOMBIFIED_PIGLIN_SPAWN_EGG:Material;
	// EXPERIENCE_BOTTLE:Material;
	// FIRE_CHARGE:Material;
	// WRITABLE_BOOK:Material;
	// WRITTEN_BOOK:Material;
	// ITEM_FRAME:Material;
	// GLOW_ITEM_FRAME:Material;
	// FLOWER_POT:Material;
	// CARROT:Material;
	// POTATO:Material;
	// BAKED_POTATO:Material;
	// POISONOUS_POTATO:Material;
	// MAP:Material;
	// GOLDEN_CARROT:Material;
	// SKELETON_SKULL:Material;
	// WITHER_SKELETON_SKULL:Material;
	// PLAYER_HEAD:Material;
	// ZOMBIE_HEAD:Material;
	// CREEPER_HEAD:Material;
	// DRAGON_HEAD:Material;
	// PIGLIN_HEAD:Material;
	// NETHER_STAR:Material;
	// PUMPKIN_PIE:Material;
	// FIREWORK_ROCKET:Material;
	// FIREWORK_STAR:Material;
	// ENCHANTED_BOOK:Material;
	// NETHER_BRICK:Material;
	// PRISMARINE_SHARD:Material;
	// PRISMARINE_CRYSTALS:Material;
	// RABBIT:Material;
	// COOKED_RABBIT:Material;
	// RABBIT_STEW:Material;
	// RABBIT_FOOT:Material;
	// RABBIT_HIDE:Material;
	// ARMOR_STAND:Material;
	// IRON_HORSE_ARMOR:Material;
	// GOLDEN_HORSE_ARMOR:Material;
	// DIAMOND_HORSE_ARMOR:Material;
	// LEATHER_HORSE_ARMOR:Material;
	// LEAD:Material;
	// NAME_TAG:Material;
	// COMMAND_BLOCK_MINECART:Material;
	// MUTTON:Material;
	// COOKED_MUTTON:Material;
	// WHITE_BANNER:Material;
	// ORANGE_BANNER:Material;
	// MAGENTA_BANNER:Material;
	// LIGHT_BLUE_BANNER:Material;
	// YELLOW_BANNER:Material;
	// LIME_BANNER:Material;
	// PINK_BANNER:Material;
	// GRAY_BANNER:Material;
	// LIGHT_GRAY_BANNER:Material;
	// CYAN_BANNER:Material;
	// PURPLE_BANNER:Material;
	// BLUE_BANNER:Material;
	// BROWN_BANNER:Material;
	// GREEN_BANNER:Material;
	// RED_BANNER:Material;
	// BLACK_BANNER:Material;
	// END_CRYSTAL:Material;
	// CHORUS_FRUIT:Material;
	// POPPED_CHORUS_FRUIT:Material;
	// TORCHFLOWER_SEEDS:Material;
	// BEETROOT:Material;
	// BEETROOT_SEEDS:Material;
	// BEETROOT_SOUP:Material;
	// DRAGON_BREATH:Material;
	// SPLASH_POTION:Material;
	// SPECTRAL_ARROW:Material;
	// TIPPED_ARROW:Material;
	// LINGERING_POTION:Material;
	// SHIELD:Material;
	// TOTEM_OF_UNDYING:Material;
	// SHULKER_SHELL:Material;
	// IRON_NUGGET:Material;
	// KNOWLEDGE_BOOK:Material;
	// DEBUG_STICK:Material;
	// MUSIC_DISC_13:Material;
	// MUSIC_DISC_CAT:Material;
	// MUSIC_DISC_BLOCKS:Material;
	// MUSIC_DISC_CHIRP:Material;
	// MUSIC_DISC_FAR:Material;
	// MUSIC_DISC_MALL:Material;
	// MUSIC_DISC_MELLOHI:Material;
	// MUSIC_DISC_STAL:Material;
	// MUSIC_DISC_STRAD:Material;
	// MUSIC_DISC_WARD:Material;
	// MUSIC_DISC_11:Material;
	// MUSIC_DISC_WAIT:Material;
	// MUSIC_DISC_OTHERSIDE:Material;
	// MUSIC_DISC_5:Material;
	// MUSIC_DISC_PIGSTEP:Material;
	// DISC_FRAGMENT_5:Material;
	// TRIDENT:Material;
	// PHANTOM_MEMBRANE:Material;
	// NAUTILUS_SHELL:Material;
	// HEART_OF_THE_SEA:Material;
	// CROSSBOW:Material;
	// SUSPICIOUS_STEW:Material;
	// LOOM:Material;
	// FLOWER_BANNER_PATTERN:Material;
	// CREEPER_BANNER_PATTERN:Material;
	// SKULL_BANNER_PATTERN:Material;
	// MOJANG_BANNER_PATTERN:Material;
	// GLOBE_BANNER_PATTERN:Material;
	// PIGLIN_BANNER_PATTERN:Material;
	// GOAT_HORN:Material;
	// COMPOSTER:Material;
	// BARREL:Material;
	// SMOKER:Material;
	// BLAST_FURNACE:Material;
	// CARTOGRAPHY_TABLE:Material;
	// FLETCHING_TABLE:Material;
	// GRINDSTONE:Material;
	// SMITHING_TABLE:Material;
	// STONECUTTER:Material;
	// BELL:Material;
	// LANTERN:Material;
	// SOUL_LANTERN:Material;
	// SWEET_BERRIES:Material;
	// GLOW_BERRIES:Material;
	// CAMPFIRE:Material;
	// SOUL_CAMPFIRE:Material;
	// SHROOMLIGHT:Material;
	// HONEYCOMB:Material;
	// BEE_NEST:Material;
	// BEEHIVE:Material;
	// HONEY_BOTTLE:Material;
	// HONEYCOMB_BLOCK:Material;
	// LODESTONE:Material;
	// CRYING_OBSIDIAN:Material;
	// BLACKSTONE:Material;
	// BLACKSTONE_SLAB:Material;
	// BLACKSTONE_STAIRS:Material;
	// GILDED_BLACKSTONE:Material;
	// POLISHED_BLACKSTONE:Material;
	// POLISHED_BLACKSTONE_SLAB:Material;
	// POLISHED_BLACKSTONE_STAIRS:Material;
	// CHISELED_POLISHED_BLACKSTONE:Material;
	// POLISHED_BLACKSTONE_BRICKS:Material;
	// POLISHED_BLACKSTONE_BRICK_SLAB:Material;
	// POLISHED_BLACKSTONE_BRICK_STAIRS:Material;
	// CRACKED_POLISHED_BLACKSTONE_BRICKS:Material;
	// RESPAWN_ANCHOR:Material;
	// CANDLE:Material;
	// WHITE_CANDLE:Material;
	// ORANGE_CANDLE:Material;
	// MAGENTA_CANDLE:Material;
	// LIGHT_BLUE_CANDLE:Material;
	// YELLOW_CANDLE:Material;
	// LIME_CANDLE:Material;
	// PINK_CANDLE:Material;
	// GRAY_CANDLE:Material;
	// LIGHT_GRAY_CANDLE:Material;
	// CYAN_CANDLE:Material;
	// PURPLE_CANDLE:Material;
	// BLUE_CANDLE:Material;
	// BROWN_CANDLE:Material;
	// GREEN_CANDLE:Material;
	// RED_CANDLE:Material;
	// BLACK_CANDLE:Material;
	// SMALL_AMETHYST_BUD:Material;
	// MEDIUM_AMETHYST_BUD:Material;
	// LARGE_AMETHYST_BUD:Material;
	// AMETHYST_CLUSTER:Material;
	// POINTED_DRIPSTONE:Material;
	// OCHRE_FROGLIGHT:Material;
	// VERDANT_FROGLIGHT:Material;
	// PEARLESCENT_FROGLIGHT:Material;
	// FROGSPAWN:Material;
	// ECHO_SHARD:Material;
	// BRUSH:Material;
	// NETHERITE_UPGRADE_SMITHING_TEMPLATE:Material;
	// SENTRY_ARMOR_TRIM_SMITHING_TEMPLATE:Material;
	// DUNE_ARMOR_TRIM_SMITHING_TEMPLATE:Material;
	// COAST_ARMOR_TRIM_SMITHING_TEMPLATE:Material;
	// WILD_ARMOR_TRIM_SMITHING_TEMPLATE:Material;
	// WARD_ARMOR_TRIM_SMITHING_TEMPLATE:Material;
	// EYE_ARMOR_TRIM_SMITHING_TEMPLATE:Material;
	// VEX_ARMOR_TRIM_SMITHING_TEMPLATE:Material;
	// TIDE_ARMOR_TRIM_SMITHING_TEMPLATE:Material;
	// SNOUT_ARMOR_TRIM_SMITHING_TEMPLATE:Material;
	// RIB_ARMOR_TRIM_SMITHING_TEMPLATE:Material;
	// SPIRE_ARMOR_TRIM_SMITHING_TEMPLATE:Material;
	// POTTERY_SHARD_ARCHER:Material;
	// POTTERY_SHARD_PRIZE:Material;
	// POTTERY_SHARD_ARMS_UP:Material;
	// POTTERY_SHARD_SKULL:Material;
	// WATER:Material;
	// LAVA:Material;
	// TALL_SEAGRASS:Material;
	// PISTON_HEAD:Material;
	// MOVING_PISTON:Material;
	// WALL_TORCH:Material;
	// FIRE:Material;
	// SOUL_FIRE:Material;
	// REDSTONE_WIRE:Material;
	// OAK_WALL_SIGN:Material;
	// SPRUCE_WALL_SIGN:Material;
	// BIRCH_WALL_SIGN:Material;
	// ACACIA_WALL_SIGN:Material;
	// CHERRY_WALL_SIGN:Material;
	// JUNGLE_WALL_SIGN:Material;
	// DARK_OAK_WALL_SIGN:Material;
	// MANGROVE_WALL_SIGN:Material;
	// BAMBOO_WALL_SIGN:Material;
	// OAK_WALL_HANGING_SIGN:Material;
	// SPRUCE_WALL_HANGING_SIGN:Material;
	// BIRCH_WALL_HANGING_SIGN:Material;
	// ACACIA_WALL_HANGING_SIGN:Material;
	// CHERRY_WALL_HANGING_SIGN:Material;
	// JUNGLE_WALL_HANGING_SIGN:Material;
	// DARK_OAK_WALL_HANGING_SIGN:Material;
	// MANGROVE_WALL_HANGING_SIGN:Material;
	// CRIMSON_WALL_HANGING_SIGN:Material;
	// WARPED_WALL_HANGING_SIGN:Material;
	// BAMBOO_WALL_HANGING_SIGN:Material;
	// REDSTONE_WALL_TORCH:Material;
	// SOUL_WALL_TORCH:Material;
	// NETHER_PORTAL:Material;
	// ATTACHED_PUMPKIN_STEM:Material;
	// ATTACHED_MELON_STEM:Material;
	// PUMPKIN_STEM:Material;
	// MELON_STEM:Material;
	// WATER_CAULDRON:Material;
	// LAVA_CAULDRON:Material;
	// POWDER_SNOW_CAULDRON:Material;
	// END_PORTAL:Material;
	// COCOA:Material;
	// TRIPWIRE:Material;
	// POTTED_TORCHFLOWER:Material;
	// POTTED_OAK_SAPLING:Material;
	// POTTED_SPRUCE_SAPLING:Material;
	// POTTED_BIRCH_SAPLING:Material;
	// POTTED_JUNGLE_SAPLING:Material;
	// POTTED_ACACIA_SAPLING:Material;
	// POTTED_CHERRY_SAPLING:Material;
	// POTTED_DARK_OAK_SAPLING:Material;
	// POTTED_MANGROVE_PROPAGULE:Material;
	// POTTED_FERN:Material;
	// POTTED_DANDELION:Material;
	// POTTED_POPPY:Material;
	// POTTED_BLUE_ORCHID:Material;
	// POTTED_ALLIUM:Material;
	// POTTED_AZURE_BLUET:Material;
	// POTTED_RED_TULIP:Material;
	// POTTED_ORANGE_TULIP:Material;
	// POTTED_WHITE_TULIP:Material;
	// POTTED_PINK_TULIP:Material;
	// POTTED_OXEYE_DAISY:Material;
	// POTTED_CORNFLOWER:Material;
	// POTTED_LILY_OF_THE_VALLEY:Material;
	// POTTED_WITHER_ROSE:Material;
	// POTTED_RED_MUSHROOM:Material;
	// POTTED_BROWN_MUSHROOM:Material;
	// POTTED_DEAD_BUSH:Material;
	// POTTED_CACTUS:Material;
	// CARROTS:Material;
	// POTATOES:Material;
	// SKELETON_WALL_SKULL:Material;
	// WITHER_SKELETON_WALL_SKULL:Material;
	// ZOMBIE_WALL_HEAD:Material;
	// PLAYER_WALL_HEAD:Material;
	// CREEPER_WALL_HEAD:Material;
	// DRAGON_WALL_HEAD:Material;
	// PIGLIN_WALL_HEAD:Material;
	// WHITE_WALL_BANNER:Material;
	// ORANGE_WALL_BANNER:Material;
	// MAGENTA_WALL_BANNER:Material;
	// LIGHT_BLUE_WALL_BANNER:Material;
	// YELLOW_WALL_BANNER:Material;
	// LIME_WALL_BANNER:Material;
	// PINK_WALL_BANNER:Material;
	// GRAY_WALL_BANNER:Material;
	// LIGHT_GRAY_WALL_BANNER:Material;
	// CYAN_WALL_BANNER:Material;
	// PURPLE_WALL_BANNER:Material;
	// BLUE_WALL_BANNER:Material;
	// BROWN_WALL_BANNER:Material;
	// GREEN_WALL_BANNER:Material;
	// RED_WALL_BANNER:Material;
	// BLACK_WALL_BANNER:Material;
	// TORCHFLOWER_CROP:Material;
	// BEETROOTS:Material;
	// END_GATEWAY:Material;
	// FROSTED_ICE:Material;
	// KELP_PLANT:Material;
	// DEAD_TUBE_CORAL_WALL_FAN:Material;
	// DEAD_BRAIN_CORAL_WALL_FAN:Material;
	// DEAD_BUBBLE_CORAL_WALL_FAN:Material;
	// DEAD_FIRE_CORAL_WALL_FAN:Material;
	// DEAD_HORN_CORAL_WALL_FAN:Material;
	// TUBE_CORAL_WALL_FAN:Material;
	// BRAIN_CORAL_WALL_FAN:Material;
	// BUBBLE_CORAL_WALL_FAN:Material;
	// FIRE_CORAL_WALL_FAN:Material;
	// HORN_CORAL_WALL_FAN:Material;
	// BAMBOO_SAPLING:Material;
	// POTTED_BAMBOO:Material;
	// VOID_AIR:Material;
	// CAVE_AIR:Material;
	// BUBBLE_COLUMN:Material;
	// SWEET_BERRY_BUSH:Material;
	// WEEPING_VINES_PLANT:Material;
	// TWISTING_VINES_PLANT:Material;
	// CRIMSON_WALL_SIGN:Material;
	// WARPED_WALL_SIGN:Material;
	// POTTED_CRIMSON_FUNGUS:Material;
	// POTTED_WARPED_FUNGUS:Material;
	// POTTED_CRIMSON_ROOTS:Material;
	// POTTED_WARPED_ROOTS:Material;
	// CANDLE_CAKE:Material;
	// WHITE_CANDLE_CAKE:Material;
	// ORANGE_CANDLE_CAKE:Material;
	// MAGENTA_CANDLE_CAKE:Material;
	// LIGHT_BLUE_CANDLE_CAKE:Material;
	// YELLOW_CANDLE_CAKE:Material;
	// LIME_CANDLE_CAKE:Material;
	// PINK_CANDLE_CAKE:Material;
	// GRAY_CANDLE_CAKE:Material;
	// LIGHT_GRAY_CANDLE_CAKE:Material;
	// CYAN_CANDLE_CAKE:Material;
	// PURPLE_CANDLE_CAKE:Material;
	// BLUE_CANDLE_CAKE:Material;
	// BROWN_CANDLE_CAKE:Material;
	// GREEN_CANDLE_CAKE:Material;
	// RED_CANDLE_CAKE:Material;
	// BLACK_CANDLE_CAKE:Material;
	// POWDER_SNOW:Material;
	// CAVE_VINES:Material;
	// CAVE_VINES_PLANT:Material;
	// BIG_DRIPLEAF_STEM:Material;
	// POTTED_AZALEA_BUSH:Material;
	// POTTED_FLOWERING_AZALEA_BUSH:Material;
	// LEGACY_AIR:Material;
	// LEGACY_STONE:Material;
	// LEGACY_GRASS:Material;
	// LEGACY_DIRT:Material;
	// LEGACY_COBBLESTONE:Material;
	// LEGACY_WOOD:Material;
	// LEGACY_SAPLING:Material;
	// LEGACY_BEDROCK:Material;
	// LEGACY_WATER:Material;
	// LEGACY_STATIONARY_WATER:Material;
	// LEGACY_LAVA:Material;
	// LEGACY_STATIONARY_LAVA:Material;
	// LEGACY_SAND:Material;
	// LEGACY_GRAVEL:Material;
	// LEGACY_GOLD_ORE:Material;
	// LEGACY_IRON_ORE:Material;
	// LEGACY_COAL_ORE:Material;
	// LEGACY_LOG:Material;
	// LEGACY_LEAVES:Material;
	// LEGACY_SPONGE:Material;
	// LEGACY_GLASS:Material;
	// LEGACY_LAPIS_ORE:Material;
	// LEGACY_LAPIS_BLOCK:Material;
	// LEGACY_DISPENSER:Material;
	// LEGACY_SANDSTONE:Material;
	// LEGACY_NOTE_BLOCK:Material;
	// LEGACY_BED_BLOCK:Material;
	// LEGACY_POWERED_RAIL:Material;
	// LEGACY_DETECTOR_RAIL:Material;
	// LEGACY_PISTON_STICKY_BASE:Material;
	// LEGACY_WEB:Material;
	// LEGACY_LONG_GRASS:Material;
	// LEGACY_DEAD_BUSH:Material;
	// LEGACY_PISTON_BASE:Material;
	// LEGACY_PISTON_EXTENSION:Material;
	// LEGACY_WOOL:Material;
	// LEGACY_PISTON_MOVING_PIECE:Material;
	// LEGACY_YELLOW_FLOWER:Material;
	// LEGACY_RED_ROSE:Material;
	// LEGACY_BROWN_MUSHROOM:Material;
	// LEGACY_RED_MUSHROOM:Material;
	// LEGACY_GOLD_BLOCK:Material;
	// LEGACY_IRON_BLOCK:Material;
	// LEGACY_DOUBLE_STEP:Material;
	// LEGACY_STEP:Material;
	// LEGACY_BRICK:Material;
	// LEGACY_TNT:Material;
	// LEGACY_BOOKSHELF:Material;
	// LEGACY_MOSSY_COBBLESTONE:Material;
	// LEGACY_OBSIDIAN:Material;
	// LEGACY_TORCH:Material;
	// LEGACY_FIRE:Material;
	// LEGACY_MOB_SPAWNER:Material;
	// LEGACY_WOOD_STAIRS:Material;
	// LEGACY_CHEST:Material;
	// LEGACY_REDSTONE_WIRE:Material;
	// LEGACY_DIAMOND_ORE:Material;
	// LEGACY_DIAMOND_BLOCK:Material;
	// LEGACY_WORKBENCH:Material;
	// LEGACY_CROPS:Material;
	// LEGACY_SOIL:Material;
	// LEGACY_FURNACE:Material;
	// LEGACY_BURNING_FURNACE:Material;
	// LEGACY_SIGN_POST:Material;
	// LEGACY_WOODEN_DOOR:Material;
	// LEGACY_LADDER:Material;
	// LEGACY_RAILS:Material;
	// LEGACY_COBBLESTONE_STAIRS:Material;
	// LEGACY_WALL_SIGN:Material;
	// LEGACY_LEVER:Material;
	// LEGACY_STONE_PLATE:Material;
	// LEGACY_IRON_DOOR_BLOCK:Material;
	// LEGACY_WOOD_PLATE:Material;
	// LEGACY_REDSTONE_ORE:Material;
	// LEGACY_GLOWING_REDSTONE_ORE:Material;
	// LEGACY_REDSTONE_TORCH_OFF:Material;
	// LEGACY_REDSTONE_TORCH_ON:Material;
	// LEGACY_STONE_BUTTON:Material;
	// LEGACY_SNOW:Material;
	// LEGACY_ICE:Material;
	// LEGACY_SNOW_BLOCK:Material;
	// LEGACY_CACTUS:Material;
	// LEGACY_CLAY:Material;
	// LEGACY_SUGAR_CANE_BLOCK:Material;
	// LEGACY_JUKEBOX:Material;
	// LEGACY_FENCE:Material;
	// LEGACY_PUMPKIN:Material;
	// LEGACY_NETHERRACK:Material;
	// LEGACY_SOUL_SAND:Material;
	// LEGACY_GLOWSTONE:Material;
	// LEGACY_PORTAL:Material;
	// LEGACY_JACK_O_LANTERN:Material;
	// LEGACY_CAKE_BLOCK:Material;
	// LEGACY_DIODE_BLOCK_OFF:Material;
	// LEGACY_DIODE_BLOCK_ON:Material;
	// LEGACY_STAINED_GLASS:Material;
	// LEGACY_TRAP_DOOR:Material;
	// LEGACY_MONSTER_EGGS:Material;
	// LEGACY_SMOOTH_BRICK:Material;
	// LEGACY_HUGE_MUSHROOM_1:Material;
	// LEGACY_HUGE_MUSHROOM_2:Material;
	// LEGACY_IRON_FENCE:Material;
	// LEGACY_THIN_GLASS:Material;
	// LEGACY_MELON_BLOCK:Material;
	// LEGACY_PUMPKIN_STEM:Material;
	// LEGACY_MELON_STEM:Material;
	// LEGACY_VINE:Material;
	// LEGACY_FENCE_GATE:Material;
	// LEGACY_BRICK_STAIRS:Material;
	// LEGACY_SMOOTH_STAIRS:Material;
	// LEGACY_MYCEL:Material;
	// LEGACY_WATER_LILY:Material;
	// LEGACY_NETHER_BRICK:Material;
	// LEGACY_NETHER_FENCE:Material;
	// LEGACY_NETHER_BRICK_STAIRS:Material;
	// LEGACY_NETHER_WARTS:Material;
	// LEGACY_ENCHANTMENT_TABLE:Material;
	// LEGACY_BREWING_STAND:Material;
	// LEGACY_CAULDRON:Material;
	// LEGACY_ENDER_PORTAL:Material;
	// LEGACY_ENDER_PORTAL_FRAME:Material;
	// LEGACY_ENDER_STONE:Material;
	// LEGACY_DRAGON_EGG:Material;
	// LEGACY_REDSTONE_LAMP_OFF:Material;
	// LEGACY_REDSTONE_LAMP_ON:Material;
	// LEGACY_WOOD_DOUBLE_STEP:Material;
	// LEGACY_WOOD_STEP:Material;
	// LEGACY_COCOA:Material;
	// LEGACY_SANDSTONE_STAIRS:Material;
	// LEGACY_EMERALD_ORE:Material;
	// LEGACY_ENDER_CHEST:Material;
	// LEGACY_TRIPWIRE_HOOK:Material;
	// LEGACY_TRIPWIRE:Material;
	// LEGACY_EMERALD_BLOCK:Material;
	// LEGACY_SPRUCE_WOOD_STAIRS:Material;
	// LEGACY_BIRCH_WOOD_STAIRS:Material;
	// LEGACY_JUNGLE_WOOD_STAIRS:Material;
	// LEGACY_COMMAND:Material;
	// LEGACY_BEACON:Material;
	// LEGACY_COBBLE_WALL:Material;
	// LEGACY_FLOWER_POT:Material;
	// LEGACY_CARROT:Material;
	// LEGACY_POTATO:Material;
	// LEGACY_WOOD_BUTTON:Material;
	// LEGACY_SKULL:Material;
	// LEGACY_ANVIL:Material;
	// LEGACY_TRAPPED_CHEST:Material;
	// LEGACY_GOLD_PLATE:Material;
	// LEGACY_IRON_PLATE:Material;
	// LEGACY_REDSTONE_COMPARATOR_OFF:Material;
	// LEGACY_REDSTONE_COMPARATOR_ON:Material;
	// LEGACY_DAYLIGHT_DETECTOR:Material;
	// LEGACY_REDSTONE_BLOCK:Material;
	// LEGACY_QUARTZ_ORE:Material;
	// LEGACY_HOPPER:Material;
	// LEGACY_QUARTZ_BLOCK:Material;
	// LEGACY_QUARTZ_STAIRS:Material;
	// LEGACY_ACTIVATOR_RAIL:Material;
	// LEGACY_DROPPER:Material;
	// LEGACY_STAINED_CLAY:Material;
	// LEGACY_STAINED_GLASS_PANE:Material;
	// LEGACY_LEAVES_2:Material;
	// LEGACY_LOG_2:Material;
	// LEGACY_ACACIA_STAIRS:Material;
	// LEGACY_DARK_OAK_STAIRS:Material;
	// LEGACY_SLIME_BLOCK:Material;
	// LEGACY_BARRIER:Material;
	// LEGACY_IRON_TRAPDOOR:Material;
	// LEGACY_PRISMARINE:Material;
	// LEGACY_SEA_LANTERN:Material;
	// LEGACY_HAY_BLOCK:Material;
	// LEGACY_CARPET:Material;
	// LEGACY_HARD_CLAY:Material;
	// LEGACY_COAL_BLOCK:Material;
	// LEGACY_PACKED_ICE:Material;
	// LEGACY_DOUBLE_PLANT:Material;
	// LEGACY_STANDING_BANNER:Material;
	// LEGACY_WALL_BANNER:Material;
	// LEGACY_DAYLIGHT_DETECTOR_INVERTED:Material;
	// LEGACY_RED_SANDSTONE:Material;
	// LEGACY_RED_SANDSTONE_STAIRS:Material;
	// LEGACY_DOUBLE_STONE_SLAB2:Material;
	// LEGACY_STONE_SLAB2:Material;
	// LEGACY_SPRUCE_FENCE_GATE:Material;
	// LEGACY_BIRCH_FENCE_GATE:Material;
	// LEGACY_JUNGLE_FENCE_GATE:Material;
	// LEGACY_DARK_OAK_FENCE_GATE:Material;
	// LEGACY_ACACIA_FENCE_GATE:Material;
	// LEGACY_SPRUCE_FENCE:Material;
	// LEGACY_BIRCH_FENCE:Material;
	// LEGACY_JUNGLE_FENCE:Material;
	// LEGACY_DARK_OAK_FENCE:Material;
	// LEGACY_ACACIA_FENCE:Material;
	// LEGACY_SPRUCE_DOOR:Material;
	// LEGACY_BIRCH_DOOR:Material;
	// LEGACY_JUNGLE_DOOR:Material;
	// LEGACY_ACACIA_DOOR:Material;
	// LEGACY_DARK_OAK_DOOR:Material;
	// LEGACY_END_ROD:Material;
	// LEGACY_CHORUS_PLANT:Material;
	// LEGACY_CHORUS_FLOWER:Material;
	// LEGACY_PURPUR_BLOCK:Material;
	// LEGACY_PURPUR_PILLAR:Material;
	// LEGACY_PURPUR_STAIRS:Material;
	// LEGACY_PURPUR_DOUBLE_SLAB:Material;
	// LEGACY_PURPUR_SLAB:Material;
	// LEGACY_END_BRICKS:Material;
	// LEGACY_BEETROOT_BLOCK:Material;
	// LEGACY_GRASS_PATH:Material;
	// LEGACY_END_GATEWAY:Material;
	// LEGACY_COMMAND_REPEATING:Material;
	// LEGACY_COMMAND_CHAIN:Material;
	// LEGACY_FROSTED_ICE:Material;
	// LEGACY_MAGMA:Material;
	// LEGACY_NETHER_WART_BLOCK:Material;
	// LEGACY_RED_NETHER_BRICK:Material;
	// LEGACY_BONE_BLOCK:Material;
	// LEGACY_STRUCTURE_VOID:Material;
	// LEGACY_OBSERVER:Material;
	// LEGACY_WHITE_SHULKER_BOX:Material;
	// LEGACY_ORANGE_SHULKER_BOX:Material;
	// LEGACY_MAGENTA_SHULKER_BOX:Material;
	// LEGACY_LIGHT_BLUE_SHULKER_BOX:Material;
	// LEGACY_YELLOW_SHULKER_BOX:Material;
	// LEGACY_LIME_SHULKER_BOX:Material;
	// LEGACY_PINK_SHULKER_BOX:Material;
	// LEGACY_GRAY_SHULKER_BOX:Material;
	// LEGACY_SILVER_SHULKER_BOX:Material;
	// LEGACY_CYAN_SHULKER_BOX:Material;
	// LEGACY_PURPLE_SHULKER_BOX:Material;
	// LEGACY_BLUE_SHULKER_BOX:Material;
	// LEGACY_BROWN_SHULKER_BOX:Material;
	// LEGACY_GREEN_SHULKER_BOX:Material;
	// LEGACY_RED_SHULKER_BOX:Material;
	// LEGACY_BLACK_SHULKER_BOX:Material;
	// LEGACY_WHITE_GLAZED_TERRACOTTA:Material;
	// LEGACY_ORANGE_GLAZED_TERRACOTTA:Material;
	// LEGACY_MAGENTA_GLAZED_TERRACOTTA:Material;
	// LEGACY_LIGHT_BLUE_GLAZED_TERRACOTTA:Material;
	// LEGACY_YELLOW_GLAZED_TERRACOTTA:Material;
	// LEGACY_LIME_GLAZED_TERRACOTTA:Material;
	// LEGACY_PINK_GLAZED_TERRACOTTA:Material;
	// LEGACY_GRAY_GLAZED_TERRACOTTA:Material;
	// LEGACY_SILVER_GLAZED_TERRACOTTA:Material;
	// LEGACY_CYAN_GLAZED_TERRACOTTA:Material;
	// LEGACY_PURPLE_GLAZED_TERRACOTTA:Material;
	// LEGACY_BLUE_GLAZED_TERRACOTTA:Material;
	// LEGACY_BROWN_GLAZED_TERRACOTTA:Material;
	// LEGACY_GREEN_GLAZED_TERRACOTTA:Material;
	// LEGACY_RED_GLAZED_TERRACOTTA:Material;
	// LEGACY_BLACK_GLAZED_TERRACOTTA:Material;
	// LEGACY_CONCRETE:Material;
	// LEGACY_CONCRETE_POWDER:Material;
	// LEGACY_STRUCTURE_BLOCK:Material;
	// LEGACY_IRON_SPADE:Material;
	// LEGACY_IRON_PICKAXE:Material;
	// LEGACY_IRON_AXE:Material;
	// LEGACY_FLINT_AND_STEEL:Material;
	// LEGACY_APPLE:Material;
	// LEGACY_BOW:Material;
	// LEGACY_ARROW:Material;
	// LEGACY_COAL:Material;
	// LEGACY_DIAMOND:Material;
	// LEGACY_IRON_INGOT:Material;
	// LEGACY_GOLD_INGOT:Material;
	// LEGACY_IRON_SWORD:Material;
	// LEGACY_WOOD_SWORD:Material;
	// LEGACY_WOOD_SPADE:Material;
	// LEGACY_WOOD_PICKAXE:Material;
	// LEGACY_WOOD_AXE:Material;
	// LEGACY_STONE_SWORD:Material;
	// LEGACY_STONE_SPADE:Material;
	// LEGACY_STONE_PICKAXE:Material;
	// LEGACY_STONE_AXE:Material;
	// LEGACY_DIAMOND_SWORD:Material;
	// LEGACY_DIAMOND_SPADE:Material;
	// LEGACY_DIAMOND_PICKAXE:Material;
	// LEGACY_DIAMOND_AXE:Material;
	// LEGACY_STICK:Material;
	// LEGACY_BOWL:Material;
	// LEGACY_MUSHROOM_SOUP:Material;
	// LEGACY_GOLD_SWORD:Material;
	// LEGACY_GOLD_SPADE:Material;
	// LEGACY_GOLD_PICKAXE:Material;
	// LEGACY_GOLD_AXE:Material;
	// LEGACY_STRING:Material;
	// LEGACY_FEATHER:Material;
	// LEGACY_SULPHUR:Material;
	// LEGACY_WOOD_HOE:Material;
	// LEGACY_STONE_HOE:Material;
	// LEGACY_IRON_HOE:Material;
	// LEGACY_DIAMOND_HOE:Material;
	// LEGACY_GOLD_HOE:Material;
	// LEGACY_SEEDS:Material;
	// LEGACY_WHEAT:Material;
	// LEGACY_BREAD:Material;
	// LEGACY_LEATHER_HELMET:Material;
	// LEGACY_LEATHER_CHESTPLATE:Material;
	// LEGACY_LEATHER_LEGGINGS:Material;
	// LEGACY_LEATHER_BOOTS:Material;
	// LEGACY_CHAINMAIL_HELMET:Material;
	// LEGACY_CHAINMAIL_CHESTPLATE:Material;
	// LEGACY_CHAINMAIL_LEGGINGS:Material;
	// LEGACY_CHAINMAIL_BOOTS:Material;
	// LEGACY_IRON_HELMET:Material;
	// LEGACY_IRON_CHESTPLATE:Material;
	// LEGACY_IRON_LEGGINGS:Material;
	// LEGACY_IRON_BOOTS:Material;
	// LEGACY_DIAMOND_HELMET:Material;
	// LEGACY_DIAMOND_CHESTPLATE:Material;
	// LEGACY_DIAMOND_LEGGINGS:Material;
	// LEGACY_DIAMOND_BOOTS:Material;
	// LEGACY_GOLD_HELMET:Material;
	// LEGACY_GOLD_CHESTPLATE:Material;
	// LEGACY_GOLD_LEGGINGS:Material;
	// LEGACY_GOLD_BOOTS:Material;
	// LEGACY_FLINT:Material;
	// LEGACY_PORK:Material;
	// LEGACY_GRILLED_PORK:Material;
	// LEGACY_PAINTING:Material;
	// LEGACY_GOLDEN_APPLE:Material;
	// LEGACY_SIGN:Material;
	// LEGACY_WOOD_DOOR:Material;
	// LEGACY_BUCKET:Material;
	// LEGACY_WATER_BUCKET:Material;
	// LEGACY_LAVA_BUCKET:Material;
	// LEGACY_MINECART:Material;
	// LEGACY_SADDLE:Material;
	// LEGACY_IRON_DOOR:Material;
	// LEGACY_REDSTONE:Material;
	// LEGACY_SNOW_BALL:Material;
	// LEGACY_BOAT:Material;
	// LEGACY_LEATHER:Material;
	// LEGACY_MILK_BUCKET:Material;
	// LEGACY_CLAY_BRICK:Material;
	// LEGACY_CLAY_BALL:Material;
	// LEGACY_SUGAR_CANE:Material;
	// LEGACY_PAPER:Material;
	// LEGACY_BOOK:Material;
	// LEGACY_SLIME_BALL:Material;
	// LEGACY_STORAGE_MINECART:Material;
	// LEGACY_POWERED_MINECART:Material;
	// LEGACY_EGG:Material;
	// LEGACY_COMPASS:Material;
	// LEGACY_FISHING_ROD:Material;
	// LEGACY_WATCH:Material;
	// LEGACY_GLOWSTONE_DUST:Material;
	// LEGACY_RAW_FISH:Material;
	// LEGACY_COOKED_FISH:Material;
	// LEGACY_INK_SACK:Material;
	// LEGACY_BONE:Material;
	// LEGACY_SUGAR:Material;
	// LEGACY_CAKE:Material;
	// LEGACY_BED:Material;
	// LEGACY_DIODE:Material;
	// LEGACY_COOKIE:Material;
	// LEGACY_MAP:Material;
	// LEGACY_SHEARS:Material;
	// LEGACY_MELON:Material;
	// LEGACY_PUMPKIN_SEEDS:Material;
	// LEGACY_MELON_SEEDS:Material;
	// LEGACY_RAW_BEEF:Material;
	// LEGACY_COOKED_BEEF:Material;
	// LEGACY_RAW_CHICKEN:Material;
	// LEGACY_COOKED_CHICKEN:Material;
	// LEGACY_ROTTEN_FLESH:Material;
	// LEGACY_ENDER_PEARL:Material;
	// LEGACY_BLAZE_ROD:Material;
	// LEGACY_GHAST_TEAR:Material;
	// LEGACY_GOLD_NUGGET:Material;
	// LEGACY_NETHER_STALK:Material;
	// LEGACY_POTION:Material;
	// LEGACY_GLASS_BOTTLE:Material;
	// LEGACY_SPIDER_EYE:Material;
	// LEGACY_FERMENTED_SPIDER_EYE:Material;
	// LEGACY_BLAZE_POWDER:Material;
	// LEGACY_MAGMA_CREAM:Material;
	// LEGACY_BREWING_STAND_ITEM:Material;
	// LEGACY_CAULDRON_ITEM:Material;
	// LEGACY_EYE_OF_ENDER:Material;
	// LEGACY_SPECKLED_MELON:Material;
	// LEGACY_MONSTER_EGG:Material;
	// LEGACY_EXP_BOTTLE:Material;
	// LEGACY_FIREBALL:Material;
	// LEGACY_BOOK_AND_QUILL:Material;
	// LEGACY_WRITTEN_BOOK:Material;
	// LEGACY_EMERALD:Material;
	// LEGACY_ITEM_FRAME:Material;
	// LEGACY_FLOWER_POT_ITEM:Material;
	// LEGACY_CARROT_ITEM:Material;
	// LEGACY_POTATO_ITEM:Material;
	// LEGACY_BAKED_POTATO:Material;
	// LEGACY_POISONOUS_POTATO:Material;
	// LEGACY_EMPTY_MAP:Material;
	// LEGACY_GOLDEN_CARROT:Material;
	// LEGACY_SKULL_ITEM:Material;
	// LEGACY_CARROT_STICK:Material;
	// LEGACY_NETHER_STAR:Material;
	// LEGACY_PUMPKIN_PIE:Material;
	// LEGACY_FIREWORK:Material;
	// LEGACY_FIREWORK_CHARGE:Material;
	// LEGACY_ENCHANTED_BOOK:Material;
	// LEGACY_REDSTONE_COMPARATOR:Material;
	// LEGACY_NETHER_BRICK_ITEM:Material;
	// LEGACY_QUARTZ:Material;
	// LEGACY_EXPLOSIVE_MINECART:Material;
	// LEGACY_HOPPER_MINECART:Material;
	// LEGACY_PRISMARINE_SHARD:Material;
	// LEGACY_PRISMARINE_CRYSTALS:Material;
	// LEGACY_RABBIT:Material;
	// LEGACY_COOKED_RABBIT:Material;
	// LEGACY_RABBIT_STEW:Material;
	// LEGACY_RABBIT_FOOT:Material;
	// LEGACY_RABBIT_HIDE:Material;
	// LEGACY_ARMOR_STAND:Material;
	// LEGACY_IRON_BARDING:Material;
	// LEGACY_GOLD_BARDING:Material;
	// LEGACY_DIAMOND_BARDING:Material;
	// LEGACY_LEASH:Material;
	// LEGACY_NAME_TAG:Material;
	// LEGACY_COMMAND_MINECART:Material;
	// LEGACY_MUTTON:Material;
	// LEGACY_COOKED_MUTTON:Material;
	// LEGACY_BANNER:Material;
	// LEGACY_END_CRYSTAL:Material;
	// LEGACY_SPRUCE_DOOR_ITEM:Material;
	// LEGACY_BIRCH_DOOR_ITEM:Material;
	// LEGACY_JUNGLE_DOOR_ITEM:Material;
	// LEGACY_ACACIA_DOOR_ITEM:Material;
	// LEGACY_DARK_OAK_DOOR_ITEM:Material;
	// LEGACY_CHORUS_FRUIT:Material;
	// LEGACY_CHORUS_FRUIT_POPPED:Material;
	// LEGACY_BEETROOT:Material;
	// LEGACY_BEETROOT_SEEDS:Material;
	// LEGACY_BEETROOT_SOUP:Material;
	// LEGACY_DRAGONS_BREATH:Material;
	// LEGACY_SPLASH_POTION:Material;
	// LEGACY_SPECTRAL_ARROW:Material;
	// LEGACY_TIPPED_ARROW:Material;
	// LEGACY_LINGERING_POTION:Material;
	// LEGACY_SHIELD:Material;
	// LEGACY_ELYTRA:Material;
	// LEGACY_BOAT_SPRUCE:Material;
	// LEGACY_BOAT_BIRCH:Material;
	// LEGACY_BOAT_JUNGLE:Material;
	// LEGACY_BOAT_ACACIA:Material;
	// LEGACY_BOAT_DARK_OAK:Material;
	// LEGACY_TOTEM:Material;
	// LEGACY_SHULKER_SHELL:Material;
	// LEGACY_IRON_NUGGET:Material;
	// LEGACY_KNOWLEDGE_BOOK:Material;
	// LEGACY_GOLD_RECORD:Material;
	// LEGACY_GREEN_RECORD:Material;
	// LEGACY_RECORD_3:Material;
	// LEGACY_RECORD_4:Material;
	// LEGACY_RECORD_5:Material;
	// LEGACY_RECORD_6:Material;
	// LEGACY_RECORD_7:Material;
	// LEGACY_RECORD_8:Material;
	// LEGACY_RECORD_9:Material;
	// LEGACY_RECORD_10:Material;
	// LEGACY_RECORD_11:Material;
	// LEGACY_RECORD_12:Material;

	compareTo<E>( arg0:E ):int;
	createBlockData(  ):any /*org.bukkit.block.data.BlockData*/;
	createBlockData( arg0:Consumer<any /*org.bukkit.block.data.BlockData*/> ):any /*org.bukkit.block.data.BlockData*/;
	createBlockData( arg0:string ):any /*org.bukkit.block.data.BlockData*/;
	describeConstable(  ):java.util.Optional<any /*java.lang.Enum$EnumDesc*/>;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	getBlastResistance(  ):float;
	getBlockTranslationKey(  ):string;
	getCraftingRemainingItem(  ):Material;
	getCreativeCategory(  ):any /*org.bukkit.inventory.CreativeCategory*/;
	getData(  ):java.lang.Class<any /*org.bukkit.material.MaterialData*/>;
	getDeclaringClass<E>(  ):java.lang.Class<E>;
	getDefaultAttributeModifiers( arg0:any /*org.bukkit.inventory.EquipmentSlot*/ ):any /*com.google.common.collect.Multimap*/;
	getEquipmentSlot(  ):any /*org.bukkit.inventory.EquipmentSlot*/;
	getHardness(  ):float;
	getId(  ):int;
	getItemAttributes( arg0:any /*org.bukkit.inventory.EquipmentSlot*/ ):any /*com.google.common.collect.Multimap*/;
	getItemRarity(  ):any /*io.papermc.paper.inventory.ItemRarity*/;
	getItemTranslationKey(  ):string;
	getKey(  ):any /*org.bukkit.NamespacedKey*/;
	getMaxDurability(  ):any /*short*/;
	getMaxStackSize(  ):int;
	getNewData( arg0:any /*byte*/ ):any /*org.bukkit.material.MaterialData*/;
	getSlipperiness(  ):float;
	getTranslationKey(  ):string;
	hasGravity(  ):boolean;
	isAir(  ):boolean;
	isBlock(  ):boolean;
	isBurnable(  ):boolean;
	isCollidable(  ):boolean;
	isEdible(  ):boolean;
	isEmpty(  ):boolean;
	isFlammable(  ):boolean;
	isFuel(  ):boolean;
	isInteractable(  ):boolean;
	isItem(  ):boolean;
	isLegacy(  ):boolean;
	isOccluding(  ):boolean;
	isRecord(  ):boolean;
	isSolid(  ):boolean;
	isTransparent(  ):boolean;
	key(  ):any /*net.kyori.adventure.key.Key*/;
	name(  ):string;
	ordinal(  ):int;
	toString(  ):string;
	translationKey(  ):string;

} // end Material

} // end namespace org.bukkit
declare namespace org.bukkit {

/* enum */class Particle/* extends java.lang.Enum<any>*/ {

	// EXPLOSION_NORMAL:Particle;
	// EXPLOSION_LARGE:Particle;
	// EXPLOSION_HUGE:Particle;
	// FIREWORKS_SPARK:Particle;
	// WATER_BUBBLE:Particle;
	// WATER_SPLASH:Particle;
	// WATER_WAKE:Particle;
	// SUSPENDED:Particle;
	// SUSPENDED_DEPTH:Particle;
	// CRIT:Particle;
	// CRIT_MAGIC:Particle;
	// SMOKE_NORMAL:Particle;
	// SMOKE_LARGE:Particle;
	// SPELL:Particle;
	// SPELL_INSTANT:Particle;
	// SPELL_MOB:Particle;
	// SPELL_MOB_AMBIENT:Particle;
	// SPELL_WITCH:Particle;
	// DRIP_WATER:Particle;
	// DRIP_LAVA:Particle;
	// VILLAGER_ANGRY:Particle;
	// VILLAGER_HAPPY:Particle;
	// TOWN_AURA:Particle;
	// NOTE:Particle;
	// PORTAL:Particle;
	// ENCHANTMENT_TABLE:Particle;
	// FLAME:Particle;
	// LAVA:Particle;
	// CLOUD:Particle;
	// REDSTONE:Particle;
	// SNOWBALL:Particle;
	// SNOW_SHOVEL:Particle;
	// SLIME:Particle;
	// HEART:Particle;
	// ITEM_CRACK:Particle;
	// BLOCK_CRACK:Particle;
	// BLOCK_DUST:Particle;
	// WATER_DROP:Particle;
	// MOB_APPEARANCE:Particle;
	// DRAGON_BREATH:Particle;
	// END_ROD:Particle;
	// DAMAGE_INDICATOR:Particle;
	// SWEEP_ATTACK:Particle;
	// FALLING_DUST:Particle;
	// TOTEM:Particle;
	// SPIT:Particle;
	// SQUID_INK:Particle;
	// BUBBLE_POP:Particle;
	// CURRENT_DOWN:Particle;
	// BUBBLE_COLUMN_UP:Particle;
	// NAUTILUS:Particle;
	// DOLPHIN:Particle;
	// SNEEZE:Particle;
	// CAMPFIRE_COSY_SMOKE:Particle;
	// CAMPFIRE_SIGNAL_SMOKE:Particle;
	// COMPOSTER:Particle;
	// FLASH:Particle;
	// FALLING_LAVA:Particle;
	// LANDING_LAVA:Particle;
	// FALLING_WATER:Particle;
	// DRIPPING_HONEY:Particle;
	// FALLING_HONEY:Particle;
	// LANDING_HONEY:Particle;
	// FALLING_NECTAR:Particle;
	// SOUL_FIRE_FLAME:Particle;
	// ASH:Particle;
	// CRIMSON_SPORE:Particle;
	// WARPED_SPORE:Particle;
	// SOUL:Particle;
	// DRIPPING_OBSIDIAN_TEAR:Particle;
	// FALLING_OBSIDIAN_TEAR:Particle;
	// LANDING_OBSIDIAN_TEAR:Particle;
	// REVERSE_PORTAL:Particle;
	// WHITE_ASH:Particle;
	// DUST_COLOR_TRANSITION:Particle;
	// VIBRATION:Particle;
	// FALLING_SPORE_BLOSSOM:Particle;
	// SPORE_BLOSSOM_AIR:Particle;
	// SMALL_FLAME:Particle;
	// SNOWFLAKE:Particle;
	// DRIPPING_DRIPSTONE_LAVA:Particle;
	// FALLING_DRIPSTONE_LAVA:Particle;
	// DRIPPING_DRIPSTONE_WATER:Particle;
	// FALLING_DRIPSTONE_WATER:Particle;
	// GLOW_SQUID_INK:Particle;
	// GLOW:Particle;
	// WAX_ON:Particle;
	// WAX_OFF:Particle;
	// ELECTRIC_SPARK:Particle;
	// SCRAPE:Particle;
	// SONIC_BOOM:Particle;
	// SCULK_SOUL:Particle;
	// SCULK_CHARGE:Particle;
	// SCULK_CHARGE_POP:Particle;
	// SHRIEK:Particle;
	// DRIPPING_CHERRY_LEAVES:Particle;
	// FALLING_CHERRY_LEAVES:Particle;
	// LANDING_CHERRY_LEAVES:Particle;
	// BLOCK_MARKER:Particle;
	// LEGACY_BLOCK_CRACK:Particle;
	// LEGACY_BLOCK_DUST:Particle;
	// LEGACY_FALLING_DUST:Particle;

	builder(  ):any /*com.destroystokyo.paper.ParticleBuilder*/;
	compareTo<E>( arg0:E ):int;
	describeConstable(  ):java.util.Optional<any /*java.lang.Enum$EnumDesc*/>;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	getDataType(  ):java.lang.Class<any /*java.lang.Object*/>;
	getDeclaringClass<E>(  ):java.lang.Class<E>;
	name(  ):string;
	ordinal(  ):int;
	toString(  ):string;

} // end Particle

} // end namespace org.bukkit
declare namespace org.bukkit {

/* enum */class Sound/* extends java.lang.Enum<any> implements Keyed, net.kyori.adventure.sound.Sound$Type*/ {

	// AMBIENT_BASALT_DELTAS_ADDITIONS:Sound;
	// AMBIENT_BASALT_DELTAS_LOOP:Sound;
	// AMBIENT_BASALT_DELTAS_MOOD:Sound;
	// AMBIENT_CAVE:Sound;
	// AMBIENT_CRIMSON_FOREST_ADDITIONS:Sound;
	// AMBIENT_CRIMSON_FOREST_LOOP:Sound;
	// AMBIENT_CRIMSON_FOREST_MOOD:Sound;
	// AMBIENT_NETHER_WASTES_ADDITIONS:Sound;
	// AMBIENT_NETHER_WASTES_LOOP:Sound;
	// AMBIENT_NETHER_WASTES_MOOD:Sound;
	// AMBIENT_SOUL_SAND_VALLEY_ADDITIONS:Sound;
	// AMBIENT_SOUL_SAND_VALLEY_LOOP:Sound;
	// AMBIENT_SOUL_SAND_VALLEY_MOOD:Sound;
	// AMBIENT_UNDERWATER_ENTER:Sound;
	// AMBIENT_UNDERWATER_EXIT:Sound;
	// AMBIENT_UNDERWATER_LOOP:Sound;
	// AMBIENT_UNDERWATER_LOOP_ADDITIONS:Sound;
	// AMBIENT_UNDERWATER_LOOP_ADDITIONS_RARE:Sound;
	// AMBIENT_UNDERWATER_LOOP_ADDITIONS_ULTRA_RARE:Sound;
	// AMBIENT_WARPED_FOREST_ADDITIONS:Sound;
	// AMBIENT_WARPED_FOREST_LOOP:Sound;
	// AMBIENT_WARPED_FOREST_MOOD:Sound;
	// BLOCK_AMETHYST_BLOCK_BREAK:Sound;
	// BLOCK_AMETHYST_BLOCK_CHIME:Sound;
	// BLOCK_AMETHYST_BLOCK_FALL:Sound;
	// BLOCK_AMETHYST_BLOCK_HIT:Sound;
	// BLOCK_AMETHYST_BLOCK_PLACE:Sound;
	// BLOCK_AMETHYST_BLOCK_STEP:Sound;
	// BLOCK_AMETHYST_CLUSTER_BREAK:Sound;
	// BLOCK_AMETHYST_CLUSTER_FALL:Sound;
	// BLOCK_AMETHYST_CLUSTER_HIT:Sound;
	// BLOCK_AMETHYST_CLUSTER_PLACE:Sound;
	// BLOCK_AMETHYST_CLUSTER_STEP:Sound;
	// BLOCK_ANCIENT_DEBRIS_BREAK:Sound;
	// BLOCK_ANCIENT_DEBRIS_FALL:Sound;
	// BLOCK_ANCIENT_DEBRIS_HIT:Sound;
	// BLOCK_ANCIENT_DEBRIS_PLACE:Sound;
	// BLOCK_ANCIENT_DEBRIS_STEP:Sound;
	// BLOCK_ANVIL_BREAK:Sound;
	// BLOCK_ANVIL_DESTROY:Sound;
	// BLOCK_ANVIL_FALL:Sound;
	// BLOCK_ANVIL_HIT:Sound;
	// BLOCK_ANVIL_LAND:Sound;
	// BLOCK_ANVIL_PLACE:Sound;
	// BLOCK_ANVIL_STEP:Sound;
	// BLOCK_ANVIL_USE:Sound;
	// BLOCK_AZALEA_BREAK:Sound;
	// BLOCK_AZALEA_FALL:Sound;
	// BLOCK_AZALEA_HIT:Sound;
	// BLOCK_AZALEA_LEAVES_BREAK:Sound;
	// BLOCK_AZALEA_LEAVES_FALL:Sound;
	// BLOCK_AZALEA_LEAVES_HIT:Sound;
	// BLOCK_AZALEA_LEAVES_PLACE:Sound;
	// BLOCK_AZALEA_LEAVES_STEP:Sound;
	// BLOCK_AZALEA_PLACE:Sound;
	// BLOCK_AZALEA_STEP:Sound;
	// BLOCK_BAMBOO_BREAK:Sound;
	// BLOCK_BAMBOO_FALL:Sound;
	// BLOCK_BAMBOO_HIT:Sound;
	// BLOCK_BAMBOO_PLACE:Sound;
	// BLOCK_BAMBOO_SAPLING_BREAK:Sound;
	// BLOCK_BAMBOO_SAPLING_HIT:Sound;
	// BLOCK_BAMBOO_SAPLING_PLACE:Sound;
	// BLOCK_BAMBOO_STEP:Sound;
	// BLOCK_BAMBOO_WOOD_BREAK:Sound;
	// BLOCK_BAMBOO_WOOD_BUTTON_CLICK_OFF:Sound;
	// BLOCK_BAMBOO_WOOD_BUTTON_CLICK_ON:Sound;
	// BLOCK_BAMBOO_WOOD_DOOR_CLOSE:Sound;
	// BLOCK_BAMBOO_WOOD_DOOR_OPEN:Sound;
	// BLOCK_BAMBOO_WOOD_FALL:Sound;
	// BLOCK_BAMBOO_WOOD_FENCE_GATE_CLOSE:Sound;
	// BLOCK_BAMBOO_WOOD_FENCE_GATE_OPEN:Sound;
	// BLOCK_BAMBOO_WOOD_HANGING_SIGN_BREAK:Sound;
	// BLOCK_BAMBOO_WOOD_HANGING_SIGN_FALL:Sound;
	// BLOCK_BAMBOO_WOOD_HANGING_SIGN_HIT:Sound;
	// BLOCK_BAMBOO_WOOD_HANGING_SIGN_PLACE:Sound;
	// BLOCK_BAMBOO_WOOD_HANGING_SIGN_STEP:Sound;
	// BLOCK_BAMBOO_WOOD_HIT:Sound;
	// BLOCK_BAMBOO_WOOD_PLACE:Sound;
	// BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_OFF:Sound;
	// BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_ON:Sound;
	// BLOCK_BAMBOO_WOOD_STEP:Sound;
	// BLOCK_BAMBOO_WOOD_TRAPDOOR_CLOSE:Sound;
	// BLOCK_BAMBOO_WOOD_TRAPDOOR_OPEN:Sound;
	// BLOCK_BARREL_CLOSE:Sound;
	// BLOCK_BARREL_OPEN:Sound;
	// BLOCK_BASALT_BREAK:Sound;
	// BLOCK_BASALT_FALL:Sound;
	// BLOCK_BASALT_HIT:Sound;
	// BLOCK_BASALT_PLACE:Sound;
	// BLOCK_BASALT_STEP:Sound;
	// BLOCK_BEACON_ACTIVATE:Sound;
	// BLOCK_BEACON_AMBIENT:Sound;
	// BLOCK_BEACON_DEACTIVATE:Sound;
	// BLOCK_BEACON_POWER_SELECT:Sound;
	// BLOCK_BEEHIVE_DRIP:Sound;
	// BLOCK_BEEHIVE_ENTER:Sound;
	// BLOCK_BEEHIVE_EXIT:Sound;
	// BLOCK_BEEHIVE_SHEAR:Sound;
	// BLOCK_BEEHIVE_WORK:Sound;
	// BLOCK_BELL_RESONATE:Sound;
	// BLOCK_BELL_USE:Sound;
	// BLOCK_BIG_DRIPLEAF_BREAK:Sound;
	// BLOCK_BIG_DRIPLEAF_FALL:Sound;
	// BLOCK_BIG_DRIPLEAF_HIT:Sound;
	// BLOCK_BIG_DRIPLEAF_PLACE:Sound;
	// BLOCK_BIG_DRIPLEAF_STEP:Sound;
	// BLOCK_BIG_DRIPLEAF_TILT_DOWN:Sound;
	// BLOCK_BIG_DRIPLEAF_TILT_UP:Sound;
	// BLOCK_BLASTFURNACE_FIRE_CRACKLE:Sound;
	// BLOCK_BONE_BLOCK_BREAK:Sound;
	// BLOCK_BONE_BLOCK_FALL:Sound;
	// BLOCK_BONE_BLOCK_HIT:Sound;
	// BLOCK_BONE_BLOCK_PLACE:Sound;
	// BLOCK_BONE_BLOCK_STEP:Sound;
	// BLOCK_BREWING_STAND_BREW:Sound;
	// BLOCK_BUBBLE_COLUMN_BUBBLE_POP:Sound;
	// BLOCK_BUBBLE_COLUMN_UPWARDS_AMBIENT:Sound;
	// BLOCK_BUBBLE_COLUMN_UPWARDS_INSIDE:Sound;
	// BLOCK_BUBBLE_COLUMN_WHIRLPOOL_AMBIENT:Sound;
	// BLOCK_BUBBLE_COLUMN_WHIRLPOOL_INSIDE:Sound;
	// BLOCK_CAKE_ADD_CANDLE:Sound;
	// BLOCK_CALCITE_BREAK:Sound;
	// BLOCK_CALCITE_FALL:Sound;
	// BLOCK_CALCITE_HIT:Sound;
	// BLOCK_CALCITE_PLACE:Sound;
	// BLOCK_CALCITE_STEP:Sound;
	// BLOCK_CAMPFIRE_CRACKLE:Sound;
	// BLOCK_CANDLE_AMBIENT:Sound;
	// BLOCK_CANDLE_BREAK:Sound;
	// BLOCK_CANDLE_EXTINGUISH:Sound;
	// BLOCK_CANDLE_FALL:Sound;
	// BLOCK_CANDLE_HIT:Sound;
	// BLOCK_CANDLE_PLACE:Sound;
	// BLOCK_CANDLE_STEP:Sound;
	// BLOCK_CAVE_VINES_BREAK:Sound;
	// BLOCK_CAVE_VINES_FALL:Sound;
	// BLOCK_CAVE_VINES_HIT:Sound;
	// BLOCK_CAVE_VINES_PICK_BERRIES:Sound;
	// BLOCK_CAVE_VINES_PLACE:Sound;
	// BLOCK_CAVE_VINES_STEP:Sound;
	// BLOCK_CHAIN_BREAK:Sound;
	// BLOCK_CHAIN_FALL:Sound;
	// BLOCK_CHAIN_HIT:Sound;
	// BLOCK_CHAIN_PLACE:Sound;
	// BLOCK_CHAIN_STEP:Sound;
	// BLOCK_CHERRY_LEAVES_BREAK:Sound;
	// BLOCK_CHERRY_LEAVES_FALL:Sound;
	// BLOCK_CHERRY_LEAVES_HIT:Sound;
	// BLOCK_CHERRY_LEAVES_PLACE:Sound;
	// BLOCK_CHERRY_LEAVES_STEP:Sound;
	// BLOCK_CHERRY_SAPLING_BREAK:Sound;
	// BLOCK_CHERRY_SAPLING_FALL:Sound;
	// BLOCK_CHERRY_SAPLING_HIT:Sound;
	// BLOCK_CHERRY_SAPLING_PLACE:Sound;
	// BLOCK_CHERRY_SAPLING_STEP:Sound;
	// BLOCK_CHERRY_WOOD_BREAK:Sound;
	// BLOCK_CHERRY_WOOD_BUTTON_CLICK_OFF:Sound;
	// BLOCK_CHERRY_WOOD_BUTTON_CLICK_ON:Sound;
	// BLOCK_CHERRY_WOOD_DOOR_CLOSE:Sound;
	// BLOCK_CHERRY_WOOD_DOOR_OPEN:Sound;
	// BLOCK_CHERRY_WOOD_FALL:Sound;
	// BLOCK_CHERRY_WOOD_FENCE_GATE_CLOSE:Sound;
	// BLOCK_CHERRY_WOOD_FENCE_GATE_OPEN:Sound;
	// BLOCK_CHERRY_WOOD_HANGING_SIGN_BREAK:Sound;
	// BLOCK_CHERRY_WOOD_HANGING_SIGN_FALL:Sound;
	// BLOCK_CHERRY_WOOD_HANGING_SIGN_HIT:Sound;
	// BLOCK_CHERRY_WOOD_HANGING_SIGN_PLACE:Sound;
	// BLOCK_CHERRY_WOOD_HANGING_SIGN_STEP:Sound;
	// BLOCK_CHERRY_WOOD_HIT:Sound;
	// BLOCK_CHERRY_WOOD_PLACE:Sound;
	// BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_OFF:Sound;
	// BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_ON:Sound;
	// BLOCK_CHERRY_WOOD_STEP:Sound;
	// BLOCK_CHERRY_WOOD_TRAPDOOR_CLOSE:Sound;
	// BLOCK_CHERRY_WOOD_TRAPDOOR_OPEN:Sound;
	// BLOCK_CHEST_CLOSE:Sound;
	// BLOCK_CHEST_LOCKED:Sound;
	// BLOCK_CHEST_OPEN:Sound;
	// BLOCK_CHISELED_BOOKSHELF_BREAK:Sound;
	// BLOCK_CHISELED_BOOKSHELF_FALL:Sound;
	// BLOCK_CHISELED_BOOKSHELF_HIT:Sound;
	// BLOCK_CHISELED_BOOKSHELF_INSERT:Sound;
	// BLOCK_CHISELED_BOOKSHELF_INSERT_ENCHANTED:Sound;
	// BLOCK_CHISELED_BOOKSHELF_PICKUP:Sound;
	// BLOCK_CHISELED_BOOKSHELF_PICKUP_ENCHANTED:Sound;
	// BLOCK_CHISELED_BOOKSHELF_PLACE:Sound;
	// BLOCK_CHISELED_BOOKSHELF_STEP:Sound;
	// BLOCK_CHORUS_FLOWER_DEATH:Sound;
	// BLOCK_CHORUS_FLOWER_GROW:Sound;
	// BLOCK_COMPARATOR_CLICK:Sound;
	// BLOCK_COMPOSTER_EMPTY:Sound;
	// BLOCK_COMPOSTER_FILL:Sound;
	// BLOCK_COMPOSTER_FILL_SUCCESS:Sound;
	// BLOCK_COMPOSTER_READY:Sound;
	// BLOCK_CONDUIT_ACTIVATE:Sound;
	// BLOCK_CONDUIT_AMBIENT:Sound;
	// BLOCK_CONDUIT_AMBIENT_SHORT:Sound;
	// BLOCK_CONDUIT_ATTACK_TARGET:Sound;
	// BLOCK_CONDUIT_DEACTIVATE:Sound;
	// BLOCK_COPPER_BREAK:Sound;
	// BLOCK_COPPER_FALL:Sound;
	// BLOCK_COPPER_HIT:Sound;
	// BLOCK_COPPER_PLACE:Sound;
	// BLOCK_COPPER_STEP:Sound;
	// BLOCK_CORAL_BLOCK_BREAK:Sound;
	// BLOCK_CORAL_BLOCK_FALL:Sound;
	// BLOCK_CORAL_BLOCK_HIT:Sound;
	// BLOCK_CORAL_BLOCK_PLACE:Sound;
	// BLOCK_CORAL_BLOCK_STEP:Sound;
	// BLOCK_CROP_BREAK:Sound;
	// BLOCK_DECORATED_POT_BREAK:Sound;
	// BLOCK_DECORATED_POT_FALL:Sound;
	// BLOCK_DECORATED_POT_HIT:Sound;
	// BLOCK_DECORATED_POT_PLACE:Sound;
	// BLOCK_DECORATED_POT_SHATTER:Sound;
	// BLOCK_DECORATED_POT_STEP:Sound;
	// BLOCK_DEEPSLATE_BREAK:Sound;
	// BLOCK_DEEPSLATE_BRICKS_BREAK:Sound;
	// BLOCK_DEEPSLATE_BRICKS_FALL:Sound;
	// BLOCK_DEEPSLATE_BRICKS_HIT:Sound;
	// BLOCK_DEEPSLATE_BRICKS_PLACE:Sound;
	// BLOCK_DEEPSLATE_BRICKS_STEP:Sound;
	// BLOCK_DEEPSLATE_FALL:Sound;
	// BLOCK_DEEPSLATE_HIT:Sound;
	// BLOCK_DEEPSLATE_PLACE:Sound;
	// BLOCK_DEEPSLATE_STEP:Sound;
	// BLOCK_DEEPSLATE_TILES_BREAK:Sound;
	// BLOCK_DEEPSLATE_TILES_FALL:Sound;
	// BLOCK_DEEPSLATE_TILES_HIT:Sound;
	// BLOCK_DEEPSLATE_TILES_PLACE:Sound;
	// BLOCK_DEEPSLATE_TILES_STEP:Sound;
	// BLOCK_DISPENSER_DISPENSE:Sound;
	// BLOCK_DISPENSER_FAIL:Sound;
	// BLOCK_DISPENSER_LAUNCH:Sound;
	// BLOCK_DRIPSTONE_BLOCK_BREAK:Sound;
	// BLOCK_DRIPSTONE_BLOCK_FALL:Sound;
	// BLOCK_DRIPSTONE_BLOCK_HIT:Sound;
	// BLOCK_DRIPSTONE_BLOCK_PLACE:Sound;
	// BLOCK_DRIPSTONE_BLOCK_STEP:Sound;
	// BLOCK_ENCHANTMENT_TABLE_USE:Sound;
	// BLOCK_ENDER_CHEST_CLOSE:Sound;
	// BLOCK_ENDER_CHEST_OPEN:Sound;
	// BLOCK_END_GATEWAY_SPAWN:Sound;
	// BLOCK_END_PORTAL_FRAME_FILL:Sound;
	// BLOCK_END_PORTAL_SPAWN:Sound;
	// BLOCK_FENCE_GATE_CLOSE:Sound;
	// BLOCK_FENCE_GATE_OPEN:Sound;
	// BLOCK_FIRE_AMBIENT:Sound;
	// BLOCK_FIRE_EXTINGUISH:Sound;
	// BLOCK_FLOWERING_AZALEA_BREAK:Sound;
	// BLOCK_FLOWERING_AZALEA_FALL:Sound;
	// BLOCK_FLOWERING_AZALEA_HIT:Sound;
	// BLOCK_FLOWERING_AZALEA_PLACE:Sound;
	// BLOCK_FLOWERING_AZALEA_STEP:Sound;
	// BLOCK_FROGLIGHT_BREAK:Sound;
	// BLOCK_FROGLIGHT_FALL:Sound;
	// BLOCK_FROGLIGHT_HIT:Sound;
	// BLOCK_FROGLIGHT_PLACE:Sound;
	// BLOCK_FROGLIGHT_STEP:Sound;
	// BLOCK_FROGSPAWN_BREAK:Sound;
	// BLOCK_FROGSPAWN_FALL:Sound;
	// BLOCK_FROGSPAWN_HATCH:Sound;
	// BLOCK_FROGSPAWN_HIT:Sound;
	// BLOCK_FROGSPAWN_PLACE:Sound;
	// BLOCK_FROGSPAWN_STEP:Sound;
	// BLOCK_FUNGUS_BREAK:Sound;
	// BLOCK_FUNGUS_FALL:Sound;
	// BLOCK_FUNGUS_HIT:Sound;
	// BLOCK_FUNGUS_PLACE:Sound;
	// BLOCK_FUNGUS_STEP:Sound;
	// BLOCK_FURNACE_FIRE_CRACKLE:Sound;
	// BLOCK_GILDED_BLACKSTONE_BREAK:Sound;
	// BLOCK_GILDED_BLACKSTONE_FALL:Sound;
	// BLOCK_GILDED_BLACKSTONE_HIT:Sound;
	// BLOCK_GILDED_BLACKSTONE_PLACE:Sound;
	// BLOCK_GILDED_BLACKSTONE_STEP:Sound;
	// BLOCK_GLASS_BREAK:Sound;
	// BLOCK_GLASS_FALL:Sound;
	// BLOCK_GLASS_HIT:Sound;
	// BLOCK_GLASS_PLACE:Sound;
	// BLOCK_GLASS_STEP:Sound;
	// BLOCK_GRASS_BREAK:Sound;
	// BLOCK_GRASS_FALL:Sound;
	// BLOCK_GRASS_HIT:Sound;
	// BLOCK_GRASS_PLACE:Sound;
	// BLOCK_GRASS_STEP:Sound;
	// BLOCK_GRAVEL_BREAK:Sound;
	// BLOCK_GRAVEL_FALL:Sound;
	// BLOCK_GRAVEL_HIT:Sound;
	// BLOCK_GRAVEL_PLACE:Sound;
	// BLOCK_GRAVEL_STEP:Sound;
	// BLOCK_GRINDSTONE_USE:Sound;
	// BLOCK_GROWING_PLANT_CROP:Sound;
	// BLOCK_HANGING_ROOTS_BREAK:Sound;
	// BLOCK_HANGING_ROOTS_FALL:Sound;
	// BLOCK_HANGING_ROOTS_HIT:Sound;
	// BLOCK_HANGING_ROOTS_PLACE:Sound;
	// BLOCK_HANGING_ROOTS_STEP:Sound;
	// BLOCK_HANGING_SIGN_BREAK:Sound;
	// BLOCK_HANGING_SIGN_FALL:Sound;
	// BLOCK_HANGING_SIGN_HIT:Sound;
	// BLOCK_HANGING_SIGN_PLACE:Sound;
	// BLOCK_HANGING_SIGN_STEP:Sound;
	// BLOCK_HONEY_BLOCK_BREAK:Sound;
	// BLOCK_HONEY_BLOCK_FALL:Sound;
	// BLOCK_HONEY_BLOCK_HIT:Sound;
	// BLOCK_HONEY_BLOCK_PLACE:Sound;
	// BLOCK_HONEY_BLOCK_SLIDE:Sound;
	// BLOCK_HONEY_BLOCK_STEP:Sound;
	// BLOCK_IRON_DOOR_CLOSE:Sound;
	// BLOCK_IRON_DOOR_OPEN:Sound;
	// BLOCK_IRON_TRAPDOOR_CLOSE:Sound;
	// BLOCK_IRON_TRAPDOOR_OPEN:Sound;
	// BLOCK_LADDER_BREAK:Sound;
	// BLOCK_LADDER_FALL:Sound;
	// BLOCK_LADDER_HIT:Sound;
	// BLOCK_LADDER_PLACE:Sound;
	// BLOCK_LADDER_STEP:Sound;
	// BLOCK_LANTERN_BREAK:Sound;
	// BLOCK_LANTERN_FALL:Sound;
	// BLOCK_LANTERN_HIT:Sound;
	// BLOCK_LANTERN_PLACE:Sound;
	// BLOCK_LANTERN_STEP:Sound;
	// BLOCK_LARGE_AMETHYST_BUD_BREAK:Sound;
	// BLOCK_LARGE_AMETHYST_BUD_PLACE:Sound;
	// BLOCK_LAVA_AMBIENT:Sound;
	// BLOCK_LAVA_EXTINGUISH:Sound;
	// BLOCK_LAVA_POP:Sound;
	// BLOCK_LEVER_CLICK:Sound;
	// BLOCK_LILY_PAD_PLACE:Sound;
	// BLOCK_LODESTONE_BREAK:Sound;
	// BLOCK_LODESTONE_FALL:Sound;
	// BLOCK_LODESTONE_HIT:Sound;
	// BLOCK_LODESTONE_PLACE:Sound;
	// BLOCK_LODESTONE_STEP:Sound;
	// BLOCK_MANGROVE_ROOTS_BREAK:Sound;
	// BLOCK_MANGROVE_ROOTS_FALL:Sound;
	// BLOCK_MANGROVE_ROOTS_HIT:Sound;
	// BLOCK_MANGROVE_ROOTS_PLACE:Sound;
	// BLOCK_MANGROVE_ROOTS_STEP:Sound;
	// BLOCK_MEDIUM_AMETHYST_BUD_BREAK:Sound;
	// BLOCK_MEDIUM_AMETHYST_BUD_PLACE:Sound;
	// BLOCK_METAL_BREAK:Sound;
	// BLOCK_METAL_FALL:Sound;
	// BLOCK_METAL_HIT:Sound;
	// BLOCK_METAL_PLACE:Sound;
	// BLOCK_METAL_PRESSURE_PLATE_CLICK_OFF:Sound;
	// BLOCK_METAL_PRESSURE_PLATE_CLICK_ON:Sound;
	// BLOCK_METAL_STEP:Sound;
	// BLOCK_MOSS_BREAK:Sound;
	// BLOCK_MOSS_CARPET_BREAK:Sound;
	// BLOCK_MOSS_CARPET_FALL:Sound;
	// BLOCK_MOSS_CARPET_HIT:Sound;
	// BLOCK_MOSS_CARPET_PLACE:Sound;
	// BLOCK_MOSS_CARPET_STEP:Sound;
	// BLOCK_MOSS_FALL:Sound;
	// BLOCK_MOSS_HIT:Sound;
	// BLOCK_MOSS_PLACE:Sound;
	// BLOCK_MOSS_STEP:Sound;
	// BLOCK_MUDDY_MANGROVE_ROOTS_BREAK:Sound;
	// BLOCK_MUDDY_MANGROVE_ROOTS_FALL:Sound;
	// BLOCK_MUDDY_MANGROVE_ROOTS_HIT:Sound;
	// BLOCK_MUDDY_MANGROVE_ROOTS_PLACE:Sound;
	// BLOCK_MUDDY_MANGROVE_ROOTS_STEP:Sound;
	// BLOCK_MUD_BREAK:Sound;
	// BLOCK_MUD_BRICKS_BREAK:Sound;
	// BLOCK_MUD_BRICKS_FALL:Sound;
	// BLOCK_MUD_BRICKS_HIT:Sound;
	// BLOCK_MUD_BRICKS_PLACE:Sound;
	// BLOCK_MUD_BRICKS_STEP:Sound;
	// BLOCK_MUD_FALL:Sound;
	// BLOCK_MUD_HIT:Sound;
	// BLOCK_MUD_PLACE:Sound;
	// BLOCK_MUD_STEP:Sound;
	// BLOCK_NETHERITE_BLOCK_BREAK:Sound;
	// BLOCK_NETHERITE_BLOCK_FALL:Sound;
	// BLOCK_NETHERITE_BLOCK_HIT:Sound;
	// BLOCK_NETHERITE_BLOCK_PLACE:Sound;
	// BLOCK_NETHERITE_BLOCK_STEP:Sound;
	// BLOCK_NETHERRACK_BREAK:Sound;
	// BLOCK_NETHERRACK_FALL:Sound;
	// BLOCK_NETHERRACK_HIT:Sound;
	// BLOCK_NETHERRACK_PLACE:Sound;
	// BLOCK_NETHERRACK_STEP:Sound;
	// BLOCK_NETHER_BRICKS_BREAK:Sound;
	// BLOCK_NETHER_BRICKS_FALL:Sound;
	// BLOCK_NETHER_BRICKS_HIT:Sound;
	// BLOCK_NETHER_BRICKS_PLACE:Sound;
	// BLOCK_NETHER_BRICKS_STEP:Sound;
	// BLOCK_NETHER_GOLD_ORE_BREAK:Sound;
	// BLOCK_NETHER_GOLD_ORE_FALL:Sound;
	// BLOCK_NETHER_GOLD_ORE_HIT:Sound;
	// BLOCK_NETHER_GOLD_ORE_PLACE:Sound;
	// BLOCK_NETHER_GOLD_ORE_STEP:Sound;
	// BLOCK_NETHER_ORE_BREAK:Sound;
	// BLOCK_NETHER_ORE_FALL:Sound;
	// BLOCK_NETHER_ORE_HIT:Sound;
	// BLOCK_NETHER_ORE_PLACE:Sound;
	// BLOCK_NETHER_ORE_STEP:Sound;
	// BLOCK_NETHER_SPROUTS_BREAK:Sound;
	// BLOCK_NETHER_SPROUTS_FALL:Sound;
	// BLOCK_NETHER_SPROUTS_HIT:Sound;
	// BLOCK_NETHER_SPROUTS_PLACE:Sound;
	// BLOCK_NETHER_SPROUTS_STEP:Sound;
	// BLOCK_NETHER_WART_BREAK:Sound;
	// BLOCK_NETHER_WOOD_BREAK:Sound;
	// BLOCK_NETHER_WOOD_BUTTON_CLICK_OFF:Sound;
	// BLOCK_NETHER_WOOD_BUTTON_CLICK_ON:Sound;
	// BLOCK_NETHER_WOOD_DOOR_CLOSE:Sound;
	// BLOCK_NETHER_WOOD_DOOR_OPEN:Sound;
	// BLOCK_NETHER_WOOD_FALL:Sound;
	// BLOCK_NETHER_WOOD_FENCE_GATE_CLOSE:Sound;
	// BLOCK_NETHER_WOOD_FENCE_GATE_OPEN:Sound;
	// BLOCK_NETHER_WOOD_HANGING_SIGN_BREAK:Sound;
	// BLOCK_NETHER_WOOD_HANGING_SIGN_FALL:Sound;
	// BLOCK_NETHER_WOOD_HANGING_SIGN_HIT:Sound;
	// BLOCK_NETHER_WOOD_HANGING_SIGN_PLACE:Sound;
	// BLOCK_NETHER_WOOD_HANGING_SIGN_STEP:Sound;
	// BLOCK_NETHER_WOOD_HIT:Sound;
	// BLOCK_NETHER_WOOD_PLACE:Sound;
	// BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_OFF:Sound;
	// BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_ON:Sound;
	// BLOCK_NETHER_WOOD_STEP:Sound;
	// BLOCK_NETHER_WOOD_TRAPDOOR_CLOSE:Sound;
	// BLOCK_NETHER_WOOD_TRAPDOOR_OPEN:Sound;
	// BLOCK_NOTE_BLOCK_BANJO:Sound;
	// BLOCK_NOTE_BLOCK_BASEDRUM:Sound;
	// BLOCK_NOTE_BLOCK_BASS:Sound;
	// BLOCK_NOTE_BLOCK_BELL:Sound;
	// BLOCK_NOTE_BLOCK_BIT:Sound;
	// BLOCK_NOTE_BLOCK_CHIME:Sound;
	// BLOCK_NOTE_BLOCK_COW_BELL:Sound;
	// BLOCK_NOTE_BLOCK_DIDGERIDOO:Sound;
	// BLOCK_NOTE_BLOCK_FLUTE:Sound;
	// BLOCK_NOTE_BLOCK_GUITAR:Sound;
	// BLOCK_NOTE_BLOCK_HARP:Sound;
	// BLOCK_NOTE_BLOCK_HAT:Sound;
	// BLOCK_NOTE_BLOCK_IMITATE_CREEPER:Sound;
	// BLOCK_NOTE_BLOCK_IMITATE_ENDER_DRAGON:Sound;
	// BLOCK_NOTE_BLOCK_IMITATE_PIGLIN:Sound;
	// BLOCK_NOTE_BLOCK_IMITATE_SKELETON:Sound;
	// BLOCK_NOTE_BLOCK_IMITATE_WITHER_SKELETON:Sound;
	// BLOCK_NOTE_BLOCK_IMITATE_ZOMBIE:Sound;
	// BLOCK_NOTE_BLOCK_IRON_XYLOPHONE:Sound;
	// BLOCK_NOTE_BLOCK_PLING:Sound;
	// BLOCK_NOTE_BLOCK_SNARE:Sound;
	// BLOCK_NOTE_BLOCK_XYLOPHONE:Sound;
	// BLOCK_NYLIUM_BREAK:Sound;
	// BLOCK_NYLIUM_FALL:Sound;
	// BLOCK_NYLIUM_HIT:Sound;
	// BLOCK_NYLIUM_PLACE:Sound;
	// BLOCK_NYLIUM_STEP:Sound;
	// BLOCK_PACKED_MUD_BREAK:Sound;
	// BLOCK_PACKED_MUD_FALL:Sound;
	// BLOCK_PACKED_MUD_HIT:Sound;
	// BLOCK_PACKED_MUD_PLACE:Sound;
	// BLOCK_PACKED_MUD_STEP:Sound;
	// BLOCK_PINK_PETALS_BREAK:Sound;
	// BLOCK_PINK_PETALS_FALL:Sound;
	// BLOCK_PINK_PETALS_HIT:Sound;
	// BLOCK_PINK_PETALS_PLACE:Sound;
	// BLOCK_PINK_PETALS_STEP:Sound;
	// BLOCK_PISTON_CONTRACT:Sound;
	// BLOCK_PISTON_EXTEND:Sound;
	// BLOCK_POINTED_DRIPSTONE_BREAK:Sound;
	// BLOCK_POINTED_DRIPSTONE_DRIP_LAVA:Sound;
	// BLOCK_POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON:Sound;
	// BLOCK_POINTED_DRIPSTONE_DRIP_WATER:Sound;
	// BLOCK_POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON:Sound;
	// BLOCK_POINTED_DRIPSTONE_FALL:Sound;
	// BLOCK_POINTED_DRIPSTONE_HIT:Sound;
	// BLOCK_POINTED_DRIPSTONE_LAND:Sound;
	// BLOCK_POINTED_DRIPSTONE_PLACE:Sound;
	// BLOCK_POINTED_DRIPSTONE_STEP:Sound;
	// BLOCK_POLISHED_DEEPSLATE_BREAK:Sound;
	// BLOCK_POLISHED_DEEPSLATE_FALL:Sound;
	// BLOCK_POLISHED_DEEPSLATE_HIT:Sound;
	// BLOCK_POLISHED_DEEPSLATE_PLACE:Sound;
	// BLOCK_POLISHED_DEEPSLATE_STEP:Sound;
	// BLOCK_PORTAL_AMBIENT:Sound;
	// BLOCK_PORTAL_TRAVEL:Sound;
	// BLOCK_PORTAL_TRIGGER:Sound;
	// BLOCK_POWDER_SNOW_BREAK:Sound;
	// BLOCK_POWDER_SNOW_FALL:Sound;
	// BLOCK_POWDER_SNOW_HIT:Sound;
	// BLOCK_POWDER_SNOW_PLACE:Sound;
	// BLOCK_POWDER_SNOW_STEP:Sound;
	// BLOCK_PUMPKIN_CARVE:Sound;
	// BLOCK_REDSTONE_TORCH_BURNOUT:Sound;
	// BLOCK_RESPAWN_ANCHOR_AMBIENT:Sound;
	// BLOCK_RESPAWN_ANCHOR_CHARGE:Sound;
	// BLOCK_RESPAWN_ANCHOR_DEPLETE:Sound;
	// BLOCK_RESPAWN_ANCHOR_SET_SPAWN:Sound;
	// BLOCK_ROOTED_DIRT_BREAK:Sound;
	// BLOCK_ROOTED_DIRT_FALL:Sound;
	// BLOCK_ROOTED_DIRT_HIT:Sound;
	// BLOCK_ROOTED_DIRT_PLACE:Sound;
	// BLOCK_ROOTED_DIRT_STEP:Sound;
	// BLOCK_ROOTS_BREAK:Sound;
	// BLOCK_ROOTS_FALL:Sound;
	// BLOCK_ROOTS_HIT:Sound;
	// BLOCK_ROOTS_PLACE:Sound;
	// BLOCK_ROOTS_STEP:Sound;
	// BLOCK_SAND_BREAK:Sound;
	// BLOCK_SAND_FALL:Sound;
	// BLOCK_SAND_HIT:Sound;
	// BLOCK_SAND_PLACE:Sound;
	// BLOCK_SAND_STEP:Sound;
	// BLOCK_SCAFFOLDING_BREAK:Sound;
	// BLOCK_SCAFFOLDING_FALL:Sound;
	// BLOCK_SCAFFOLDING_HIT:Sound;
	// BLOCK_SCAFFOLDING_PLACE:Sound;
	// BLOCK_SCAFFOLDING_STEP:Sound;
	// BLOCK_SCULK_BREAK:Sound;
	// BLOCK_SCULK_CATALYST_BLOOM:Sound;
	// BLOCK_SCULK_CATALYST_BREAK:Sound;
	// BLOCK_SCULK_CATALYST_FALL:Sound;
	// BLOCK_SCULK_CATALYST_HIT:Sound;
	// BLOCK_SCULK_CATALYST_PLACE:Sound;
	// BLOCK_SCULK_CATALYST_STEP:Sound;
	// BLOCK_SCULK_CHARGE:Sound;
	// BLOCK_SCULK_FALL:Sound;
	// BLOCK_SCULK_HIT:Sound;
	// BLOCK_SCULK_PLACE:Sound;
	// BLOCK_SCULK_SENSOR_BREAK:Sound;
	// BLOCK_SCULK_SENSOR_CLICKING:Sound;
	// BLOCK_SCULK_SENSOR_CLICKING_STOP:Sound;
	// BLOCK_SCULK_SENSOR_FALL:Sound;
	// BLOCK_SCULK_SENSOR_HIT:Sound;
	// BLOCK_SCULK_SENSOR_PLACE:Sound;
	// BLOCK_SCULK_SENSOR_STEP:Sound;
	// BLOCK_SCULK_SHRIEKER_BREAK:Sound;
	// BLOCK_SCULK_SHRIEKER_FALL:Sound;
	// BLOCK_SCULK_SHRIEKER_HIT:Sound;
	// BLOCK_SCULK_SHRIEKER_PLACE:Sound;
	// BLOCK_SCULK_SHRIEKER_SHRIEK:Sound;
	// BLOCK_SCULK_SHRIEKER_STEP:Sound;
	// BLOCK_SCULK_SPREAD:Sound;
	// BLOCK_SCULK_STEP:Sound;
	// BLOCK_SCULK_VEIN_BREAK:Sound;
	// BLOCK_SCULK_VEIN_FALL:Sound;
	// BLOCK_SCULK_VEIN_HIT:Sound;
	// BLOCK_SCULK_VEIN_PLACE:Sound;
	// BLOCK_SCULK_VEIN_STEP:Sound;
	// BLOCK_SHROOMLIGHT_BREAK:Sound;
	// BLOCK_SHROOMLIGHT_FALL:Sound;
	// BLOCK_SHROOMLIGHT_HIT:Sound;
	// BLOCK_SHROOMLIGHT_PLACE:Sound;
	// BLOCK_SHROOMLIGHT_STEP:Sound;
	// BLOCK_SHULKER_BOX_CLOSE:Sound;
	// BLOCK_SHULKER_BOX_OPEN:Sound;
	// BLOCK_SLIME_BLOCK_BREAK:Sound;
	// BLOCK_SLIME_BLOCK_FALL:Sound;
	// BLOCK_SLIME_BLOCK_HIT:Sound;
	// BLOCK_SLIME_BLOCK_PLACE:Sound;
	// BLOCK_SLIME_BLOCK_STEP:Sound;
	// BLOCK_SMALL_AMETHYST_BUD_BREAK:Sound;
	// BLOCK_SMALL_AMETHYST_BUD_PLACE:Sound;
	// BLOCK_SMALL_DRIPLEAF_BREAK:Sound;
	// BLOCK_SMALL_DRIPLEAF_FALL:Sound;
	// BLOCK_SMALL_DRIPLEAF_HIT:Sound;
	// BLOCK_SMALL_DRIPLEAF_PLACE:Sound;
	// BLOCK_SMALL_DRIPLEAF_STEP:Sound;
	// BLOCK_SMITHING_TABLE_USE:Sound;
	// BLOCK_SMOKER_SMOKE:Sound;
	// BLOCK_SNOW_BREAK:Sound;
	// BLOCK_SNOW_FALL:Sound;
	// BLOCK_SNOW_HIT:Sound;
	// BLOCK_SNOW_PLACE:Sound;
	// BLOCK_SNOW_STEP:Sound;
	// BLOCK_SOUL_SAND_BREAK:Sound;
	// BLOCK_SOUL_SAND_FALL:Sound;
	// BLOCK_SOUL_SAND_HIT:Sound;
	// BLOCK_SOUL_SAND_PLACE:Sound;
	// BLOCK_SOUL_SAND_STEP:Sound;
	// BLOCK_SOUL_SOIL_BREAK:Sound;
	// BLOCK_SOUL_SOIL_FALL:Sound;
	// BLOCK_SOUL_SOIL_HIT:Sound;
	// BLOCK_SOUL_SOIL_PLACE:Sound;
	// BLOCK_SOUL_SOIL_STEP:Sound;
	// BLOCK_SPORE_BLOSSOM_BREAK:Sound;
	// BLOCK_SPORE_BLOSSOM_FALL:Sound;
	// BLOCK_SPORE_BLOSSOM_HIT:Sound;
	// BLOCK_SPORE_BLOSSOM_PLACE:Sound;
	// BLOCK_SPORE_BLOSSOM_STEP:Sound;
	// BLOCK_STEM_BREAK:Sound;
	// BLOCK_STEM_FALL:Sound;
	// BLOCK_STEM_HIT:Sound;
	// BLOCK_STEM_PLACE:Sound;
	// BLOCK_STEM_STEP:Sound;
	// BLOCK_STONE_BREAK:Sound;
	// BLOCK_STONE_BUTTON_CLICK_OFF:Sound;
	// BLOCK_STONE_BUTTON_CLICK_ON:Sound;
	// BLOCK_STONE_FALL:Sound;
	// BLOCK_STONE_HIT:Sound;
	// BLOCK_STONE_PLACE:Sound;
	// BLOCK_STONE_PRESSURE_PLATE_CLICK_OFF:Sound;
	// BLOCK_STONE_PRESSURE_PLATE_CLICK_ON:Sound;
	// BLOCK_STONE_STEP:Sound;
	// BLOCK_SUSPICIOUS_SAND_BREAK:Sound;
	// BLOCK_SUSPICIOUS_SAND_FALL:Sound;
	// BLOCK_SUSPICIOUS_SAND_HIT:Sound;
	// BLOCK_SUSPICIOUS_SAND_PLACE:Sound;
	// BLOCK_SUSPICIOUS_SAND_STEP:Sound;
	// BLOCK_SWEET_BERRY_BUSH_BREAK:Sound;
	// BLOCK_SWEET_BERRY_BUSH_PICK_BERRIES:Sound;
	// BLOCK_SWEET_BERRY_BUSH_PLACE:Sound;
	// BLOCK_TRIPWIRE_ATTACH:Sound;
	// BLOCK_TRIPWIRE_CLICK_OFF:Sound;
	// BLOCK_TRIPWIRE_CLICK_ON:Sound;
	// BLOCK_TRIPWIRE_DETACH:Sound;
	// BLOCK_TUFF_BREAK:Sound;
	// BLOCK_TUFF_FALL:Sound;
	// BLOCK_TUFF_HIT:Sound;
	// BLOCK_TUFF_PLACE:Sound;
	// BLOCK_TUFF_STEP:Sound;
	// BLOCK_VINE_BREAK:Sound;
	// BLOCK_VINE_FALL:Sound;
	// BLOCK_VINE_HIT:Sound;
	// BLOCK_VINE_PLACE:Sound;
	// BLOCK_VINE_STEP:Sound;
	// BLOCK_WART_BLOCK_BREAK:Sound;
	// BLOCK_WART_BLOCK_FALL:Sound;
	// BLOCK_WART_BLOCK_HIT:Sound;
	// BLOCK_WART_BLOCK_PLACE:Sound;
	// BLOCK_WART_BLOCK_STEP:Sound;
	// BLOCK_WATER_AMBIENT:Sound;
	// BLOCK_WEEPING_VINES_BREAK:Sound;
	// BLOCK_WEEPING_VINES_FALL:Sound;
	// BLOCK_WEEPING_VINES_HIT:Sound;
	// BLOCK_WEEPING_VINES_PLACE:Sound;
	// BLOCK_WEEPING_VINES_STEP:Sound;
	// BLOCK_WET_GRASS_BREAK:Sound;
	// BLOCK_WET_GRASS_FALL:Sound;
	// BLOCK_WET_GRASS_HIT:Sound;
	// BLOCK_WET_GRASS_PLACE:Sound;
	// BLOCK_WET_GRASS_STEP:Sound;
	// BLOCK_WOODEN_BUTTON_CLICK_OFF:Sound;
	// BLOCK_WOODEN_BUTTON_CLICK_ON:Sound;
	// BLOCK_WOODEN_DOOR_CLOSE:Sound;
	// BLOCK_WOODEN_DOOR_OPEN:Sound;
	// BLOCK_WOODEN_PRESSURE_PLATE_CLICK_OFF:Sound;
	// BLOCK_WOODEN_PRESSURE_PLATE_CLICK_ON:Sound;
	// BLOCK_WOODEN_TRAPDOOR_CLOSE:Sound;
	// BLOCK_WOODEN_TRAPDOOR_OPEN:Sound;
	// BLOCK_WOOD_BREAK:Sound;
	// BLOCK_WOOD_FALL:Sound;
	// BLOCK_WOOD_HIT:Sound;
	// BLOCK_WOOD_PLACE:Sound;
	// BLOCK_WOOD_STEP:Sound;
	// BLOCK_WOOL_BREAK:Sound;
	// BLOCK_WOOL_FALL:Sound;
	// BLOCK_WOOL_HIT:Sound;
	// BLOCK_WOOL_PLACE:Sound;
	// BLOCK_WOOL_STEP:Sound;
	// ENCHANT_THORNS_HIT:Sound;
	// ENTITY_ALLAY_AMBIENT_WITHOUT_ITEM:Sound;
	// ENTITY_ALLAY_AMBIENT_WITH_ITEM:Sound;
	// ENTITY_ALLAY_DEATH:Sound;
	// ENTITY_ALLAY_HURT:Sound;
	// ENTITY_ALLAY_ITEM_GIVEN:Sound;
	// ENTITY_ALLAY_ITEM_TAKEN:Sound;
	// ENTITY_ALLAY_ITEM_THROWN:Sound;
	// ENTITY_ARMOR_STAND_BREAK:Sound;
	// ENTITY_ARMOR_STAND_FALL:Sound;
	// ENTITY_ARMOR_STAND_HIT:Sound;
	// ENTITY_ARMOR_STAND_PLACE:Sound;
	// ENTITY_ARROW_HIT:Sound;
	// ENTITY_ARROW_HIT_PLAYER:Sound;
	// ENTITY_ARROW_SHOOT:Sound;
	// ENTITY_AXOLOTL_ATTACK:Sound;
	// ENTITY_AXOLOTL_DEATH:Sound;
	// ENTITY_AXOLOTL_HURT:Sound;
	// ENTITY_AXOLOTL_IDLE_AIR:Sound;
	// ENTITY_AXOLOTL_IDLE_WATER:Sound;
	// ENTITY_AXOLOTL_SPLASH:Sound;
	// ENTITY_AXOLOTL_SWIM:Sound;
	// ENTITY_BAT_AMBIENT:Sound;
	// ENTITY_BAT_DEATH:Sound;
	// ENTITY_BAT_HURT:Sound;
	// ENTITY_BAT_LOOP:Sound;
	// ENTITY_BAT_TAKEOFF:Sound;
	// ENTITY_BEE_DEATH:Sound;
	// ENTITY_BEE_HURT:Sound;
	// ENTITY_BEE_LOOP:Sound;
	// ENTITY_BEE_LOOP_AGGRESSIVE:Sound;
	// ENTITY_BEE_POLLINATE:Sound;
	// ENTITY_BEE_STING:Sound;
	// ENTITY_BLAZE_AMBIENT:Sound;
	// ENTITY_BLAZE_BURN:Sound;
	// ENTITY_BLAZE_DEATH:Sound;
	// ENTITY_BLAZE_HURT:Sound;
	// ENTITY_BLAZE_SHOOT:Sound;
	// ENTITY_BOAT_PADDLE_LAND:Sound;
	// ENTITY_BOAT_PADDLE_WATER:Sound;
	// ENTITY_CAMEL_AMBIENT:Sound;
	// ENTITY_CAMEL_DASH:Sound;
	// ENTITY_CAMEL_DASH_READY:Sound;
	// ENTITY_CAMEL_DEATH:Sound;
	// ENTITY_CAMEL_EAT:Sound;
	// ENTITY_CAMEL_HURT:Sound;
	// ENTITY_CAMEL_SADDLE:Sound;
	// ENTITY_CAMEL_SIT:Sound;
	// ENTITY_CAMEL_STAND:Sound;
	// ENTITY_CAMEL_STEP:Sound;
	// ENTITY_CAMEL_STEP_SAND:Sound;
	// ENTITY_CAT_AMBIENT:Sound;
	// ENTITY_CAT_BEG_FOR_FOOD:Sound;
	// ENTITY_CAT_DEATH:Sound;
	// ENTITY_CAT_EAT:Sound;
	// ENTITY_CAT_HISS:Sound;
	// ENTITY_CAT_HURT:Sound;
	// ENTITY_CAT_PURR:Sound;
	// ENTITY_CAT_PURREOW:Sound;
	// ENTITY_CAT_STRAY_AMBIENT:Sound;
	// ENTITY_CHICKEN_AMBIENT:Sound;
	// ENTITY_CHICKEN_DEATH:Sound;
	// ENTITY_CHICKEN_EGG:Sound;
	// ENTITY_CHICKEN_HURT:Sound;
	// ENTITY_CHICKEN_STEP:Sound;
	// ENTITY_COD_AMBIENT:Sound;
	// ENTITY_COD_DEATH:Sound;
	// ENTITY_COD_FLOP:Sound;
	// ENTITY_COD_HURT:Sound;
	// ENTITY_COW_AMBIENT:Sound;
	// ENTITY_COW_DEATH:Sound;
	// ENTITY_COW_HURT:Sound;
	// ENTITY_COW_MILK:Sound;
	// ENTITY_COW_STEP:Sound;
	// ENTITY_CREEPER_DEATH:Sound;
	// ENTITY_CREEPER_HURT:Sound;
	// ENTITY_CREEPER_PRIMED:Sound;
	// ENTITY_DOLPHIN_AMBIENT:Sound;
	// ENTITY_DOLPHIN_AMBIENT_WATER:Sound;
	// ENTITY_DOLPHIN_ATTACK:Sound;
	// ENTITY_DOLPHIN_DEATH:Sound;
	// ENTITY_DOLPHIN_EAT:Sound;
	// ENTITY_DOLPHIN_HURT:Sound;
	// ENTITY_DOLPHIN_JUMP:Sound;
	// ENTITY_DOLPHIN_PLAY:Sound;
	// ENTITY_DOLPHIN_SPLASH:Sound;
	// ENTITY_DOLPHIN_SWIM:Sound;
	// ENTITY_DONKEY_AMBIENT:Sound;
	// ENTITY_DONKEY_ANGRY:Sound;
	// ENTITY_DONKEY_CHEST:Sound;
	// ENTITY_DONKEY_DEATH:Sound;
	// ENTITY_DONKEY_EAT:Sound;
	// ENTITY_DONKEY_HURT:Sound;
	// ENTITY_DRAGON_FIREBALL_EXPLODE:Sound;
	// ENTITY_DROWNED_AMBIENT:Sound;
	// ENTITY_DROWNED_AMBIENT_WATER:Sound;
	// ENTITY_DROWNED_DEATH:Sound;
	// ENTITY_DROWNED_DEATH_WATER:Sound;
	// ENTITY_DROWNED_HURT:Sound;
	// ENTITY_DROWNED_HURT_WATER:Sound;
	// ENTITY_DROWNED_SHOOT:Sound;
	// ENTITY_DROWNED_STEP:Sound;
	// ENTITY_DROWNED_SWIM:Sound;
	// ENTITY_EGG_THROW:Sound;
	// ENTITY_ELDER_GUARDIAN_AMBIENT:Sound;
	// ENTITY_ELDER_GUARDIAN_AMBIENT_LAND:Sound;
	// ENTITY_ELDER_GUARDIAN_CURSE:Sound;
	// ENTITY_ELDER_GUARDIAN_DEATH:Sound;
	// ENTITY_ELDER_GUARDIAN_DEATH_LAND:Sound;
	// ENTITY_ELDER_GUARDIAN_FLOP:Sound;
	// ENTITY_ELDER_GUARDIAN_HURT:Sound;
	// ENTITY_ELDER_GUARDIAN_HURT_LAND:Sound;
	// ENTITY_ENDERMAN_AMBIENT:Sound;
	// ENTITY_ENDERMAN_DEATH:Sound;
	// ENTITY_ENDERMAN_HURT:Sound;
	// ENTITY_ENDERMAN_SCREAM:Sound;
	// ENTITY_ENDERMAN_STARE:Sound;
	// ENTITY_ENDERMAN_TELEPORT:Sound;
	// ENTITY_ENDERMITE_AMBIENT:Sound;
	// ENTITY_ENDERMITE_DEATH:Sound;
	// ENTITY_ENDERMITE_HURT:Sound;
	// ENTITY_ENDERMITE_STEP:Sound;
	// ENTITY_ENDER_DRAGON_AMBIENT:Sound;
	// ENTITY_ENDER_DRAGON_DEATH:Sound;
	// ENTITY_ENDER_DRAGON_FLAP:Sound;
	// ENTITY_ENDER_DRAGON_GROWL:Sound;
	// ENTITY_ENDER_DRAGON_HURT:Sound;
	// ENTITY_ENDER_DRAGON_SHOOT:Sound;
	// ENTITY_ENDER_EYE_DEATH:Sound;
	// ENTITY_ENDER_EYE_LAUNCH:Sound;
	// ENTITY_ENDER_PEARL_THROW:Sound;
	// ENTITY_EVOKER_AMBIENT:Sound;
	// ENTITY_EVOKER_CAST_SPELL:Sound;
	// ENTITY_EVOKER_CELEBRATE:Sound;
	// ENTITY_EVOKER_DEATH:Sound;
	// ENTITY_EVOKER_FANGS_ATTACK:Sound;
	// ENTITY_EVOKER_HURT:Sound;
	// ENTITY_EVOKER_PREPARE_ATTACK:Sound;
	// ENTITY_EVOKER_PREPARE_SUMMON:Sound;
	// ENTITY_EVOKER_PREPARE_WOLOLO:Sound;
	// ENTITY_EXPERIENCE_BOTTLE_THROW:Sound;
	// ENTITY_EXPERIENCE_ORB_PICKUP:Sound;
	// ENTITY_FIREWORK_ROCKET_BLAST:Sound;
	// ENTITY_FIREWORK_ROCKET_BLAST_FAR:Sound;
	// ENTITY_FIREWORK_ROCKET_LARGE_BLAST:Sound;
	// ENTITY_FIREWORK_ROCKET_LARGE_BLAST_FAR:Sound;
	// ENTITY_FIREWORK_ROCKET_LAUNCH:Sound;
	// ENTITY_FIREWORK_ROCKET_SHOOT:Sound;
	// ENTITY_FIREWORK_ROCKET_TWINKLE:Sound;
	// ENTITY_FIREWORK_ROCKET_TWINKLE_FAR:Sound;
	// ENTITY_FISHING_BOBBER_RETRIEVE:Sound;
	// ENTITY_FISHING_BOBBER_SPLASH:Sound;
	// ENTITY_FISHING_BOBBER_THROW:Sound;
	// ENTITY_FISH_SWIM:Sound;
	// ENTITY_FOX_AGGRO:Sound;
	// ENTITY_FOX_AMBIENT:Sound;
	// ENTITY_FOX_BITE:Sound;
	// ENTITY_FOX_DEATH:Sound;
	// ENTITY_FOX_EAT:Sound;
	// ENTITY_FOX_HURT:Sound;
	// ENTITY_FOX_SCREECH:Sound;
	// ENTITY_FOX_SLEEP:Sound;
	// ENTITY_FOX_SNIFF:Sound;
	// ENTITY_FOX_SPIT:Sound;
	// ENTITY_FOX_TELEPORT:Sound;
	// ENTITY_FROG_AMBIENT:Sound;
	// ENTITY_FROG_DEATH:Sound;
	// ENTITY_FROG_EAT:Sound;
	// ENTITY_FROG_HURT:Sound;
	// ENTITY_FROG_LAY_SPAWN:Sound;
	// ENTITY_FROG_LONG_JUMP:Sound;
	// ENTITY_FROG_STEP:Sound;
	// ENTITY_FROG_TONGUE:Sound;
	// ENTITY_GENERIC_BIG_FALL:Sound;
	// ENTITY_GENERIC_BURN:Sound;
	// ENTITY_GENERIC_DEATH:Sound;
	// ENTITY_GENERIC_DRINK:Sound;
	// ENTITY_GENERIC_EAT:Sound;
	// ENTITY_GENERIC_EXPLODE:Sound;
	// ENTITY_GENERIC_EXTINGUISH_FIRE:Sound;
	// ENTITY_GENERIC_HURT:Sound;
	// ENTITY_GENERIC_SMALL_FALL:Sound;
	// ENTITY_GENERIC_SPLASH:Sound;
	// ENTITY_GENERIC_SWIM:Sound;
	// ENTITY_GHAST_AMBIENT:Sound;
	// ENTITY_GHAST_DEATH:Sound;
	// ENTITY_GHAST_HURT:Sound;
	// ENTITY_GHAST_SCREAM:Sound;
	// ENTITY_GHAST_SHOOT:Sound;
	// ENTITY_GHAST_WARN:Sound;
	// ENTITY_GLOW_ITEM_FRAME_ADD_ITEM:Sound;
	// ENTITY_GLOW_ITEM_FRAME_BREAK:Sound;
	// ENTITY_GLOW_ITEM_FRAME_PLACE:Sound;
	// ENTITY_GLOW_ITEM_FRAME_REMOVE_ITEM:Sound;
	// ENTITY_GLOW_ITEM_FRAME_ROTATE_ITEM:Sound;
	// ENTITY_GLOW_SQUID_AMBIENT:Sound;
	// ENTITY_GLOW_SQUID_DEATH:Sound;
	// ENTITY_GLOW_SQUID_HURT:Sound;
	// ENTITY_GLOW_SQUID_SQUIRT:Sound;
	// ENTITY_GOAT_AMBIENT:Sound;
	// ENTITY_GOAT_DEATH:Sound;
	// ENTITY_GOAT_EAT:Sound;
	// ENTITY_GOAT_HORN_BREAK:Sound;
	// ENTITY_GOAT_HURT:Sound;
	// ENTITY_GOAT_LONG_JUMP:Sound;
	// ENTITY_GOAT_MILK:Sound;
	// ENTITY_GOAT_PREPARE_RAM:Sound;
	// ENTITY_GOAT_RAM_IMPACT:Sound;
	// ENTITY_GOAT_SCREAMING_AMBIENT:Sound;
	// ENTITY_GOAT_SCREAMING_DEATH:Sound;
	// ENTITY_GOAT_SCREAMING_EAT:Sound;
	// ENTITY_GOAT_SCREAMING_HORN_BREAK:Sound;
	// ENTITY_GOAT_SCREAMING_HURT:Sound;
	// ENTITY_GOAT_SCREAMING_LONG_JUMP:Sound;
	// ENTITY_GOAT_SCREAMING_MILK:Sound;
	// ENTITY_GOAT_SCREAMING_PREPARE_RAM:Sound;
	// ENTITY_GOAT_SCREAMING_RAM_IMPACT:Sound;
	// ENTITY_GOAT_STEP:Sound;
	// ENTITY_GUARDIAN_AMBIENT:Sound;
	// ENTITY_GUARDIAN_AMBIENT_LAND:Sound;
	// ENTITY_GUARDIAN_ATTACK:Sound;
	// ENTITY_GUARDIAN_DEATH:Sound;
	// ENTITY_GUARDIAN_DEATH_LAND:Sound;
	// ENTITY_GUARDIAN_FLOP:Sound;
	// ENTITY_GUARDIAN_HURT:Sound;
	// ENTITY_GUARDIAN_HURT_LAND:Sound;
	// ENTITY_HOGLIN_AMBIENT:Sound;
	// ENTITY_HOGLIN_ANGRY:Sound;
	// ENTITY_HOGLIN_ATTACK:Sound;
	// ENTITY_HOGLIN_CONVERTED_TO_ZOMBIFIED:Sound;
	// ENTITY_HOGLIN_DEATH:Sound;
	// ENTITY_HOGLIN_HURT:Sound;
	// ENTITY_HOGLIN_RETREAT:Sound;
	// ENTITY_HOGLIN_STEP:Sound;
	// ENTITY_HORSE_AMBIENT:Sound;
	// ENTITY_HORSE_ANGRY:Sound;
	// ENTITY_HORSE_ARMOR:Sound;
	// ENTITY_HORSE_BREATHE:Sound;
	// ENTITY_HORSE_DEATH:Sound;
	// ENTITY_HORSE_EAT:Sound;
	// ENTITY_HORSE_GALLOP:Sound;
	// ENTITY_HORSE_HURT:Sound;
	// ENTITY_HORSE_JUMP:Sound;
	// ENTITY_HORSE_LAND:Sound;
	// ENTITY_HORSE_SADDLE:Sound;
	// ENTITY_HORSE_STEP:Sound;
	// ENTITY_HORSE_STEP_WOOD:Sound;
	// ENTITY_HOSTILE_BIG_FALL:Sound;
	// ENTITY_HOSTILE_DEATH:Sound;
	// ENTITY_HOSTILE_HURT:Sound;
	// ENTITY_HOSTILE_SMALL_FALL:Sound;
	// ENTITY_HOSTILE_SPLASH:Sound;
	// ENTITY_HOSTILE_SWIM:Sound;
	// ENTITY_HUSK_AMBIENT:Sound;
	// ENTITY_HUSK_CONVERTED_TO_ZOMBIE:Sound;
	// ENTITY_HUSK_DEATH:Sound;
	// ENTITY_HUSK_HURT:Sound;
	// ENTITY_HUSK_STEP:Sound;
	// ENTITY_ILLUSIONER_AMBIENT:Sound;
	// ENTITY_ILLUSIONER_CAST_SPELL:Sound;
	// ENTITY_ILLUSIONER_DEATH:Sound;
	// ENTITY_ILLUSIONER_HURT:Sound;
	// ENTITY_ILLUSIONER_MIRROR_MOVE:Sound;
	// ENTITY_ILLUSIONER_PREPARE_BLINDNESS:Sound;
	// ENTITY_ILLUSIONER_PREPARE_MIRROR:Sound;
	// ENTITY_IRON_GOLEM_ATTACK:Sound;
	// ENTITY_IRON_GOLEM_DAMAGE:Sound;
	// ENTITY_IRON_GOLEM_DEATH:Sound;
	// ENTITY_IRON_GOLEM_HURT:Sound;
	// ENTITY_IRON_GOLEM_REPAIR:Sound;
	// ENTITY_IRON_GOLEM_STEP:Sound;
	// ENTITY_ITEM_BREAK:Sound;
	// ENTITY_ITEM_FRAME_ADD_ITEM:Sound;
	// ENTITY_ITEM_FRAME_BREAK:Sound;
	// ENTITY_ITEM_FRAME_PLACE:Sound;
	// ENTITY_ITEM_FRAME_REMOVE_ITEM:Sound;
	// ENTITY_ITEM_FRAME_ROTATE_ITEM:Sound;
	// ENTITY_ITEM_PICKUP:Sound;
	// ENTITY_LEASH_KNOT_BREAK:Sound;
	// ENTITY_LEASH_KNOT_PLACE:Sound;
	// ENTITY_LIGHTNING_BOLT_IMPACT:Sound;
	// ENTITY_LIGHTNING_BOLT_THUNDER:Sound;
	// ENTITY_LINGERING_POTION_THROW:Sound;
	// ENTITY_LLAMA_AMBIENT:Sound;
	// ENTITY_LLAMA_ANGRY:Sound;
	// ENTITY_LLAMA_CHEST:Sound;
	// ENTITY_LLAMA_DEATH:Sound;
	// ENTITY_LLAMA_EAT:Sound;
	// ENTITY_LLAMA_HURT:Sound;
	// ENTITY_LLAMA_SPIT:Sound;
	// ENTITY_LLAMA_STEP:Sound;
	// ENTITY_LLAMA_SWAG:Sound;
	// ENTITY_MAGMA_CUBE_DEATH:Sound;
	// ENTITY_MAGMA_CUBE_DEATH_SMALL:Sound;
	// ENTITY_MAGMA_CUBE_HURT:Sound;
	// ENTITY_MAGMA_CUBE_HURT_SMALL:Sound;
	// ENTITY_MAGMA_CUBE_JUMP:Sound;
	// ENTITY_MAGMA_CUBE_SQUISH:Sound;
	// ENTITY_MAGMA_CUBE_SQUISH_SMALL:Sound;
	// ENTITY_MINECART_INSIDE:Sound;
	// ENTITY_MINECART_INSIDE_UNDERWATER:Sound;
	// ENTITY_MINECART_RIDING:Sound;
	// ENTITY_MOOSHROOM_CONVERT:Sound;
	// ENTITY_MOOSHROOM_EAT:Sound;
	// ENTITY_MOOSHROOM_MILK:Sound;
	// ENTITY_MOOSHROOM_SHEAR:Sound;
	// ENTITY_MOOSHROOM_SUSPICIOUS_MILK:Sound;
	// ENTITY_MULE_AMBIENT:Sound;
	// ENTITY_MULE_ANGRY:Sound;
	// ENTITY_MULE_CHEST:Sound;
	// ENTITY_MULE_DEATH:Sound;
	// ENTITY_MULE_EAT:Sound;
	// ENTITY_MULE_HURT:Sound;
	// ENTITY_OCELOT_AMBIENT:Sound;
	// ENTITY_OCELOT_DEATH:Sound;
	// ENTITY_OCELOT_HURT:Sound;
	// ENTITY_PAINTING_BREAK:Sound;
	// ENTITY_PAINTING_PLACE:Sound;
	// ENTITY_PANDA_AGGRESSIVE_AMBIENT:Sound;
	// ENTITY_PANDA_AMBIENT:Sound;
	// ENTITY_PANDA_BITE:Sound;
	// ENTITY_PANDA_CANT_BREED:Sound;
	// ENTITY_PANDA_DEATH:Sound;
	// ENTITY_PANDA_EAT:Sound;
	// ENTITY_PANDA_HURT:Sound;
	// ENTITY_PANDA_PRE_SNEEZE:Sound;
	// ENTITY_PANDA_SNEEZE:Sound;
	// ENTITY_PANDA_STEP:Sound;
	// ENTITY_PANDA_WORRIED_AMBIENT:Sound;
	// ENTITY_PARROT_AMBIENT:Sound;
	// ENTITY_PARROT_DEATH:Sound;
	// ENTITY_PARROT_EAT:Sound;
	// ENTITY_PARROT_FLY:Sound;
	// ENTITY_PARROT_HURT:Sound;
	// ENTITY_PARROT_IMITATE_BLAZE:Sound;
	// ENTITY_PARROT_IMITATE_CREEPER:Sound;
	// ENTITY_PARROT_IMITATE_DROWNED:Sound;
	// ENTITY_PARROT_IMITATE_ELDER_GUARDIAN:Sound;
	// ENTITY_PARROT_IMITATE_ENDERMITE:Sound;
	// ENTITY_PARROT_IMITATE_ENDER_DRAGON:Sound;
	// ENTITY_PARROT_IMITATE_EVOKER:Sound;
	// ENTITY_PARROT_IMITATE_GHAST:Sound;
	// ENTITY_PARROT_IMITATE_GUARDIAN:Sound;
	// ENTITY_PARROT_IMITATE_HOGLIN:Sound;
	// ENTITY_PARROT_IMITATE_HUSK:Sound;
	// ENTITY_PARROT_IMITATE_ILLUSIONER:Sound;
	// ENTITY_PARROT_IMITATE_MAGMA_CUBE:Sound;
	// ENTITY_PARROT_IMITATE_PHANTOM:Sound;
	// ENTITY_PARROT_IMITATE_PIGLIN:Sound;
	// ENTITY_PARROT_IMITATE_PIGLIN_BRUTE:Sound;
	// ENTITY_PARROT_IMITATE_PILLAGER:Sound;
	// ENTITY_PARROT_IMITATE_RAVAGER:Sound;
	// ENTITY_PARROT_IMITATE_SHULKER:Sound;
	// ENTITY_PARROT_IMITATE_SILVERFISH:Sound;
	// ENTITY_PARROT_IMITATE_SKELETON:Sound;
	// ENTITY_PARROT_IMITATE_SLIME:Sound;
	// ENTITY_PARROT_IMITATE_SPIDER:Sound;
	// ENTITY_PARROT_IMITATE_STRAY:Sound;
	// ENTITY_PARROT_IMITATE_VEX:Sound;
	// ENTITY_PARROT_IMITATE_VINDICATOR:Sound;
	// ENTITY_PARROT_IMITATE_WARDEN:Sound;
	// ENTITY_PARROT_IMITATE_WITCH:Sound;
	// ENTITY_PARROT_IMITATE_WITHER:Sound;
	// ENTITY_PARROT_IMITATE_WITHER_SKELETON:Sound;
	// ENTITY_PARROT_IMITATE_ZOGLIN:Sound;
	// ENTITY_PARROT_IMITATE_ZOMBIE:Sound;
	// ENTITY_PARROT_IMITATE_ZOMBIE_VILLAGER:Sound;
	// ENTITY_PARROT_STEP:Sound;
	// ENTITY_PHANTOM_AMBIENT:Sound;
	// ENTITY_PHANTOM_BITE:Sound;
	// ENTITY_PHANTOM_DEATH:Sound;
	// ENTITY_PHANTOM_FLAP:Sound;
	// ENTITY_PHANTOM_HURT:Sound;
	// ENTITY_PHANTOM_SWOOP:Sound;
	// ENTITY_PIGLIN_ADMIRING_ITEM:Sound;
	// ENTITY_PIGLIN_AMBIENT:Sound;
	// ENTITY_PIGLIN_ANGRY:Sound;
	// ENTITY_PIGLIN_BRUTE_AMBIENT:Sound;
	// ENTITY_PIGLIN_BRUTE_ANGRY:Sound;
	// ENTITY_PIGLIN_BRUTE_CONVERTED_TO_ZOMBIFIED:Sound;
	// ENTITY_PIGLIN_BRUTE_DEATH:Sound;
	// ENTITY_PIGLIN_BRUTE_HURT:Sound;
	// ENTITY_PIGLIN_BRUTE_STEP:Sound;
	// ENTITY_PIGLIN_CELEBRATE:Sound;
	// ENTITY_PIGLIN_CONVERTED_TO_ZOMBIFIED:Sound;
	// ENTITY_PIGLIN_DEATH:Sound;
	// ENTITY_PIGLIN_HURT:Sound;
	// ENTITY_PIGLIN_JEALOUS:Sound;
	// ENTITY_PIGLIN_RETREAT:Sound;
	// ENTITY_PIGLIN_STEP:Sound;
	// ENTITY_PIG_AMBIENT:Sound;
	// ENTITY_PIG_DEATH:Sound;
	// ENTITY_PIG_HURT:Sound;
	// ENTITY_PIG_SADDLE:Sound;
	// ENTITY_PIG_STEP:Sound;
	// ENTITY_PILLAGER_AMBIENT:Sound;
	// ENTITY_PILLAGER_CELEBRATE:Sound;
	// ENTITY_PILLAGER_DEATH:Sound;
	// ENTITY_PILLAGER_HURT:Sound;
	// ENTITY_PLAYER_ATTACK_CRIT:Sound;
	// ENTITY_PLAYER_ATTACK_KNOCKBACK:Sound;
	// ENTITY_PLAYER_ATTACK_NODAMAGE:Sound;
	// ENTITY_PLAYER_ATTACK_STRONG:Sound;
	// ENTITY_PLAYER_ATTACK_SWEEP:Sound;
	// ENTITY_PLAYER_ATTACK_WEAK:Sound;
	// ENTITY_PLAYER_BIG_FALL:Sound;
	// ENTITY_PLAYER_BREATH:Sound;
	// ENTITY_PLAYER_BURP:Sound;
	// ENTITY_PLAYER_DEATH:Sound;
	// ENTITY_PLAYER_HURT:Sound;
	// ENTITY_PLAYER_HURT_DROWN:Sound;
	// ENTITY_PLAYER_HURT_FREEZE:Sound;
	// ENTITY_PLAYER_HURT_ON_FIRE:Sound;
	// ENTITY_PLAYER_HURT_SWEET_BERRY_BUSH:Sound;
	// ENTITY_PLAYER_LEVELUP:Sound;
	// ENTITY_PLAYER_SMALL_FALL:Sound;
	// ENTITY_PLAYER_SPLASH:Sound;
	// ENTITY_PLAYER_SPLASH_HIGH_SPEED:Sound;
	// ENTITY_PLAYER_SWIM:Sound;
	// ENTITY_POLAR_BEAR_AMBIENT:Sound;
	// ENTITY_POLAR_BEAR_AMBIENT_BABY:Sound;
	// ENTITY_POLAR_BEAR_DEATH:Sound;
	// ENTITY_POLAR_BEAR_HURT:Sound;
	// ENTITY_POLAR_BEAR_STEP:Sound;
	// ENTITY_POLAR_BEAR_WARNING:Sound;
	// ENTITY_PUFFER_FISH_AMBIENT:Sound;
	// ENTITY_PUFFER_FISH_BLOW_OUT:Sound;
	// ENTITY_PUFFER_FISH_BLOW_UP:Sound;
	// ENTITY_PUFFER_FISH_DEATH:Sound;
	// ENTITY_PUFFER_FISH_FLOP:Sound;
	// ENTITY_PUFFER_FISH_HURT:Sound;
	// ENTITY_PUFFER_FISH_STING:Sound;
	// ENTITY_RABBIT_AMBIENT:Sound;
	// ENTITY_RABBIT_ATTACK:Sound;
	// ENTITY_RABBIT_DEATH:Sound;
	// ENTITY_RABBIT_HURT:Sound;
	// ENTITY_RABBIT_JUMP:Sound;
	// ENTITY_RAVAGER_AMBIENT:Sound;
	// ENTITY_RAVAGER_ATTACK:Sound;
	// ENTITY_RAVAGER_CELEBRATE:Sound;
	// ENTITY_RAVAGER_DEATH:Sound;
	// ENTITY_RAVAGER_HURT:Sound;
	// ENTITY_RAVAGER_ROAR:Sound;
	// ENTITY_RAVAGER_STEP:Sound;
	// ENTITY_RAVAGER_STUNNED:Sound;
	// ENTITY_SALMON_AMBIENT:Sound;
	// ENTITY_SALMON_DEATH:Sound;
	// ENTITY_SALMON_FLOP:Sound;
	// ENTITY_SALMON_HURT:Sound;
	// ENTITY_SHEEP_AMBIENT:Sound;
	// ENTITY_SHEEP_DEATH:Sound;
	// ENTITY_SHEEP_HURT:Sound;
	// ENTITY_SHEEP_SHEAR:Sound;
	// ENTITY_SHEEP_STEP:Sound;
	// ENTITY_SHULKER_AMBIENT:Sound;
	// ENTITY_SHULKER_BULLET_HIT:Sound;
	// ENTITY_SHULKER_BULLET_HURT:Sound;
	// ENTITY_SHULKER_CLOSE:Sound;
	// ENTITY_SHULKER_DEATH:Sound;
	// ENTITY_SHULKER_HURT:Sound;
	// ENTITY_SHULKER_HURT_CLOSED:Sound;
	// ENTITY_SHULKER_OPEN:Sound;
	// ENTITY_SHULKER_SHOOT:Sound;
	// ENTITY_SHULKER_TELEPORT:Sound;
	// ENTITY_SILVERFISH_AMBIENT:Sound;
	// ENTITY_SILVERFISH_DEATH:Sound;
	// ENTITY_SILVERFISH_HURT:Sound;
	// ENTITY_SILVERFISH_STEP:Sound;
	// ENTITY_SKELETON_AMBIENT:Sound;
	// ENTITY_SKELETON_CONVERTED_TO_STRAY:Sound;
	// ENTITY_SKELETON_DEATH:Sound;
	// ENTITY_SKELETON_HORSE_AMBIENT:Sound;
	// ENTITY_SKELETON_HORSE_AMBIENT_WATER:Sound;
	// ENTITY_SKELETON_HORSE_DEATH:Sound;
	// ENTITY_SKELETON_HORSE_GALLOP_WATER:Sound;
	// ENTITY_SKELETON_HORSE_HURT:Sound;
	// ENTITY_SKELETON_HORSE_JUMP_WATER:Sound;
	// ENTITY_SKELETON_HORSE_STEP_WATER:Sound;
	// ENTITY_SKELETON_HORSE_SWIM:Sound;
	// ENTITY_SKELETON_HURT:Sound;
	// ENTITY_SKELETON_SHOOT:Sound;
	// ENTITY_SKELETON_STEP:Sound;
	// ENTITY_SLIME_ATTACK:Sound;
	// ENTITY_SLIME_DEATH:Sound;
	// ENTITY_SLIME_DEATH_SMALL:Sound;
	// ENTITY_SLIME_HURT:Sound;
	// ENTITY_SLIME_HURT_SMALL:Sound;
	// ENTITY_SLIME_JUMP:Sound;
	// ENTITY_SLIME_JUMP_SMALL:Sound;
	// ENTITY_SLIME_SQUISH:Sound;
	// ENTITY_SLIME_SQUISH_SMALL:Sound;
	// ENTITY_SNIFFER_DEATH:Sound;
	// ENTITY_SNIFFER_DIGGING:Sound;
	// ENTITY_SNIFFER_DIGGING_STOP:Sound;
	// ENTITY_SNIFFER_DROP_SEED:Sound;
	// ENTITY_SNIFFER_EAT:Sound;
	// ENTITY_SNIFFER_HAPPY:Sound;
	// ENTITY_SNIFFER_HURT:Sound;
	// ENTITY_SNIFFER_IDLE:Sound;
	// ENTITY_SNIFFER_SCENTING:Sound;
	// ENTITY_SNIFFER_SEARCHING:Sound;
	// ENTITY_SNIFFER_SNIFFING:Sound;
	// ENTITY_SNIFFER_STEP:Sound;
	// ENTITY_SNOWBALL_THROW:Sound;
	// ENTITY_SNOW_GOLEM_AMBIENT:Sound;
	// ENTITY_SNOW_GOLEM_DEATH:Sound;
	// ENTITY_SNOW_GOLEM_HURT:Sound;
	// ENTITY_SNOW_GOLEM_SHEAR:Sound;
	// ENTITY_SNOW_GOLEM_SHOOT:Sound;
	// ENTITY_SPIDER_AMBIENT:Sound;
	// ENTITY_SPIDER_DEATH:Sound;
	// ENTITY_SPIDER_HURT:Sound;
	// ENTITY_SPIDER_STEP:Sound;
	// ENTITY_SPLASH_POTION_BREAK:Sound;
	// ENTITY_SPLASH_POTION_THROW:Sound;
	// ENTITY_SQUID_AMBIENT:Sound;
	// ENTITY_SQUID_DEATH:Sound;
	// ENTITY_SQUID_HURT:Sound;
	// ENTITY_SQUID_SQUIRT:Sound;
	// ENTITY_STRAY_AMBIENT:Sound;
	// ENTITY_STRAY_DEATH:Sound;
	// ENTITY_STRAY_HURT:Sound;
	// ENTITY_STRAY_STEP:Sound;
	// ENTITY_STRIDER_AMBIENT:Sound;
	// ENTITY_STRIDER_DEATH:Sound;
	// ENTITY_STRIDER_EAT:Sound;
	// ENTITY_STRIDER_HAPPY:Sound;
	// ENTITY_STRIDER_HURT:Sound;
	// ENTITY_STRIDER_RETREAT:Sound;
	// ENTITY_STRIDER_SADDLE:Sound;
	// ENTITY_STRIDER_STEP:Sound;
	// ENTITY_STRIDER_STEP_LAVA:Sound;
	// ENTITY_TADPOLE_DEATH:Sound;
	// ENTITY_TADPOLE_FLOP:Sound;
	// ENTITY_TADPOLE_GROW_UP:Sound;
	// ENTITY_TADPOLE_HURT:Sound;
	// ENTITY_TNT_PRIMED:Sound;
	// ENTITY_TROPICAL_FISH_AMBIENT:Sound;
	// ENTITY_TROPICAL_FISH_DEATH:Sound;
	// ENTITY_TROPICAL_FISH_FLOP:Sound;
	// ENTITY_TROPICAL_FISH_HURT:Sound;
	// ENTITY_TURTLE_AMBIENT_LAND:Sound;
	// ENTITY_TURTLE_DEATH:Sound;
	// ENTITY_TURTLE_DEATH_BABY:Sound;
	// ENTITY_TURTLE_EGG_BREAK:Sound;
	// ENTITY_TURTLE_EGG_CRACK:Sound;
	// ENTITY_TURTLE_EGG_HATCH:Sound;
	// ENTITY_TURTLE_HURT:Sound;
	// ENTITY_TURTLE_HURT_BABY:Sound;
	// ENTITY_TURTLE_LAY_EGG:Sound;
	// ENTITY_TURTLE_SHAMBLE:Sound;
	// ENTITY_TURTLE_SHAMBLE_BABY:Sound;
	// ENTITY_TURTLE_SWIM:Sound;
	// ENTITY_VEX_AMBIENT:Sound;
	// ENTITY_VEX_CHARGE:Sound;
	// ENTITY_VEX_DEATH:Sound;
	// ENTITY_VEX_HURT:Sound;
	// ENTITY_VILLAGER_AMBIENT:Sound;
	// ENTITY_VILLAGER_CELEBRATE:Sound;
	// ENTITY_VILLAGER_DEATH:Sound;
	// ENTITY_VILLAGER_HURT:Sound;
	// ENTITY_VILLAGER_NO:Sound;
	// ENTITY_VILLAGER_TRADE:Sound;
	// ENTITY_VILLAGER_WORK_ARMORER:Sound;
	// ENTITY_VILLAGER_WORK_BUTCHER:Sound;
	// ENTITY_VILLAGER_WORK_CARTOGRAPHER:Sound;
	// ENTITY_VILLAGER_WORK_CLERIC:Sound;
	// ENTITY_VILLAGER_WORK_FARMER:Sound;
	// ENTITY_VILLAGER_WORK_FISHERMAN:Sound;
	// ENTITY_VILLAGER_WORK_FLETCHER:Sound;
	// ENTITY_VILLAGER_WORK_LEATHERWORKER:Sound;
	// ENTITY_VILLAGER_WORK_LIBRARIAN:Sound;
	// ENTITY_VILLAGER_WORK_MASON:Sound;
	// ENTITY_VILLAGER_WORK_SHEPHERD:Sound;
	// ENTITY_VILLAGER_WORK_TOOLSMITH:Sound;
	// ENTITY_VILLAGER_WORK_WEAPONSMITH:Sound;
	// ENTITY_VILLAGER_YES:Sound;
	// ENTITY_VINDICATOR_AMBIENT:Sound;
	// ENTITY_VINDICATOR_CELEBRATE:Sound;
	// ENTITY_VINDICATOR_DEATH:Sound;
	// ENTITY_VINDICATOR_HURT:Sound;
	// ENTITY_WANDERING_TRADER_AMBIENT:Sound;
	// ENTITY_WANDERING_TRADER_DEATH:Sound;
	// ENTITY_WANDERING_TRADER_DISAPPEARED:Sound;
	// ENTITY_WANDERING_TRADER_DRINK_MILK:Sound;
	// ENTITY_WANDERING_TRADER_DRINK_POTION:Sound;
	// ENTITY_WANDERING_TRADER_HURT:Sound;
	// ENTITY_WANDERING_TRADER_NO:Sound;
	// ENTITY_WANDERING_TRADER_REAPPEARED:Sound;
	// ENTITY_WANDERING_TRADER_TRADE:Sound;
	// ENTITY_WANDERING_TRADER_YES:Sound;
	// ENTITY_WARDEN_AGITATED:Sound;
	// ENTITY_WARDEN_AMBIENT:Sound;
	// ENTITY_WARDEN_ANGRY:Sound;
	// ENTITY_WARDEN_ATTACK_IMPACT:Sound;
	// ENTITY_WARDEN_DEATH:Sound;
	// ENTITY_WARDEN_DIG:Sound;
	// ENTITY_WARDEN_EMERGE:Sound;
	// ENTITY_WARDEN_HEARTBEAT:Sound;
	// ENTITY_WARDEN_HURT:Sound;
	// ENTITY_WARDEN_LISTENING:Sound;
	// ENTITY_WARDEN_LISTENING_ANGRY:Sound;
	// ENTITY_WARDEN_NEARBY_CLOSE:Sound;
	// ENTITY_WARDEN_NEARBY_CLOSER:Sound;
	// ENTITY_WARDEN_NEARBY_CLOSEST:Sound;
	// ENTITY_WARDEN_ROAR:Sound;
	// ENTITY_WARDEN_SNIFF:Sound;
	// ENTITY_WARDEN_SONIC_BOOM:Sound;
	// ENTITY_WARDEN_SONIC_CHARGE:Sound;
	// ENTITY_WARDEN_STEP:Sound;
	// ENTITY_WARDEN_TENDRIL_CLICKS:Sound;
	// ENTITY_WITCH_AMBIENT:Sound;
	// ENTITY_WITCH_CELEBRATE:Sound;
	// ENTITY_WITCH_DEATH:Sound;
	// ENTITY_WITCH_DRINK:Sound;
	// ENTITY_WITCH_HURT:Sound;
	// ENTITY_WITCH_THROW:Sound;
	// ENTITY_WITHER_AMBIENT:Sound;
	// ENTITY_WITHER_BREAK_BLOCK:Sound;
	// ENTITY_WITHER_DEATH:Sound;
	// ENTITY_WITHER_HURT:Sound;
	// ENTITY_WITHER_SHOOT:Sound;
	// ENTITY_WITHER_SKELETON_AMBIENT:Sound;
	// ENTITY_WITHER_SKELETON_DEATH:Sound;
	// ENTITY_WITHER_SKELETON_HURT:Sound;
	// ENTITY_WITHER_SKELETON_STEP:Sound;
	// ENTITY_WITHER_SPAWN:Sound;
	// ENTITY_WOLF_AMBIENT:Sound;
	// ENTITY_WOLF_DEATH:Sound;
	// ENTITY_WOLF_GROWL:Sound;
	// ENTITY_WOLF_HOWL:Sound;
	// ENTITY_WOLF_HURT:Sound;
	// ENTITY_WOLF_PANT:Sound;
	// ENTITY_WOLF_SHAKE:Sound;
	// ENTITY_WOLF_STEP:Sound;
	// ENTITY_WOLF_WHINE:Sound;
	// ENTITY_ZOGLIN_AMBIENT:Sound;
	// ENTITY_ZOGLIN_ANGRY:Sound;
	// ENTITY_ZOGLIN_ATTACK:Sound;
	// ENTITY_ZOGLIN_DEATH:Sound;
	// ENTITY_ZOGLIN_HURT:Sound;
	// ENTITY_ZOGLIN_STEP:Sound;
	// ENTITY_ZOMBIE_AMBIENT:Sound;
	// ENTITY_ZOMBIE_ATTACK_IRON_DOOR:Sound;
	// ENTITY_ZOMBIE_ATTACK_WOODEN_DOOR:Sound;
	// ENTITY_ZOMBIE_BREAK_WOODEN_DOOR:Sound;
	// ENTITY_ZOMBIE_CONVERTED_TO_DROWNED:Sound;
	// ENTITY_ZOMBIE_DEATH:Sound;
	// ENTITY_ZOMBIE_DESTROY_EGG:Sound;
	// ENTITY_ZOMBIE_HORSE_AMBIENT:Sound;
	// ENTITY_ZOMBIE_HORSE_DEATH:Sound;
	// ENTITY_ZOMBIE_HORSE_HURT:Sound;
	// ENTITY_ZOMBIE_HURT:Sound;
	// ENTITY_ZOMBIE_INFECT:Sound;
	// ENTITY_ZOMBIE_STEP:Sound;
	// ENTITY_ZOMBIE_VILLAGER_AMBIENT:Sound;
	// ENTITY_ZOMBIE_VILLAGER_CONVERTED:Sound;
	// ENTITY_ZOMBIE_VILLAGER_CURE:Sound;
	// ENTITY_ZOMBIE_VILLAGER_DEATH:Sound;
	// ENTITY_ZOMBIE_VILLAGER_HURT:Sound;
	// ENTITY_ZOMBIE_VILLAGER_STEP:Sound;
	// ENTITY_ZOMBIFIED_PIGLIN_AMBIENT:Sound;
	// ENTITY_ZOMBIFIED_PIGLIN_ANGRY:Sound;
	// ENTITY_ZOMBIFIED_PIGLIN_DEATH:Sound;
	// ENTITY_ZOMBIFIED_PIGLIN_HURT:Sound;
	// EVENT_RAID_HORN:Sound;
	// INTENTIONALLY_EMPTY:Sound;
	// ITEM_ARMOR_EQUIP_CHAIN:Sound;
	// ITEM_ARMOR_EQUIP_DIAMOND:Sound;
	// ITEM_ARMOR_EQUIP_ELYTRA:Sound;
	// ITEM_ARMOR_EQUIP_GENERIC:Sound;
	// ITEM_ARMOR_EQUIP_GOLD:Sound;
	// ITEM_ARMOR_EQUIP_IRON:Sound;
	// ITEM_ARMOR_EQUIP_LEATHER:Sound;
	// ITEM_ARMOR_EQUIP_NETHERITE:Sound;
	// ITEM_ARMOR_EQUIP_TURTLE:Sound;
	// ITEM_AXE_SCRAPE:Sound;
	// ITEM_AXE_STRIP:Sound;
	// ITEM_AXE_WAX_OFF:Sound;
	// ITEM_BONE_MEAL_USE:Sound;
	// ITEM_BOOK_PAGE_TURN:Sound;
	// ITEM_BOOK_PUT:Sound;
	// ITEM_BOTTLE_EMPTY:Sound;
	// ITEM_BOTTLE_FILL:Sound;
	// ITEM_BOTTLE_FILL_DRAGONBREATH:Sound;
	// ITEM_BRUSH_BRUSHING:Sound;
	// ITEM_BRUSH_BRUSH_SAND_COMPLETED:Sound;
	// ITEM_BUCKET_EMPTY:Sound;
	// ITEM_BUCKET_EMPTY_AXOLOTL:Sound;
	// ITEM_BUCKET_EMPTY_FISH:Sound;
	// ITEM_BUCKET_EMPTY_LAVA:Sound;
	// ITEM_BUCKET_EMPTY_POWDER_SNOW:Sound;
	// ITEM_BUCKET_EMPTY_TADPOLE:Sound;
	// ITEM_BUCKET_FILL:Sound;
	// ITEM_BUCKET_FILL_AXOLOTL:Sound;
	// ITEM_BUCKET_FILL_FISH:Sound;
	// ITEM_BUCKET_FILL_LAVA:Sound;
	// ITEM_BUCKET_FILL_POWDER_SNOW:Sound;
	// ITEM_BUCKET_FILL_TADPOLE:Sound;
	// ITEM_BUNDLE_DROP_CONTENTS:Sound;
	// ITEM_BUNDLE_INSERT:Sound;
	// ITEM_BUNDLE_REMOVE_ONE:Sound;
	// ITEM_CHORUS_FRUIT_TELEPORT:Sound;
	// ITEM_CROP_PLANT:Sound;
	// ITEM_CROSSBOW_HIT:Sound;
	// ITEM_CROSSBOW_LOADING_END:Sound;
	// ITEM_CROSSBOW_LOADING_MIDDLE:Sound;
	// ITEM_CROSSBOW_LOADING_START:Sound;
	// ITEM_CROSSBOW_QUICK_CHARGE_1:Sound;
	// ITEM_CROSSBOW_QUICK_CHARGE_2:Sound;
	// ITEM_CROSSBOW_QUICK_CHARGE_3:Sound;
	// ITEM_CROSSBOW_SHOOT:Sound;
	// ITEM_DYE_USE:Sound;
	// ITEM_ELYTRA_FLYING:Sound;
	// ITEM_FIRECHARGE_USE:Sound;
	// ITEM_FLINTANDSTEEL_USE:Sound;
	// ITEM_GLOW_INK_SAC_USE:Sound;
	// ITEM_GOAT_HORN_PLAY:Sound;
	// ITEM_GOAT_HORN_SOUND_0:Sound;
	// ITEM_GOAT_HORN_SOUND_1:Sound;
	// ITEM_GOAT_HORN_SOUND_2:Sound;
	// ITEM_GOAT_HORN_SOUND_3:Sound;
	// ITEM_GOAT_HORN_SOUND_4:Sound;
	// ITEM_GOAT_HORN_SOUND_5:Sound;
	// ITEM_GOAT_HORN_SOUND_6:Sound;
	// ITEM_GOAT_HORN_SOUND_7:Sound;
	// ITEM_HOE_TILL:Sound;
	// ITEM_HONEYCOMB_WAX_ON:Sound;
	// ITEM_HONEY_BOTTLE_DRINK:Sound;
	// ITEM_INK_SAC_USE:Sound;
	// ITEM_LODESTONE_COMPASS_LOCK:Sound;
	// ITEM_NETHER_WART_PLANT:Sound;
	// ITEM_SHIELD_BLOCK:Sound;
	// ITEM_SHIELD_BREAK:Sound;
	// ITEM_SHOVEL_FLATTEN:Sound;
	// ITEM_SPYGLASS_STOP_USING:Sound;
	// ITEM_SPYGLASS_USE:Sound;
	// ITEM_TOTEM_USE:Sound;
	// ITEM_TRIDENT_HIT:Sound;
	// ITEM_TRIDENT_HIT_GROUND:Sound;
	// ITEM_TRIDENT_RETURN:Sound;
	// ITEM_TRIDENT_RIPTIDE_1:Sound;
	// ITEM_TRIDENT_RIPTIDE_2:Sound;
	// ITEM_TRIDENT_RIPTIDE_3:Sound;
	// ITEM_TRIDENT_THROW:Sound;
	// ITEM_TRIDENT_THUNDER:Sound;
	// MUSIC_CREATIVE:Sound;
	// MUSIC_CREDITS:Sound;
	// MUSIC_DISC_11:Sound;
	// MUSIC_DISC_13:Sound;
	// MUSIC_DISC_5:Sound;
	// MUSIC_DISC_BLOCKS:Sound;
	// MUSIC_DISC_CAT:Sound;
	// MUSIC_DISC_CHIRP:Sound;
	// MUSIC_DISC_FAR:Sound;
	// MUSIC_DISC_MALL:Sound;
	// MUSIC_DISC_MELLOHI:Sound;
	// MUSIC_DISC_OTHERSIDE:Sound;
	// MUSIC_DISC_PIGSTEP:Sound;
	// MUSIC_DISC_STAL:Sound;
	// MUSIC_DISC_STRAD:Sound;
	// MUSIC_DISC_WAIT:Sound;
	// MUSIC_DISC_WARD:Sound;
	// MUSIC_DRAGON:Sound;
	// MUSIC_END:Sound;
	// MUSIC_GAME:Sound;
	// MUSIC_MENU:Sound;
	// MUSIC_NETHER_BASALT_DELTAS:Sound;
	// MUSIC_NETHER_CRIMSON_FOREST:Sound;
	// MUSIC_NETHER_NETHER_WASTES:Sound;
	// MUSIC_NETHER_SOUL_SAND_VALLEY:Sound;
	// MUSIC_NETHER_WARPED_FOREST:Sound;
	// MUSIC_OVERWORLD_CHERRY_GROVE:Sound;
	// MUSIC_OVERWORLD_DEEP_DARK:Sound;
	// MUSIC_OVERWORLD_DRIPSTONE_CAVES:Sound;
	// MUSIC_OVERWORLD_FROZEN_PEAKS:Sound;
	// MUSIC_OVERWORLD_GROVE:Sound;
	// MUSIC_OVERWORLD_JAGGED_PEAKS:Sound;
	// MUSIC_OVERWORLD_JUNGLE_AND_FOREST:Sound;
	// MUSIC_OVERWORLD_LUSH_CAVES:Sound;
	// MUSIC_OVERWORLD_MEADOW:Sound;
	// MUSIC_OVERWORLD_OLD_GROWTH_TAIGA:Sound;
	// MUSIC_OVERWORLD_SNOWY_SLOPES:Sound;
	// MUSIC_OVERWORLD_STONY_PEAKS:Sound;
	// MUSIC_OVERWORLD_SWAMP:Sound;
	// MUSIC_UNDER_WATER:Sound;
	// PARTICLE_SOUL_ESCAPE:Sound;
	// UI_BUTTON_CLICK:Sound;
	// UI_CARTOGRAPHY_TABLE_TAKE_RESULT:Sound;
	// UI_LOOM_SELECT_PATTERN:Sound;
	// UI_LOOM_TAKE_RESULT:Sound;
	// UI_STONECUTTER_SELECT_RECIPE:Sound;
	// UI_STONECUTTER_TAKE_RESULT:Sound;
	// UI_TOAST_CHALLENGE_COMPLETE:Sound;
	// UI_TOAST_IN:Sound;
	// UI_TOAST_OUT:Sound;
	// WEATHER_RAIN:Sound;
	// WEATHER_RAIN_ABOVE:Sound;

	compareTo<E>( arg0:E ):int;
	describeConstable(  ):java.util.Optional<any /*java.lang.Enum$EnumDesc*/>;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	getDeclaringClass<E>(  ):java.lang.Class<E>;
	getKey(  ):any /*org.bukkit.NamespacedKey*/;
	key(  ):any /*net.kyori.adventure.key.Key*/;
	name(  ):string;
	ordinal(  ):int;
	toString(  ):string;

} // end Sound

} // end namespace org.bukkit
declare namespace org.bukkit {

class Bukkit/* extends java.lang.Object*/ {

	equals( arg0:any /*java.lang.Object*/ ):boolean;
	toString(  ):string;

} // end Bukkit

} // end namespace org.bukkit
declare namespace org.bukkit {

class Location/* extends java.lang.Object implements java.lang.Cloneable, org.bukkit.configuration.serialization.ConfigurationSerializable, io.papermc.paper.math.FinePosition*/ {

	add( arg0:Location ):Location;
	add( arg0:Location, arg1:double, arg2:double, arg3:double ):Location;
	add( arg0:any /*org.bukkit.util.Vector*/ ):Location;
	add( arg0:double, arg1:double, arg2:double ):Location;
	blockX(  ):int;
	blockY(  ):int;
	blockZ(  ):int;
	checkFinite(  ):void;
	clone(  ):Location;
	createExplosion( arg0:float ):boolean;
	createExplosion( arg0:float, arg1:boolean ):boolean;
	createExplosion( arg0:float, arg1:boolean, arg2:boolean ):boolean;
	createExplosion( arg0:org.bukkit.entity.Entity, arg1:float ):boolean;
	createExplosion( arg0:org.bukkit.entity.Entity, arg1:float, arg2:boolean ):boolean;
	createExplosion( arg0:org.bukkit.entity.Entity, arg1:float, arg2:boolean, arg3:boolean ):boolean;
	distance( arg0:Location ):double;
	distanceSquared( arg0:Location ):double;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	getBlock(  ):org.bukkit.block.Block;
	getBlockX(  ):int;
	getBlockY(  ):int;
	getBlockZ(  ):int;
	getChunk(  ):any /*org.bukkit.Chunk*/;
	getDirection(  ):any /*org.bukkit.util.Vector*/;
	getNearbyEntities( arg0:double, arg1:double, arg2:double ):java.util.Collection<org.bukkit.entity.Entity>;
	getNearbyEntitiesByType<T>( arg0:java.lang.Class<T>, arg1:double ):java.util.Collection<T>;
	getNearbyEntitiesByType<T>( arg0:java.lang.Class<T>, arg1:double, arg2:Predicate<T> ):java.util.Collection<T>;
	getNearbyEntitiesByType<T>( arg0:java.lang.Class<T>, arg1:double, arg2:double ):java.util.Collection<T>;
	getNearbyEntitiesByType<T>( arg0:java.lang.Class<T>, arg1:double, arg2:double, arg3:Predicate<T> ):java.util.Collection<T>;
	getNearbyEntitiesByType<T>( arg0:java.lang.Class<T>, arg1:double, arg2:double, arg3:double ):java.util.Collection<T>;
	getNearbyEntitiesByType<T>( arg0:java.lang.Class<org.bukkit.entity.Entity>, arg1:double, arg2:double, arg3:double, arg4:Predicate<T> ):java.util.Collection<T>;
	getNearbyLivingEntities( arg0:double ):java.util.Collection<org.bukkit.entity.LivingEntity>;
	getNearbyLivingEntities( arg0:double, arg1:Predicate<org.bukkit.entity.LivingEntity> ):java.util.Collection<org.bukkit.entity.LivingEntity>;
	getNearbyLivingEntities( arg0:double, arg1:double ):java.util.Collection<org.bukkit.entity.LivingEntity>;
	getNearbyLivingEntities( arg0:double, arg1:double, arg2:Predicate<org.bukkit.entity.LivingEntity> ):java.util.Collection<org.bukkit.entity.LivingEntity>;
	getNearbyLivingEntities( arg0:double, arg1:double, arg2:double ):java.util.Collection<org.bukkit.entity.LivingEntity>;
	getNearbyLivingEntities( arg0:double, arg1:double, arg2:double, arg3:Predicate<org.bukkit.entity.LivingEntity> ):java.util.Collection<org.bukkit.entity.LivingEntity>;
	getNearbyPlayers( arg0:double ):java.util.Collection<org.bukkit.entity.Player>;
	getNearbyPlayers( arg0:double, arg1:Predicate<org.bukkit.entity.Player> ):java.util.Collection<org.bukkit.entity.Player>;
	getNearbyPlayers( arg0:double, arg1:double ):java.util.Collection<org.bukkit.entity.Player>;
	getNearbyPlayers( arg0:double, arg1:double, arg2:Predicate<org.bukkit.entity.Player> ):java.util.Collection<org.bukkit.entity.Player>;
	getNearbyPlayers( arg0:double, arg1:double, arg2:double ):java.util.Collection<org.bukkit.entity.Player>;
	getNearbyPlayers( arg0:double, arg1:double, arg2:double, arg3:Predicate<org.bukkit.entity.Player> ):java.util.Collection<org.bukkit.entity.Player>;
	getPitch(  ):float;
	getWorld(  ):World;
	getX(  ):double;
	getY(  ):double;
	getYaw(  ):float;
	getZ(  ):double;
	isBlock(  ):boolean;
	isChunkLoaded(  ):boolean;
	isFine(  ):boolean;
	isGenerated(  ):boolean;
	isWorldLoaded(  ):boolean;
	length(  ):double;
	lengthSquared(  ):double;
	multiply( arg0:double ):Location;
	offset( arg0:double, arg1:double, arg2:double ):any /*io.papermc.paper.math.FinePosition*/;
	offset( arg0:int, arg1:int, arg2:int ):any /*io.papermc.paper.math.FinePosition*/;
	serialize(  ):java.util.Map<string, any /*java.lang.Object*/>;
	set( arg0:double, arg1:double, arg2:double ):Location;
	setDirection( arg0:any /*org.bukkit.util.Vector*/ ):Location;
	setPitch( arg0:float ):void;
	setWorld( arg0:World ):void;
	setX( arg0:double ):void;
	setY( arg0:double ):void;
	setYaw( arg0:float ):void;
	setZ( arg0:double ):void;
	subtract( arg0:Location ):Location;
	subtract( arg0:Location, arg1:double, arg2:double, arg3:double ):Location;
	subtract( arg0:any /*org.bukkit.util.Vector*/ ):Location;
	subtract( arg0:double, arg1:double, arg2:double ):Location;
	toBlock(  ):any /*io.papermc.paper.math.BlockPosition*/;
	toBlockKey(  ):long;
	toBlockLocation(  ):Location;
	toCenter(  ):any /*io.papermc.paper.math.FinePosition*/;
	toCenterLocation(  ):Location;
	toHighestLocation(  ):Location;
	toHighestLocation( arg0:any /*com.destroystokyo.paper.HeightmapType*/ ):Location;
	toHighestLocation( arg0:any /*org.bukkit.HeightMap*/ ):Location;
	toLocation( arg0:World ):Location;
	toString(  ):string;
	toVector(  ):any /*org.bukkit.util.Vector*/;
	x(  ):double;
	y(  ):double;
	z(  ):double;
	zero(  ):Location;

} // end Location

} // end namespace org.bukkit
declare namespace org.bukkit {

interface OfflinePlayer/* extends org.bukkit.permissions.ServerOperator, org.bukkit.entity.AnimalTamer, org.bukkit.configuration.serialization.ConfigurationSerializable*/ {

	banPlayer( arg0:string ):any /*org.bukkit.BanEntry*/;
	banPlayer( arg0:string, arg1:any /*java.util.Date*/ ):any /*org.bukkit.BanEntry*/;
	banPlayer( arg0:string, arg1:any /*java.util.Date*/, arg2:string ):any /*org.bukkit.BanEntry*/;
	banPlayer( arg0:string, arg1:any /*java.util.Date*/, arg2:string, arg3:boolean ):any /*org.bukkit.BanEntry*/;
	banPlayer( arg0:string, arg1:string ):any /*org.bukkit.BanEntry*/;
	decrementStatistic( arg0:any /*org.bukkit.Statistic*/ ):void;
	decrementStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:Material ):void;
	decrementStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:Material, arg2:int ):void;
	decrementStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:int ):void;
	decrementStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:org.bukkit.entity.EntityType ):void;
	decrementStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:org.bukkit.entity.EntityType, arg2:int ):void;
	getBedSpawnLocation(  ):Location;
	getFirstPlayed(  ):long;
	getLastDeathLocation(  ):Location;
	getLastLogin(  ):long;
	getLastPlayed(  ):long;
	getLastSeen(  ):long;
	getName(  ):string;
	getPlayer(  ):org.bukkit.entity.Player;
	getPlayerProfile(  ):any /*com.destroystokyo.paper.profile.PlayerProfile*/;
	getStatistic( arg0:any /*org.bukkit.Statistic*/ ):int;
	getStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:Material ):int;
	getStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:org.bukkit.entity.EntityType ):int;
	getUniqueId(  ):any /*java.util.UUID*/;
	hasPlayedBefore(  ):boolean;
	incrementStatistic( arg0:any /*org.bukkit.Statistic*/ ):void;
	incrementStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:Material ):void;
	incrementStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:Material, arg2:int ):void;
	incrementStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:int ):void;
	incrementStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:org.bukkit.entity.EntityType ):void;
	incrementStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:org.bukkit.entity.EntityType, arg2:int ):void;
	isBanned(  ):boolean;
	isOnline(  ):boolean;
	isOp(  ):boolean;
	isWhitelisted(  ):boolean;
	serialize(  ):java.util.Map<string, any /*java.lang.Object*/>;
	setOp( arg0:boolean ):void;
	setStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:Material, arg2:int ):void;
	setStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:int ):void;
	setStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:org.bukkit.entity.EntityType, arg2:int ):void;
	setWhitelisted( arg0:boolean ):void;

} // end OfflinePlayer

} // end namespace org.bukkit
declare namespace org.bukkit {

interface World/* extends RegionAccessor, org.bukkit.generator.WorldInfo, org.bukkit.plugin.messaging.PluginMessageRecipient, org.bukkit.metadata.Metadatable, org.bukkit.persistence.PersistentDataHolder, Keyed, net.kyori.adventure.audience.ForwardingAudience*/ {

	addPluginChunkTicket( arg0:int, arg1:int, arg2:any /*org.bukkit.plugin.Plugin*/ ):boolean;
	audiences(  ):java.lang.Iterable<any /*net.kyori.adventure.audience.Audience*/>;
	canGenerateStructures(  ):boolean;
	clearTitle(  ):void;
	createExplosion( arg0:Location, arg1:float ):boolean;
	createExplosion( arg0:Location, arg1:float, arg2:boolean ):boolean;
	createExplosion( arg0:Location, arg1:float, arg2:boolean, arg3:boolean ):boolean;
	createExplosion( arg0:Location, arg1:float, arg2:boolean, arg3:boolean, arg4:org.bukkit.entity.Entity ):boolean;
	createExplosion( arg0:double, arg1:double, arg2:double, arg3:float ):boolean;
	createExplosion( arg0:double, arg1:double, arg2:double, arg3:float, arg4:boolean ):boolean;
	createExplosion( arg0:double, arg1:double, arg2:double, arg3:float, arg4:boolean, arg5:boolean ):boolean;
	createExplosion( arg0:double, arg1:double, arg2:double, arg3:float, arg4:boolean, arg5:boolean, arg6:org.bukkit.entity.Entity ):boolean;
	createExplosion( arg0:org.bukkit.entity.Entity, arg1:Location, arg2:float ):boolean;
	createExplosion( arg0:org.bukkit.entity.Entity, arg1:Location, arg2:float, arg3:boolean ):boolean;
	createExplosion( arg0:org.bukkit.entity.Entity, arg1:Location, arg2:float, arg3:boolean, arg4:boolean ):boolean;
	createExplosion( arg0:org.bukkit.entity.Entity, arg1:float ):boolean;
	createExplosion( arg0:org.bukkit.entity.Entity, arg1:float, arg2:boolean ):boolean;
	createExplosion( arg0:org.bukkit.entity.Entity, arg1:float, arg2:boolean, arg3:boolean ):boolean;
	deleteMessage( signature:any /*net.kyori.adventure.chat.SignedMessage$Signature*/ ):void;
	deleteMessage( signedMessage:any /*net.kyori.adventure.chat.SignedMessage*/ ):void;
	doesBedWork(  ):boolean;
	doesRespawnAnchorWork(  ):boolean;
	dropItem( arg0:Location, arg1:org.bukkit.inventory.ItemStack ):any /*org.bukkit.entity.Item*/;
	dropItem( arg0:Location, arg1:org.bukkit.inventory.ItemStack, arg2:org.bukkit.util.Consumer<any /*org.bukkit.entity.Item*/> ):any /*org.bukkit.entity.Item*/;
	dropItemNaturally( arg0:Location, arg1:org.bukkit.inventory.ItemStack ):any /*org.bukkit.entity.Item*/;
	dropItemNaturally( arg0:Location, arg1:org.bukkit.inventory.ItemStack, arg2:org.bukkit.util.Consumer<any /*org.bukkit.entity.Item*/> ):any /*org.bukkit.entity.Item*/;
	filterAudience( filter:Predicate<any /*net.kyori.adventure.audience.Audience*/> ):any /*net.kyori.adventure.audience.Audience*/;
	findLightningRod( arg0:Location ):Location;
	findLightningTarget( arg0:Location ):Location;
	forEachAudience( action:Consumer<any /*net.kyori.adventure.audience.Audience*/> ):void;
	generateTree( arg0:Location, arg1:any /*java.util.Random*/, arg2:any /*org.bukkit.TreeType*/ ):boolean;
	generateTree( arg0:Location, arg1:any /*java.util.Random*/, arg2:any /*org.bukkit.TreeType*/, arg3:Predicate<any /*org.bukkit.block.BlockState*/> ):boolean;
	generateTree( arg0:Location, arg1:any /*java.util.Random*/, arg2:any /*org.bukkit.TreeType*/, arg3:org.bukkit.util.Consumer<any /*org.bukkit.block.BlockState*/> ):boolean;
	generateTree( arg0:Location, arg1:any /*org.bukkit.TreeType*/ ):boolean;
	generateTree( arg0:Location, arg1:any /*org.bukkit.TreeType*/, arg2:any /*org.bukkit.BlockChangeDelegate*/ ):boolean;
	get<T>( pointer:any /*net.kyori.adventure.pointer.Pointer*/ ):java.util.Optional<T>;
	getAllowAnimals(  ):boolean;
	getAllowMonsters(  ):boolean;
	getAmbientSpawnLimit(  ):int;
	getAnimalSpawnLimit(  ):int;
	getBiome( arg0:Location ):any /*org.bukkit.block.Biome*/;
	getBiome( arg0:int, arg1:int ):any /*org.bukkit.block.Biome*/;
	getBiome( arg0:int, arg1:int, arg2:int ):any /*org.bukkit.block.Biome*/;
	getBiomeProvider(  ):any /*org.bukkit.generator.BiomeProvider*/;
	getBlockAt( arg0:Location ):org.bukkit.block.Block;
	getBlockAt( arg0:int, arg1:int, arg2:int ):org.bukkit.block.Block;
	getBlockAtKey( arg0:long ):org.bukkit.block.Block;
	getBlockData( arg0:Location ):any /*org.bukkit.block.data.BlockData*/;
	getBlockData( arg0:int, arg1:int, arg2:int ):any /*org.bukkit.block.data.BlockData*/;
	getBlockState( arg0:Location ):any /*org.bukkit.block.BlockState*/;
	getBlockState( arg0:int, arg1:int, arg2:int ):any /*org.bukkit.block.BlockState*/;
	getChunkAt( arg0:Location ):any /*org.bukkit.Chunk*/;
	getChunkAt( arg0:int, arg1:int ):any /*org.bukkit.Chunk*/;
	getChunkAt( arg0:int, arg1:int, arg2:boolean ):any /*org.bukkit.Chunk*/;
	getChunkAt( arg0:long ):any /*org.bukkit.Chunk*/;
	getChunkAt( arg0:org.bukkit.block.Block ):any /*org.bukkit.Chunk*/;
	getChunkAtAsync( arg0:Location ):any /*java.util.concurrent.CompletableFuture*/;
	getChunkAtAsync( arg0:Location, arg1:Consumer<any /*org.bukkit.Chunk*/> ):void;
	getChunkAtAsync( arg0:Location, arg1:any /*org.bukkit.World$ChunkLoadCallback*/ ):void;
	getChunkAtAsync( arg0:Location, arg1:boolean ):any /*java.util.concurrent.CompletableFuture*/;
	getChunkAtAsync( arg0:Location, arg1:boolean, arg2:Consumer<any /*org.bukkit.Chunk*/> ):void;
	getChunkAtAsync( arg0:int, arg1:int ):any /*java.util.concurrent.CompletableFuture*/;
	getChunkAtAsync( arg0:int, arg1:int, arg2:Consumer<any /*org.bukkit.Chunk*/> ):void;
	getChunkAtAsync( arg0:int, arg1:int, arg2:any /*org.bukkit.World$ChunkLoadCallback*/ ):void;
	getChunkAtAsync( arg0:int, arg1:int, arg2:boolean ):any /*java.util.concurrent.CompletableFuture*/;
	getChunkAtAsync( arg0:int, arg1:int, arg2:boolean, arg3:Consumer<any /*org.bukkit.Chunk*/> ):void;
	getChunkAtAsync( arg0:int, arg1:int, arg2:boolean, arg3:boolean ):any /*java.util.concurrent.CompletableFuture*/;
	getChunkAtAsync( arg0:org.bukkit.block.Block ):any /*java.util.concurrent.CompletableFuture*/;
	getChunkAtAsync( arg0:org.bukkit.block.Block, arg1:Consumer<any /*org.bukkit.Chunk*/> ):void;
	getChunkAtAsync( arg0:org.bukkit.block.Block, arg1:any /*org.bukkit.World$ChunkLoadCallback*/ ):void;
	getChunkAtAsync( arg0:org.bukkit.block.Block, arg1:boolean ):any /*java.util.concurrent.CompletableFuture*/;
	getChunkAtAsync( arg0:org.bukkit.block.Block, arg1:boolean, arg2:Consumer<any /*org.bukkit.Chunk*/> ):void;
	getChunkAtAsyncUrgently( arg0:Location ):any /*java.util.concurrent.CompletableFuture*/;
	getChunkAtAsyncUrgently( arg0:Location, arg1:boolean ):any /*java.util.concurrent.CompletableFuture*/;
	getChunkAtAsyncUrgently( arg0:int, arg1:int ):any /*java.util.concurrent.CompletableFuture*/;
	getChunkAtAsyncUrgently( arg0:org.bukkit.block.Block ):any /*java.util.concurrent.CompletableFuture*/;
	getChunkAtAsyncUrgently( arg0:org.bukkit.block.Block, arg1:boolean ):any /*java.util.concurrent.CompletableFuture*/;
	getChunkCount(  ):int;
	getClearWeatherDuration(  ):int;
	getComputedBiome( arg0:int, arg1:int, arg2:int ):any /*org.bukkit.block.Biome*/;
	getCoordinateScale(  ):double;
	getDifficulty(  ):any /*org.bukkit.Difficulty*/;
	getEmptyChunkSnapshot( arg0:int, arg1:int, arg2:boolean, arg3:boolean ):any /*org.bukkit.ChunkSnapshot*/;
	getEnderDragonBattle(  ):any /*org.bukkit.boss.DragonBattle*/;
	getEntities(  ):java.util.List<org.bukkit.entity.Entity>;
	getEntitiesByClass<T>( ...arg0:java.lang.Class<T>[] ):java.util.Collection<T>;
	getEntitiesByClass<T>( arg0:java.lang.Class<T> ):java.util.Collection<T>;
	getEntitiesByClasses( ...arg0:java.lang.Class<any /*java.lang.Object*/>[] ):java.util.Collection<org.bukkit.entity.Entity>;
	getEntity( arg0:any /*java.util.UUID*/ ):org.bukkit.entity.Entity;
	getEntityCount(  ):int;
	getEnvironment(  ):any /*org.bukkit.World$Environment*/;
	getForceLoadedChunks(  ):java.util.Collection<any /*org.bukkit.Chunk*/>;
	getFullTime(  ):long;
	getGameRuleDefault<T>( arg0:any /*org.bukkit.GameRule*/ ):T;
	getGameRuleValue( arg0:string ):string;
	getGameRuleValue<T>( arg0:any /*org.bukkit.GameRule*/ ):T;
	getGameRules(  ):[string];
	getGameTime(  ):long;
	getGenerator(  ):any /*org.bukkit.generator.ChunkGenerator*/;
	getHighestBlockAt( arg0:Location ):org.bukkit.block.Block;
	getHighestBlockAt( arg0:Location, arg1:any /*com.destroystokyo.paper.HeightmapType*/ ):org.bukkit.block.Block;
	getHighestBlockAt( arg0:Location, arg1:any /*org.bukkit.HeightMap*/ ):org.bukkit.block.Block;
	getHighestBlockAt( arg0:int, arg1:int ):org.bukkit.block.Block;
	getHighestBlockAt( arg0:int, arg1:int, arg2:any /*com.destroystokyo.paper.HeightmapType*/ ):org.bukkit.block.Block;
	getHighestBlockAt( arg0:int, arg1:int, arg2:any /*org.bukkit.HeightMap*/ ):org.bukkit.block.Block;
	getHighestBlockYAt( arg0:Location ):int;
	getHighestBlockYAt( arg0:Location, arg1:any /*com.destroystokyo.paper.HeightmapType*/ ):int;
	getHighestBlockYAt( arg0:Location, arg1:any /*org.bukkit.HeightMap*/ ):int;
	getHighestBlockYAt( arg0:int, arg1:int ):int;
	getHighestBlockYAt( arg0:int, arg1:int, arg2:any /*com.destroystokyo.paper.HeightmapType*/ ):int;
	getHighestBlockYAt( arg0:int, arg1:int, arg2:any /*org.bukkit.HeightMap*/ ):int;
	getHumidity( arg0:int, arg1:int ):double;
	getHumidity( arg0:int, arg1:int, arg2:int ):double;
	getInfiniburn(  ):java.util.Collection<Material>;
	getKeepSpawnInMemory(  ):boolean;
	getKey(  ):any /*org.bukkit.NamespacedKey*/;
	getListeningPluginChannels(  ):java.util.Set<string>;
	getLivingEntities(  ):java.util.List<org.bukkit.entity.LivingEntity>;
	getLoadedChunks(  ):[any /*org.bukkit.Chunk*/];
	getLocationAtKey( arg0:long ):Location;
	getLogicalHeight(  ):int;
	getMaxHeight(  ):int;
	getMetadata( arg0:string ):java.util.List<any /*org.bukkit.metadata.MetadataValue*/>;
	getMinHeight(  ):int;
	getMonsterSpawnLimit(  ):int;
	getMoonPhase(  ):any /*io.papermc.paper.world.MoonPhase*/;
	getName(  ):string;
	getNearbyEntities( arg0:Location, arg1:double, arg2:double, arg3:double ):java.util.Collection<org.bukkit.entity.Entity>;
	getNearbyEntities( arg0:Location, arg1:double, arg2:double, arg3:double, arg4:Predicate<org.bukkit.entity.Entity> ):java.util.Collection<org.bukkit.entity.Entity>;
	getNearbyEntities( arg0:any /*org.bukkit.util.BoundingBox*/ ):java.util.Collection<org.bukkit.entity.Entity>;
	getNearbyEntities( arg0:any /*org.bukkit.util.BoundingBox*/, arg1:Predicate<org.bukkit.entity.Entity> ):java.util.Collection<org.bukkit.entity.Entity>;
	getNearbyEntitiesByType<T>( arg0:java.lang.Class<T>, arg1:Location, arg2:double ):java.util.Collection<T>;
	getNearbyEntitiesByType<T>( arg0:java.lang.Class<T>, arg1:Location, arg2:double, arg3:Predicate<T> ):java.util.Collection<T>;
	getNearbyEntitiesByType<T>( arg0:java.lang.Class<T>, arg1:Location, arg2:double, arg3:double ):java.util.Collection<T>;
	getNearbyEntitiesByType<T>( arg0:java.lang.Class<T>, arg1:Location, arg2:double, arg3:double, arg4:Predicate<T> ):java.util.Collection<T>;
	getNearbyEntitiesByType<T>( arg0:java.lang.Class<T>, arg1:Location, arg2:double, arg3:double, arg4:double ):java.util.Collection<T>;
	getNearbyEntitiesByType<T>( arg0:java.lang.Class<org.bukkit.entity.Entity>, arg1:Location, arg2:double, arg3:double, arg4:double, arg5:Predicate<T> ):java.util.Collection<T>;
	getNearbyLivingEntities( arg0:Location, arg1:double ):java.util.Collection<org.bukkit.entity.LivingEntity>;
	getNearbyLivingEntities( arg0:Location, arg1:double, arg2:Predicate<org.bukkit.entity.LivingEntity> ):java.util.Collection<org.bukkit.entity.LivingEntity>;
	getNearbyLivingEntities( arg0:Location, arg1:double, arg2:double ):java.util.Collection<org.bukkit.entity.LivingEntity>;
	getNearbyLivingEntities( arg0:Location, arg1:double, arg2:double, arg3:Predicate<org.bukkit.entity.LivingEntity> ):java.util.Collection<org.bukkit.entity.LivingEntity>;
	getNearbyLivingEntities( arg0:Location, arg1:double, arg2:double, arg3:double ):java.util.Collection<org.bukkit.entity.LivingEntity>;
	getNearbyLivingEntities( arg0:Location, arg1:double, arg2:double, arg3:double, arg4:Predicate<org.bukkit.entity.LivingEntity> ):java.util.Collection<org.bukkit.entity.LivingEntity>;
	getNearbyPlayers( arg0:Location, arg1:double ):java.util.Collection<org.bukkit.entity.Player>;
	getNearbyPlayers( arg0:Location, arg1:double, arg2:Predicate<org.bukkit.entity.Player> ):java.util.Collection<org.bukkit.entity.Player>;
	getNearbyPlayers( arg0:Location, arg1:double, arg2:double ):java.util.Collection<org.bukkit.entity.Player>;
	getNearbyPlayers( arg0:Location, arg1:double, arg2:double, arg3:Predicate<org.bukkit.entity.Player> ):java.util.Collection<org.bukkit.entity.Player>;
	getNearbyPlayers( arg0:Location, arg1:double, arg2:double, arg3:double ):java.util.Collection<org.bukkit.entity.Player>;
	getNearbyPlayers( arg0:Location, arg1:double, arg2:double, arg3:double, arg4:Predicate<org.bukkit.entity.Player> ):java.util.Collection<org.bukkit.entity.Player>;
	getNoTickViewDistance(  ):int;
	getOrDefault<T>( pointer:any /*net.kyori.adventure.pointer.Pointer*/, defaultValue:T ):T;
	getOrDefaultFrom<T>( pointer:any /*net.kyori.adventure.pointer.Pointer*/, defaultValue:Supplier<T> ):T;
	getPVP(  ):boolean;
	getPersistentDataContainer(  ):any /*org.bukkit.persistence.PersistentDataContainer*/;
	getPlayerCount(  ):int;
	getPlayers(  ):java.util.List<org.bukkit.entity.Player>;
	getPluginChunkTickets(  ):java.util.Map<any /*org.bukkit.plugin.Plugin*/, java.util.Collection<any /*org.bukkit.Chunk*/>>;
	getPluginChunkTickets( arg0:int, arg1:int ):java.util.Collection<any /*org.bukkit.plugin.Plugin*/>;
	getPopulators(  ):java.util.List<any /*org.bukkit.generator.BlockPopulator*/>;
	getRaids(  ):java.util.List<any /*org.bukkit.Raid*/>;
	getSeaLevel(  ):int;
	getSeed(  ):long;
	getSendViewDistance(  ):int;
	getSimulationDistance(  ):int;
	getSpawnLimit( arg0:any /*org.bukkit.entity.SpawnCategory*/ ):int;
	getSpawnLocation(  ):Location;
	getTemperature( arg0:int, arg1:int ):double;
	getTemperature( arg0:int, arg1:int, arg2:int ):double;
	getThunderDuration(  ):int;
	getTickableTileEntityCount(  ):int;
	getTicksPerAmbientSpawns(  ):long;
	getTicksPerAnimalSpawns(  ):long;
	getTicksPerMonsterSpawns(  ):long;
	getTicksPerSpawns( arg0:any /*org.bukkit.entity.SpawnCategory*/ ):long;
	getTicksPerWaterAmbientSpawns(  ):long;
	getTicksPerWaterSpawns(  ):long;
	getTicksPerWaterUndergroundCreatureSpawns(  ):long;
	getTileEntityCount(  ):int;
	getTime(  ):long;
	getType( arg0:Location ):Material;
	getType( arg0:int, arg1:int, arg2:int ):Material;
	getUID(  ):any /*java.util.UUID*/;
	getViewDistance(  ):int;
	getWaterAmbientSpawnLimit(  ):int;
	getWaterAnimalSpawnLimit(  ):int;
	getWaterUndergroundCreatureSpawnLimit(  ):int;
	getWeatherDuration(  ):int;
	getWorldBorder(  ):any /*org.bukkit.WorldBorder*/;
	getWorldFolder(  ):any /*java.io.File*/;
	getWorldType(  ):any /*org.bukkit.WorldType*/;
	hasBedrockCeiling(  ):boolean;
	hasCeiling(  ):boolean;
	hasCollisionsIn( arg0:any /*org.bukkit.util.BoundingBox*/ ):boolean;
	hasMetadata( arg0:string ):boolean;
	hasRaids(  ):boolean;
	hasSkyLight(  ):boolean;
	hasSkylight(  ):boolean;
	hasStorm(  ):boolean;
	hideBossBar( bar:any /*net.kyori.adventure.bossbar.BossBar*/ ):void;
	isAutoSave(  ):boolean;
	isBedWorks(  ):boolean;
	isChunkForceLoaded( arg0:int, arg1:int ):boolean;
	isChunkGenerated( arg0:int, arg1:int ):boolean;
	isChunkGenerated( arg0:long ):boolean;
	isChunkInUse( arg0:int, arg1:int ):boolean;
	isChunkLoaded( arg0:any /*org.bukkit.Chunk*/ ):boolean;
	isChunkLoaded( arg0:int, arg1:int ):boolean;
	isClearWeather(  ):boolean;
	isDayTime(  ):boolean;
	isFixedTime(  ):boolean;
	isGameRule( arg0:string ):boolean;
	isHardcore(  ):boolean;
	isNatural(  ):boolean;
	isPiglinSafe(  ):boolean;
	isRespawnAnchorWorks(  ):boolean;
	isThundering(  ):boolean;
	isUltraWarm(  ):boolean;
	isUltrawarm(  ):boolean;
	key(  ):any /*net.kyori.adventure.key.Key*/;
	lineOfSightExists( arg0:Location, arg1:Location ):boolean;
	loadChunk( arg0:any /*org.bukkit.Chunk*/ ):void;
	loadChunk( arg0:int, arg1:int ):void;
	loadChunk( arg0:int, arg1:int, arg2:boolean ):boolean;
	locateNearestBiome( arg0:Location, arg1:any /*org.bukkit.block.Biome*/, arg2:int ):Location;
	locateNearestBiome( arg0:Location, arg1:any /*org.bukkit.block.Biome*/, arg2:int, arg3:int ):Location;
	locateNearestRaid( arg0:Location, arg1:int ):any /*org.bukkit.Raid*/;
	locateNearestStructure( arg0:Location, arg1:any /*org.bukkit.StructureType*/, arg2:int, arg3:boolean ):Location;
	locateNearestStructure( arg0:Location, arg1:any /*org.bukkit.generator.structure.Structure*/, arg2:int, arg3:boolean ):any /*org.bukkit.util.StructureSearchResult*/;
	locateNearestStructure( arg0:Location, arg1:any /*org.bukkit.generator.structure.StructureType*/, arg2:int, arg3:boolean ):any /*org.bukkit.util.StructureSearchResult*/;
	openBook( book:any /*net.kyori.adventure.inventory.Book$Builder*/ ):void;
	openBook( book:any /*net.kyori.adventure.inventory.Book*/ ):void;
	playEffect( arg0:Location, arg1:Effect, arg2:int ):void;
	playEffect( arg0:Location, arg1:Effect, arg2:int, arg3:int ):void;
	playEffect<T>( arg0:Location, arg1:Effect, arg2:T ):void;
	playEffect<T>( arg0:Location, arg1:Effect, arg2:T, arg3:int ):void;
	playSound( arg0:Location, arg1:Sound, arg2:any /*org.bukkit.SoundCategory*/, arg3:float, arg4:float ):void;
	playSound( arg0:Location, arg1:Sound, arg2:float, arg3:float ):void;
	playSound( arg0:Location, arg1:string, arg2:any /*org.bukkit.SoundCategory*/, arg3:float, arg4:float ):void;
	playSound( arg0:Location, arg1:string, arg2:float, arg3:float ):void;
	playSound( arg0:org.bukkit.entity.Entity, arg1:Sound, arg2:any /*org.bukkit.SoundCategory*/, arg3:float, arg4:float ):void;
	playSound( arg0:org.bukkit.entity.Entity, arg1:Sound, arg2:float, arg3:float ):void;
	playSound( arg0:org.bukkit.entity.Entity, arg1:string, arg2:any /*org.bukkit.SoundCategory*/, arg3:float, arg4:float ):void;
	playSound( arg0:org.bukkit.entity.Entity, arg1:string, arg2:float, arg3:float ):void;
	playSound( sound:any /*net.kyori.adventure.sound.Sound*/ ):void;
	playSound( sound:any /*net.kyori.adventure.sound.Sound*/, emitter:any /*net.kyori.adventure.sound.Sound$Emitter*/ ):void;
	playSound( sound:any /*net.kyori.adventure.sound.Sound*/, x:double, y:double, z:double ):void;
	pointers(  ):any /*net.kyori.adventure.pointer.Pointers*/;
	rayTrace( arg0:Location, arg1:any /*org.bukkit.util.Vector*/, arg2:double, arg3:any /*org.bukkit.FluidCollisionMode*/, arg4:boolean, arg5:double, arg6:Predicate<org.bukkit.entity.Entity> ):any /*org.bukkit.util.RayTraceResult*/;
	rayTraceBlocks( arg0:Location, arg1:any /*org.bukkit.util.Vector*/, arg2:double ):any /*org.bukkit.util.RayTraceResult*/;
	rayTraceBlocks( arg0:Location, arg1:any /*org.bukkit.util.Vector*/, arg2:double, arg3:any /*org.bukkit.FluidCollisionMode*/ ):any /*org.bukkit.util.RayTraceResult*/;
	rayTraceBlocks( arg0:Location, arg1:any /*org.bukkit.util.Vector*/, arg2:double, arg3:any /*org.bukkit.FluidCollisionMode*/, arg4:boolean ):any /*org.bukkit.util.RayTraceResult*/;
	rayTraceEntities( arg0:Location, arg1:any /*org.bukkit.util.Vector*/, arg2:double ):any /*org.bukkit.util.RayTraceResult*/;
	rayTraceEntities( arg0:Location, arg1:any /*org.bukkit.util.Vector*/, arg2:double, arg3:Predicate<org.bukkit.entity.Entity> ):any /*org.bukkit.util.RayTraceResult*/;
	rayTraceEntities( arg0:Location, arg1:any /*org.bukkit.util.Vector*/, arg2:double, arg3:double ):any /*org.bukkit.util.RayTraceResult*/;
	rayTraceEntities( arg0:Location, arg1:any /*org.bukkit.util.Vector*/, arg2:double, arg3:double, arg4:Predicate<org.bukkit.entity.Entity> ):any /*org.bukkit.util.RayTraceResult*/;
	refreshChunk( arg0:int, arg1:int ):boolean;
	regenerateChunk( arg0:int, arg1:int ):boolean;
	removeMetadata( arg0:string, arg1:any /*org.bukkit.plugin.Plugin*/ ):void;
	removePluginChunkTicket( arg0:int, arg1:int, arg2:any /*org.bukkit.plugin.Plugin*/ ):boolean;
	removePluginChunkTickets( arg0:any /*org.bukkit.plugin.Plugin*/ ):void;
	resetTitle(  ):void;
	save(  ):void;
	sendActionBar( message:any /*net.kyori.adventure.text.Component*/ ):void;
	sendActionBar( message:any /*net.kyori.adventure.text.ComponentLike*/ ):void;
	sendGameEvent( arg0:org.bukkit.entity.Entity, arg1:any /*org.bukkit.GameEvent*/, arg2:any /*org.bukkit.util.Vector*/ ):void;
	sendMessage( message:any /*net.kyori.adventure.text.Component*/ ):void;
	sendMessage( message:any /*net.kyori.adventure.text.Component*/, boundChatType:any /*net.kyori.adventure.chat.ChatType$Bound*/ ):void;
	sendMessage( message:any /*net.kyori.adventure.text.Component*/, type:any /*net.kyori.adventure.audience.MessageType*/ ):void;
	sendMessage( message:any /*net.kyori.adventure.text.ComponentLike*/ ):void;
	sendMessage( message:any /*net.kyori.adventure.text.ComponentLike*/, boundChatType:any /*net.kyori.adventure.chat.ChatType$Bound*/ ):void;
	sendMessage( message:any /*net.kyori.adventure.text.ComponentLike*/, type:any /*net.kyori.adventure.audience.MessageType*/ ):void;
	sendMessage( signedMessage:any /*net.kyori.adventure.chat.SignedMessage*/, boundChatType:any /*net.kyori.adventure.chat.ChatType$Bound*/ ):void;
	sendMessage( source:any /*net.kyori.adventure.identity.Identified*/, message:any /*net.kyori.adventure.text.Component*/ ):void;
	sendMessage( source:any /*net.kyori.adventure.identity.Identified*/, message:any /*net.kyori.adventure.text.Component*/, type:any /*net.kyori.adventure.audience.MessageType*/ ):void;
	sendMessage( source:any /*net.kyori.adventure.identity.Identified*/, message:any /*net.kyori.adventure.text.ComponentLike*/ ):void;
	sendMessage( source:any /*net.kyori.adventure.identity.Identified*/, message:any /*net.kyori.adventure.text.ComponentLike*/, type:any /*net.kyori.adventure.audience.MessageType*/ ):void;
	sendMessage( source:any /*net.kyori.adventure.identity.Identity*/, message:any /*net.kyori.adventure.text.Component*/ ):void;
	sendMessage( source:any /*net.kyori.adventure.identity.Identity*/, message:any /*net.kyori.adventure.text.Component*/, type:any /*net.kyori.adventure.audience.MessageType*/ ):void;
	sendMessage( source:any /*net.kyori.adventure.identity.Identity*/, message:any /*net.kyori.adventure.text.ComponentLike*/ ):void;
	sendMessage( source:any /*net.kyori.adventure.identity.Identity*/, message:any /*net.kyori.adventure.text.ComponentLike*/, type:any /*net.kyori.adventure.audience.MessageType*/ ):void;
	sendPlayerListFooter( footer:any /*net.kyori.adventure.text.Component*/ ):void;
	sendPlayerListFooter( footer:any /*net.kyori.adventure.text.ComponentLike*/ ):void;
	sendPlayerListHeader( header:any /*net.kyori.adventure.text.Component*/ ):void;
	sendPlayerListHeader( header:any /*net.kyori.adventure.text.ComponentLike*/ ):void;
	sendPlayerListHeaderAndFooter( header:any /*net.kyori.adventure.text.Component*/, footer:any /*net.kyori.adventure.text.Component*/ ):void;
	sendPlayerListHeaderAndFooter( header:any /*net.kyori.adventure.text.ComponentLike*/, footer:any /*net.kyori.adventure.text.ComponentLike*/ ):void;
	sendPluginMessage( arg0:any /*org.bukkit.plugin.Plugin*/, arg1:string, arg2:bytearray ):void;
	sendTitlePart<T>( part:any /*net.kyori.adventure.title.TitlePart*/, value:T ):void;
	setAmbientSpawnLimit( arg0:int ):void;
	setAnimalSpawnLimit( arg0:int ):void;
	setAutoSave( arg0:boolean ):void;
	setBiome( arg0:Location, arg1:any /*org.bukkit.block.Biome*/ ):void;
	setBiome( arg0:int, arg1:int, arg2:any /*org.bukkit.block.Biome*/ ):void;
	setBiome( arg0:int, arg1:int, arg2:int, arg3:any /*org.bukkit.block.Biome*/ ):void;
	setBlockData( arg0:Location, arg1:any /*org.bukkit.block.data.BlockData*/ ):void;
	setBlockData( arg0:int, arg1:int, arg2:int, arg3:any /*org.bukkit.block.data.BlockData*/ ):void;
	setChunkForceLoaded( arg0:int, arg1:int, arg2:boolean ):void;
	setClearWeatherDuration( arg0:int ):void;
	setDifficulty( arg0:any /*org.bukkit.Difficulty*/ ):void;
	setFullTime( arg0:long ):void;
	setGameRule<T>( arg0:any /*org.bukkit.GameRule*/, arg1:T ):boolean;
	setGameRuleValue( arg0:string, arg1:string ):boolean;
	setHardcore( arg0:boolean ):void;
	setKeepSpawnInMemory( arg0:boolean ):void;
	setMetadata( arg0:string, arg1:any /*org.bukkit.metadata.MetadataValue*/ ):void;
	setMonsterSpawnLimit( arg0:int ):void;
	setNoTickViewDistance( arg0:int ):void;
	setPVP( arg0:boolean ):void;
	setSendViewDistance( arg0:int ):void;
	setSimulationDistance( arg0:int ):void;
	setSpawnFlags( arg0:boolean, arg1:boolean ):void;
	setSpawnLimit( arg0:any /*org.bukkit.entity.SpawnCategory*/, arg1:int ):void;
	setSpawnLocation( arg0:Location ):boolean;
	setSpawnLocation( arg0:int, arg1:int, arg2:int ):boolean;
	setSpawnLocation( arg0:int, arg1:int, arg2:int, arg3:float ):boolean;
	setStorm( arg0:boolean ):void;
	setThunderDuration( arg0:int ):void;
	setThundering( arg0:boolean ):void;
	setTicksPerAmbientSpawns( arg0:int ):void;
	setTicksPerAnimalSpawns( arg0:int ):void;
	setTicksPerMonsterSpawns( arg0:int ):void;
	setTicksPerSpawns( arg0:any /*org.bukkit.entity.SpawnCategory*/, arg1:int ):void;
	setTicksPerWaterAmbientSpawns( arg0:int ):void;
	setTicksPerWaterSpawns( arg0:int ):void;
	setTicksPerWaterUndergroundCreatureSpawns( arg0:int ):void;
	setTime( arg0:long ):void;
	setType( arg0:Location, arg1:Material ):void;
	setType( arg0:int, arg1:int, arg2:int, arg3:Material ):void;
	setViewDistance( arg0:int ):void;
	setWaterAmbientSpawnLimit( arg0:int ):void;
	setWaterAnimalSpawnLimit( arg0:int ):void;
	setWaterUndergroundCreatureSpawnLimit( arg0:int ):void;
	setWeatherDuration( arg0:int ):void;
	showBossBar( bar:any /*net.kyori.adventure.bossbar.BossBar*/ ):void;
	showTitle( title:any /*net.kyori.adventure.title.Title*/ ):void;
	spawn<T>( arg0:Location, arg1:java.lang.Class<T> ):T;
	spawn<T>( arg0:Location, arg1:java.lang.Class<T>, arg2:any /*org.bukkit.event.entity.CreatureSpawnEvent$SpawnReason*/ ):T;
	spawn<T>( arg0:Location, arg1:java.lang.Class<T>, arg2:any /*org.bukkit.event.entity.CreatureSpawnEvent$SpawnReason*/, arg3:org.bukkit.util.Consumer<T> ):T;
	spawn<T>( arg0:Location, arg1:java.lang.Class<T>, arg2:boolean, arg3:org.bukkit.util.Consumer<T> ):T;
	spawn<T>( arg0:Location, arg1:java.lang.Class<T>, arg2:org.bukkit.util.Consumer<T> ):T;
	spawn<T>( arg0:Location, arg1:java.lang.Class<T>, arg2:org.bukkit.util.Consumer<T>, arg3:any /*org.bukkit.event.entity.CreatureSpawnEvent$SpawnReason*/ ):T;
	spawnArrow( arg0:Location, arg1:any /*org.bukkit.util.Vector*/, arg2:float, arg3:float ):any /*org.bukkit.entity.Arrow*/;
	spawnArrow<T>( arg0:Location, arg1:any /*org.bukkit.util.Vector*/, arg2:float, arg3:float, arg4:java.lang.Class<T> ):T;
	spawnEntity( arg0:Location, arg1:org.bukkit.entity.EntityType ):org.bukkit.entity.Entity;
	spawnEntity( arg0:Location, arg1:org.bukkit.entity.EntityType, arg2:any /*org.bukkit.event.entity.CreatureSpawnEvent$SpawnReason*/ ):org.bukkit.entity.Entity;
	spawnEntity( arg0:Location, arg1:org.bukkit.entity.EntityType, arg2:any /*org.bukkit.event.entity.CreatureSpawnEvent$SpawnReason*/, arg3:org.bukkit.util.Consumer<org.bukkit.entity.Entity> ):org.bukkit.entity.Entity;
	spawnEntity( arg0:Location, arg1:org.bukkit.entity.EntityType, arg2:boolean ):org.bukkit.entity.Entity;
	spawnFallingBlock( arg0:Location, arg1:Material, arg2:any /*byte*/ ):any /*org.bukkit.entity.FallingBlock*/;
	spawnFallingBlock( arg0:Location, arg1:any /*org.bukkit.block.data.BlockData*/ ):any /*org.bukkit.entity.FallingBlock*/;
	spawnFallingBlock( arg0:Location, arg1:any /*org.bukkit.material.MaterialData*/ ):any /*org.bukkit.entity.FallingBlock*/;
	spawnParticle( arg0:Particle, arg1:Location, arg2:int ):void;
	spawnParticle( arg0:Particle, arg1:Location, arg2:int, arg3:double, arg4:double, arg5:double ):void;
	spawnParticle( arg0:Particle, arg1:Location, arg2:int, arg3:double, arg4:double, arg5:double, arg6:double ):void;
	spawnParticle( arg0:Particle, arg1:double, arg2:double, arg3:double, arg4:int ):void;
	spawnParticle( arg0:Particle, arg1:double, arg2:double, arg3:double, arg4:int, arg5:double, arg6:double, arg7:double ):void;
	spawnParticle( arg0:Particle, arg1:double, arg2:double, arg3:double, arg4:int, arg5:double, arg6:double, arg7:double, arg8:double ):void;
	spawnParticle<T>( arg0:Particle, arg1:Location, arg2:int, arg3:T ):void;
	spawnParticle<T>( arg0:Particle, arg1:Location, arg2:int, arg3:double, arg4:double, arg5:double, arg6:T ):void;
	spawnParticle<T>( arg0:Particle, arg1:Location, arg2:int, arg3:double, arg4:double, arg5:double, arg6:double, arg7:T ):void;
	spawnParticle<T>( arg0:Particle, arg1:Location, arg2:int, arg3:double, arg4:double, arg5:double, arg6:double, arg7:T, arg8:boolean ):void;
	spawnParticle<T>( arg0:Particle, arg1:double, arg2:double, arg3:double, arg4:int, arg5:T ):void;
	spawnParticle<T>( arg0:Particle, arg1:double, arg2:double, arg3:double, arg4:int, arg5:double, arg6:double, arg7:double, arg8:T ):void;
	spawnParticle<T>( arg0:Particle, arg1:double, arg2:double, arg3:double, arg4:int, arg5:double, arg6:double, arg7:double, arg8:double, arg9:T ):void;
	spawnParticle<T>( arg0:Particle, arg1:double, arg2:double, arg3:double, arg4:int, arg5:double, arg6:double, arg7:double, arg8:double, arg9:T, arg10:boolean ):void;
	spawnParticle<T>( arg0:Particle, arg1:java.util.List<org.bukkit.entity.Player>, arg2:org.bukkit.entity.Player, arg3:double, arg4:double, arg5:double, arg6:int, arg7:double, arg8:double, arg9:double, arg10:double, arg11:T ):void;
	spawnParticle<T>( arg0:Particle, arg1:java.util.List<org.bukkit.entity.Player>, arg2:org.bukkit.entity.Player, arg3:double, arg4:double, arg5:double, arg6:int, arg7:double, arg8:double, arg9:double, arg10:double, arg11:T, arg12:boolean ):void;
	spigot(  ):any /*org.bukkit.World$Spigot*/;
	stopSound( sound:any /*net.kyori.adventure.sound.Sound*/ ):void;
	stopSound( stop:any /*net.kyori.adventure.sound.SoundStop*/ ):void;
	strikeLightning( arg0:Location ):any /*org.bukkit.entity.LightningStrike*/;
	strikeLightningEffect( arg0:Location ):any /*org.bukkit.entity.LightningStrike*/;
	unloadChunk( arg0:any /*org.bukkit.Chunk*/ ):boolean;
	unloadChunk( arg0:int, arg1:int ):boolean;
	unloadChunk( arg0:int, arg1:int, arg2:boolean ):boolean;
	unloadChunkRequest( arg0:int, arg1:int ):boolean;
	vanillaBiomeProvider(  ):any /*org.bukkit.generator.BiomeProvider*/;

} // end World

} // end namespace org.bukkit
declare namespace org.bukkit.block {

interface Block/* extends org.bukkit.metadata.Metadatable, org.bukkit.Translatable, net.kyori.adventure.translation.Translatable*/ {

	applyBoneMeal( arg0:any /*org.bukkit.block.BlockFace*/ ):boolean;
	breakNaturally(  ):boolean;
	breakNaturally( arg0:boolean ):boolean;
	breakNaturally( arg0:boolean, arg1:boolean ):boolean;
	breakNaturally( arg0:org.bukkit.inventory.ItemStack ):boolean;
	breakNaturally( arg0:org.bukkit.inventory.ItemStack, arg1:boolean ):boolean;
	breakNaturally( arg0:org.bukkit.inventory.ItemStack, arg1:boolean, arg2:boolean ):boolean;
	canPlace( arg0:any /*org.bukkit.block.data.BlockData*/ ):boolean;
	getBiome(  ):any /*org.bukkit.block.Biome*/;
	getBlockData(  ):any /*org.bukkit.block.data.BlockData*/;
	getBlockKey(  ):long;
	getBlockPower(  ):int;
	getBlockPower( arg0:any /*org.bukkit.block.BlockFace*/ ):int;
	getBlockSoundGroup(  ):any /*org.bukkit.SoundGroup*/;
	getBoundingBox(  ):any /*org.bukkit.util.BoundingBox*/;
	getBreakSpeed( arg0:org.bukkit.entity.Player ):float;
	getChunk(  ):any /*org.bukkit.Chunk*/;
	getCollisionShape(  ):any /*org.bukkit.util.VoxelShape*/;
	getComputedBiome(  ):any /*org.bukkit.block.Biome*/;
	getData(  ):any /*byte*/;
	getDestroySpeed( arg0:org.bukkit.inventory.ItemStack ):float;
	getDestroySpeed( arg0:org.bukkit.inventory.ItemStack, arg1:boolean ):float;
	getDrops(  ):java.util.Collection<org.bukkit.inventory.ItemStack>;
	getDrops( arg0:org.bukkit.inventory.ItemStack ):java.util.Collection<org.bukkit.inventory.ItemStack>;
	getDrops( arg0:org.bukkit.inventory.ItemStack, arg1:org.bukkit.entity.Entity ):java.util.Collection<org.bukkit.inventory.ItemStack>;
	getFace( arg0:Block ):any /*org.bukkit.block.BlockFace*/;
	getHumidity(  ):double;
	getLightFromBlocks(  ):any /*byte*/;
	getLightFromSky(  ):any /*byte*/;
	getLightLevel(  ):any /*byte*/;
	getLocation(  ):org.bukkit.Location;
	getLocation( arg0:org.bukkit.Location ):org.bukkit.Location;
	getMetadata( arg0:string ):java.util.List<any /*org.bukkit.metadata.MetadataValue*/>;
	getPistonMoveReaction(  ):any /*org.bukkit.block.PistonMoveReaction*/;
	getRelative( arg0:any /*org.bukkit.block.BlockFace*/ ):Block;
	getRelative( arg0:any /*org.bukkit.block.BlockFace*/, arg1:int ):Block;
	getRelative( arg0:int, arg1:int, arg2:int ):Block;
	getSoundGroup(  ):any /*com.destroystokyo.paper.block.BlockSoundGroup*/;
	getState(  ):any /*org.bukkit.block.BlockState*/;
	getState( arg0:boolean ):any /*org.bukkit.block.BlockState*/;
	getTemperature(  ):double;
	getTranslationKey(  ):string;
	getType(  ):org.bukkit.Material;
	getWorld(  ):org.bukkit.World;
	getX(  ):int;
	getY(  ):int;
	getZ(  ):int;
	hasMetadata( arg0:string ):boolean;
	isBlockFaceIndirectlyPowered( arg0:any /*org.bukkit.block.BlockFace*/ ):boolean;
	isBlockFacePowered( arg0:any /*org.bukkit.block.BlockFace*/ ):boolean;
	isBlockIndirectlyPowered(  ):boolean;
	isBlockPowered(  ):boolean;
	isBuildable(  ):boolean;
	isBurnable(  ):boolean;
	isCollidable(  ):boolean;
	isEmpty(  ):boolean;
	isLiquid(  ):boolean;
	isPassable(  ):boolean;
	isPreferredTool( arg0:org.bukkit.inventory.ItemStack ):boolean;
	isReplaceable(  ):boolean;
	isSolid(  ):boolean;
	isValidTool( arg0:org.bukkit.inventory.ItemStack ):boolean;
	randomTick(  ):void;
	rayTrace( arg0:org.bukkit.Location, arg1:any /*org.bukkit.util.Vector*/, arg2:double, arg3:any /*org.bukkit.FluidCollisionMode*/ ):any /*org.bukkit.util.RayTraceResult*/;
	removeMetadata( arg0:string, arg1:any /*org.bukkit.plugin.Plugin*/ ):void;
	setBiome( arg0:any /*org.bukkit.block.Biome*/ ):void;
	setBlockData( arg0:any /*org.bukkit.block.data.BlockData*/ ):void;
	setBlockData( arg0:any /*org.bukkit.block.data.BlockData*/, arg1:boolean ):void;
	setMetadata( arg0:string, arg1:any /*org.bukkit.metadata.MetadataValue*/ ):void;
	setType( arg0:org.bukkit.Material ):void;
	setType( arg0:org.bukkit.Material, arg1:boolean ):void;
	tick(  ):void;
	translationKey(  ):string;

} // end Block

} // end namespace org.bukkit.block
declare namespace org.bukkit.entity {

/* enum */class EntityType/* extends java.lang.Enum<any> implements org.bukkit.Keyed, org.bukkit.Translatable, net.kyori.adventure.translation.Translatable*/ {

	// DROPPED_ITEM:EntityType;
	// EXPERIENCE_ORB:EntityType;
	// AREA_EFFECT_CLOUD:EntityType;
	// ELDER_GUARDIAN:EntityType;
	// WITHER_SKELETON:EntityType;
	// STRAY:EntityType;
	// EGG:EntityType;
	// LEASH_HITCH:EntityType;
	// PAINTING:EntityType;
	// ARROW:EntityType;
	// SNOWBALL:EntityType;
	// FIREBALL:EntityType;
	// SMALL_FIREBALL:EntityType;
	// ENDER_PEARL:EntityType;
	// ENDER_SIGNAL:EntityType;
	// SPLASH_POTION:EntityType;
	// THROWN_EXP_BOTTLE:EntityType;
	// ITEM_FRAME:EntityType;
	// WITHER_SKULL:EntityType;
	// PRIMED_TNT:EntityType;
	// FALLING_BLOCK:EntityType;
	// FIREWORK:EntityType;
	// HUSK:EntityType;
	// SPECTRAL_ARROW:EntityType;
	// SHULKER_BULLET:EntityType;
	// DRAGON_FIREBALL:EntityType;
	// ZOMBIE_VILLAGER:EntityType;
	// SKELETON_HORSE:EntityType;
	// ZOMBIE_HORSE:EntityType;
	// ARMOR_STAND:EntityType;
	// DONKEY:EntityType;
	// MULE:EntityType;
	// EVOKER_FANGS:EntityType;
	// EVOKER:EntityType;
	// VEX:EntityType;
	// VINDICATOR:EntityType;
	// ILLUSIONER:EntityType;
	// MINECART_COMMAND:EntityType;
	// BOAT:EntityType;
	// MINECART:EntityType;
	// MINECART_CHEST:EntityType;
	// MINECART_FURNACE:EntityType;
	// MINECART_TNT:EntityType;
	// MINECART_HOPPER:EntityType;
	// MINECART_MOB_SPAWNER:EntityType;
	// CREEPER:EntityType;
	// SKELETON:EntityType;
	// SPIDER:EntityType;
	// GIANT:EntityType;
	// ZOMBIE:EntityType;
	// SLIME:EntityType;
	// GHAST:EntityType;
	// ZOMBIFIED_PIGLIN:EntityType;
	// ENDERMAN:EntityType;
	// CAVE_SPIDER:EntityType;
	// SILVERFISH:EntityType;
	// BLAZE:EntityType;
	// MAGMA_CUBE:EntityType;
	// ENDER_DRAGON:EntityType;
	// WITHER:EntityType;
	// BAT:EntityType;
	// WITCH:EntityType;
	// ENDERMITE:EntityType;
	// GUARDIAN:EntityType;
	// SHULKER:EntityType;
	// PIG:EntityType;
	// SHEEP:EntityType;
	// COW:EntityType;
	// CHICKEN:EntityType;
	// SQUID:EntityType;
	// WOLF:EntityType;
	// MUSHROOM_COW:EntityType;
	// SNOWMAN:EntityType;
	// OCELOT:EntityType;
	// IRON_GOLEM:EntityType;
	// HORSE:EntityType;
	// RABBIT:EntityType;
	// POLAR_BEAR:EntityType;
	// LLAMA:EntityType;
	// LLAMA_SPIT:EntityType;
	// PARROT:EntityType;
	// VILLAGER:EntityType;
	// ENDER_CRYSTAL:EntityType;
	// TURTLE:EntityType;
	// PHANTOM:EntityType;
	// TRIDENT:EntityType;
	// COD:EntityType;
	// SALMON:EntityType;
	// PUFFERFISH:EntityType;
	// TROPICAL_FISH:EntityType;
	// DROWNED:EntityType;
	// DOLPHIN:EntityType;
	// CAT:EntityType;
	// PANDA:EntityType;
	// PILLAGER:EntityType;
	// RAVAGER:EntityType;
	// TRADER_LLAMA:EntityType;
	// WANDERING_TRADER:EntityType;
	// FOX:EntityType;
	// BEE:EntityType;
	// HOGLIN:EntityType;
	// PIGLIN:EntityType;
	// STRIDER:EntityType;
	// ZOGLIN:EntityType;
	// PIGLIN_BRUTE:EntityType;
	// AXOLOTL:EntityType;
	// GLOW_ITEM_FRAME:EntityType;
	// GLOW_SQUID:EntityType;
	// GOAT:EntityType;
	// MARKER:EntityType;
	// ALLAY:EntityType;
	// CHEST_BOAT:EntityType;
	// FROG:EntityType;
	// TADPOLE:EntityType;
	// WARDEN:EntityType;
	// CAMEL:EntityType;
	// BLOCK_DISPLAY:EntityType;
	// INTERACTION:EntityType;
	// ITEM_DISPLAY:EntityType;
	// SNIFFER:EntityType;
	// TEXT_DISPLAY:EntityType;
	// FISHING_HOOK:EntityType;
	// LIGHTNING:EntityType;
	// PLAYER:EntityType;
	// UNKNOWN:EntityType;

	compareTo<E>( arg0:E ):int;
	describeConstable(  ):java.util.Optional<any /*java.lang.Enum$EnumDesc*/>;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	getDeclaringClass<E>(  ):java.lang.Class<E>;
	getDefaultAttributes(  ):any /*org.bukkit.attribute.Attributable*/;
	getEntityClass(  ):java.lang.Class<Entity>;
	getKey(  ):any /*org.bukkit.NamespacedKey*/;
	getName(  ):string;
	getTranslationKey(  ):string;
	getTypeId(  ):any /*short*/;
	hasDefaultAttributes(  ):boolean;
	isAlive(  ):boolean;
	isSpawnable(  ):boolean;
	key(  ):any /*net.kyori.adventure.key.Key*/;
	name(  ):string;
	ordinal(  ):int;
	toString(  ):string;
	translationKey(  ):string;

} // end EntityType

} // end namespace org.bukkit.entity
declare namespace org.bukkit.entity {

interface Entity/* extends org.bukkit.metadata.Metadatable, org.bukkit.command.CommandSender, org.bukkit.Nameable, org.bukkit.persistence.PersistentDataHolder, net.kyori.adventure.text.event.HoverEventSource<any>, net.kyori.adventure.sound.Sound$Emitter*/ {

	addAttachment( arg0:any /*org.bukkit.plugin.Plugin*/ ):any /*org.bukkit.permissions.PermissionAttachment*/;
	addAttachment( arg0:any /*org.bukkit.plugin.Plugin*/, arg1:int ):any /*org.bukkit.permissions.PermissionAttachment*/;
	addAttachment( arg0:any /*org.bukkit.plugin.Plugin*/, arg1:string, arg2:boolean ):any /*org.bukkit.permissions.PermissionAttachment*/;
	addAttachment( arg0:any /*org.bukkit.plugin.Plugin*/, arg1:string, arg2:boolean, arg3:int ):any /*org.bukkit.permissions.PermissionAttachment*/;
	addPassenger( arg0:Entity ):boolean;
	addScoreboardTag( arg0:string ):boolean;
	asHoverEvent(  ):any /*net.kyori.adventure.text.event.HoverEvent*/;
	asHoverEvent( arg0:UnaryOperator<any /*net.kyori.adventure.text.event.HoverEvent$ShowEntity*/> ):any /*net.kyori.adventure.text.event.HoverEvent*/;
	clearTitle(  ):void;
	collidesAt( arg0:org.bukkit.Location ):boolean;
	customName(  ):any /*net.kyori.adventure.text.Component*/;
	customName( arg0:any /*net.kyori.adventure.text.Component*/ ):void;
	deleteMessage( signature:any /*net.kyori.adventure.chat.SignedMessage$Signature*/ ):void;
	deleteMessage( signedMessage:any /*net.kyori.adventure.chat.SignedMessage*/ ):void;
	eject(  ):boolean;
	filterAudience( filter:Predicate<any /*net.kyori.adventure.audience.Audience*/> ):any /*net.kyori.adventure.audience.Audience*/;
	forEachAudience( action:Consumer<any /*net.kyori.adventure.audience.Audience*/> ):void;
	fromMobSpawner(  ):boolean;
	get<T>( pointer:any /*net.kyori.adventure.pointer.Pointer*/ ):java.util.Optional<T>;
	getBoundingBox(  ):any /*org.bukkit.util.BoundingBox*/;
	getChunk(  ):any /*org.bukkit.Chunk*/;
	getCustomName(  ):string;
	getEffectivePermissions(  ):java.util.Set<any /*org.bukkit.permissions.PermissionAttachmentInfo*/>;
	getEntityId(  ):int;
	getEntitySpawnReason(  ):any /*org.bukkit.event.entity.CreatureSpawnEvent$SpawnReason*/;
	getFacing(  ):any /*org.bukkit.block.BlockFace*/;
	getFallDistance(  ):float;
	getFireTicks(  ):int;
	getFreezeTicks(  ):int;
	getHeight(  ):double;
	getLastDamageCause(  ):org.bukkit.event.entity.EntityDamageEvent;
	getLocation(  ):org.bukkit.Location;
	getLocation( arg0:org.bukkit.Location ):org.bukkit.Location;
	getMaxFireTicks(  ):int;
	getMaxFreezeTicks(  ):int;
	getMetadata( arg0:string ):java.util.List<any /*org.bukkit.metadata.MetadataValue*/>;
	getName(  ):string;
	getNearbyEntities( arg0:double, arg1:double, arg2:double ):java.util.List<Entity>;
	getOrDefault<T>( pointer:any /*net.kyori.adventure.pointer.Pointer*/, defaultValue:T ):T;
	getOrDefaultFrom<T>( pointer:any /*net.kyori.adventure.pointer.Pointer*/, defaultValue:Supplier<T> ):T;
	getOrigin(  ):org.bukkit.Location;
	getPassenger(  ):Entity;
	getPassengers(  ):java.util.List<Entity>;
	getPersistentDataContainer(  ):any /*org.bukkit.persistence.PersistentDataContainer*/;
	getPistonMoveReaction(  ):any /*org.bukkit.block.PistonMoveReaction*/;
	getPortalCooldown(  ):int;
	getPose(  ):any /*org.bukkit.entity.Pose*/;
	getScoreboardTags(  ):java.util.Set<string>;
	getServer(  ):any /*org.bukkit.Server*/;
	getSpawnCategory(  ):any /*org.bukkit.entity.SpawnCategory*/;
	getSwimHighSpeedSplashSound(  ):org.bukkit.Sound;
	getSwimSound(  ):org.bukkit.Sound;
	getSwimSplashSound(  ):org.bukkit.Sound;
	getTicksLived(  ):int;
	getTrackedPlayers(  ):java.util.Set<Player>;
	getType(  ):EntityType;
	getUniqueId(  ):any /*java.util.UUID*/;
	getVehicle(  ):Entity;
	getVelocity(  ):any /*org.bukkit.util.Vector*/;
	getWidth(  ):double;
	getWorld(  ):org.bukkit.World;
	hasGravity(  ):boolean;
	hasMetadata( arg0:string ):boolean;
	hasPermission( arg0:any /*org.bukkit.permissions.Permission*/ ):boolean;
	hasPermission( arg0:string ):boolean;
	hideBossBar( bar:any /*net.kyori.adventure.bossbar.BossBar*/ ):void;
	isCustomNameVisible(  ):boolean;
	isDead(  ):boolean;
	isEmpty(  ):boolean;
	isFreezeTickingLocked(  ):boolean;
	isFrozen(  ):boolean;
	isGlowing(  ):boolean;
	isInBubbleColumn(  ):boolean;
	isInLava(  ):boolean;
	isInPowderedSnow(  ):boolean;
	isInRain(  ):boolean;
	isInWater(  ):boolean;
	isInWaterOrBubbleColumn(  ):boolean;
	isInWaterOrRain(  ):boolean;
	isInWaterOrRainOrBubbleColumn(  ):boolean;
	isInsideVehicle(  ):boolean;
	isInvulnerable(  ):boolean;
	isOnGround(  ):boolean;
	isOp(  ):boolean;
	isPermissionSet( arg0:any /*org.bukkit.permissions.Permission*/ ):boolean;
	isPermissionSet( arg0:string ):boolean;
	isPersistent(  ):boolean;
	isSilent(  ):boolean;
	isSneaking(  ):boolean;
	isTicking(  ):boolean;
	isUnderWater(  ):boolean;
	isValid(  ):boolean;
	isVisibleByDefault(  ):boolean;
	isVisualFire(  ):boolean;
	leaveVehicle(  ):boolean;
	lockFreezeTicks( arg0:boolean ):void;
	name(  ):any /*net.kyori.adventure.text.Component*/;
	openBook( book:any /*net.kyori.adventure.inventory.Book$Builder*/ ):void;
	openBook( book:any /*net.kyori.adventure.inventory.Book*/ ):void;
	permissionValue( arg0:any /*org.bukkit.permissions.Permission*/ ):any /*net.kyori.adventure.util.TriState*/;
	permissionValue( arg0:string ):any /*net.kyori.adventure.util.TriState*/;
	playEffect( arg0:any /*org.bukkit.EntityEffect*/ ):void;
	playSound( sound:any /*net.kyori.adventure.sound.Sound*/ ):void;
	playSound( sound:any /*net.kyori.adventure.sound.Sound*/, emitter:any /*net.kyori.adventure.sound.Sound$Emitter*/ ):void;
	playSound( sound:any /*net.kyori.adventure.sound.Sound*/, x:double, y:double, z:double ):void;
	pointers(  ):any /*net.kyori.adventure.pointer.Pointers*/;
	recalculatePermissions(  ):void;
	remove(  ):void;
	removeAttachment( arg0:any /*org.bukkit.permissions.PermissionAttachment*/ ):void;
	removeMetadata( arg0:string, arg1:any /*org.bukkit.plugin.Plugin*/ ):void;
	removePassenger( arg0:Entity ):boolean;
	removeScoreboardTag( arg0:string ):boolean;
	resetTitle(  ):void;
	sendActionBar( message:any /*net.kyori.adventure.text.Component*/ ):void;
	sendActionBar( message:any /*net.kyori.adventure.text.ComponentLike*/ ):void;
	sendMessage( ...arg0:any /*net.md_5.bungee.api.chat.BaseComponent*/[] ):void;
	sendMessage( ...arg0:string[] ):void;
	sendMessage( arg0:any /*java.util.UUID*/, ...arg1:string[] ):void;
	sendMessage( arg0:any /*java.util.UUID*/, arg1:string ):void;
	sendMessage( arg0:any /*net.kyori.adventure.identity.Identity*/, arg1:any /*net.kyori.adventure.text.Component*/, arg2:any /*net.kyori.adventure.audience.MessageType*/ ):void;
	sendMessage( arg0:any /*net.md_5.bungee.api.chat.BaseComponent*/ ):void;
	sendMessage( arg0:string ):void;
	sendMessage( message:any /*net.kyori.adventure.text.Component*/ ):void;
	sendMessage( message:any /*net.kyori.adventure.text.Component*/, boundChatType:any /*net.kyori.adventure.chat.ChatType$Bound*/ ):void;
	sendMessage( message:any /*net.kyori.adventure.text.Component*/, type:any /*net.kyori.adventure.audience.MessageType*/ ):void;
	sendMessage( message:any /*net.kyori.adventure.text.ComponentLike*/ ):void;
	sendMessage( message:any /*net.kyori.adventure.text.ComponentLike*/, boundChatType:any /*net.kyori.adventure.chat.ChatType$Bound*/ ):void;
	sendMessage( message:any /*net.kyori.adventure.text.ComponentLike*/, type:any /*net.kyori.adventure.audience.MessageType*/ ):void;
	sendMessage( signedMessage:any /*net.kyori.adventure.chat.SignedMessage*/, boundChatType:any /*net.kyori.adventure.chat.ChatType$Bound*/ ):void;
	sendMessage( source:any /*net.kyori.adventure.identity.Identified*/, message:any /*net.kyori.adventure.text.Component*/ ):void;
	sendMessage( source:any /*net.kyori.adventure.identity.Identified*/, message:any /*net.kyori.adventure.text.Component*/, type:any /*net.kyori.adventure.audience.MessageType*/ ):void;
	sendMessage( source:any /*net.kyori.adventure.identity.Identified*/, message:any /*net.kyori.adventure.text.ComponentLike*/ ):void;
	sendMessage( source:any /*net.kyori.adventure.identity.Identified*/, message:any /*net.kyori.adventure.text.ComponentLike*/, type:any /*net.kyori.adventure.audience.MessageType*/ ):void;
	sendMessage( source:any /*net.kyori.adventure.identity.Identity*/, message:any /*net.kyori.adventure.text.Component*/ ):void;
	sendMessage( source:any /*net.kyori.adventure.identity.Identity*/, message:any /*net.kyori.adventure.text.ComponentLike*/ ):void;
	sendMessage( source:any /*net.kyori.adventure.identity.Identity*/, message:any /*net.kyori.adventure.text.ComponentLike*/, type:any /*net.kyori.adventure.audience.MessageType*/ ):void;
	sendPlainMessage( arg0:string ):void;
	sendPlayerListFooter( footer:any /*net.kyori.adventure.text.Component*/ ):void;
	sendPlayerListFooter( footer:any /*net.kyori.adventure.text.ComponentLike*/ ):void;
	sendPlayerListHeader( header:any /*net.kyori.adventure.text.Component*/ ):void;
	sendPlayerListHeader( header:any /*net.kyori.adventure.text.ComponentLike*/ ):void;
	sendPlayerListHeaderAndFooter( header:any /*net.kyori.adventure.text.Component*/, footer:any /*net.kyori.adventure.text.Component*/ ):void;
	sendPlayerListHeaderAndFooter( header:any /*net.kyori.adventure.text.ComponentLike*/, footer:any /*net.kyori.adventure.text.ComponentLike*/ ):void;
	sendRichMessage( arg0:string ):void;
	sendTitlePart<T>( part:any /*net.kyori.adventure.title.TitlePart*/, value:T ):void;
	setCustomName( arg0:string ):void;
	setCustomNameVisible( arg0:boolean ):void;
	setFallDistance( arg0:float ):void;
	setFireTicks( arg0:int ):void;
	setFreezeTicks( arg0:int ):void;
	setGlowing( arg0:boolean ):void;
	setGravity( arg0:boolean ):void;
	setInvulnerable( arg0:boolean ):void;
	setLastDamageCause( arg0:org.bukkit.event.entity.EntityDamageEvent ):void;
	setMetadata( arg0:string, arg1:any /*org.bukkit.metadata.MetadataValue*/ ):void;
	setOp( arg0:boolean ):void;
	setPassenger( arg0:Entity ):boolean;
	setPersistent( arg0:boolean ):void;
	setPortalCooldown( arg0:int ):void;
	setRotation( arg0:float, arg1:float ):void;
	setSilent( arg0:boolean ):void;
	setSneaking( arg0:boolean ):void;
	setTicksLived( arg0:int ):void;
	setVelocity( arg0:any /*org.bukkit.util.Vector*/ ):void;
	setVisibleByDefault( arg0:boolean ):void;
	setVisualFire( arg0:boolean ):void;
	showBossBar( bar:any /*net.kyori.adventure.bossbar.BossBar*/ ):void;
	showTitle( title:any /*net.kyori.adventure.title.Title*/ ):void;
	spawnAt( arg0:org.bukkit.Location ):boolean;
	spawnAt( arg0:org.bukkit.Location, arg1:any /*org.bukkit.event.entity.CreatureSpawnEvent$SpawnReason*/ ):boolean;
	spigot(  ):any /*org.bukkit.entity.Entity$Spigot*/;
	stopSound( sound:any /*net.kyori.adventure.sound.Sound*/ ):void;
	stopSound( stop:any /*net.kyori.adventure.sound.SoundStop*/ ):void;
	teamDisplayName(  ):any /*net.kyori.adventure.text.Component*/;
	teleport( arg0:Entity ):boolean;
	teleport( arg0:Entity, arg1:any /*org.bukkit.event.player.PlayerTeleportEvent$TeleportCause*/ ):boolean;
	teleport( arg0:org.bukkit.Location ):boolean;
	teleport( arg0:org.bukkit.Location, ...arg1:any /*io.papermc.paper.entity.TeleportFlag*/[] ):boolean;
	teleport( arg0:org.bukkit.Location, arg1:any /*org.bukkit.event.player.PlayerTeleportEvent$TeleportCause*/ ):boolean;
	teleport( arg0:org.bukkit.Location, arg1:any /*org.bukkit.event.player.PlayerTeleportEvent$TeleportCause*/, ...arg2:any /*io.papermc.paper.entity.TeleportFlag*/[] ):boolean;
	teleportAsync( arg0:org.bukkit.Location ):any /*java.util.concurrent.CompletableFuture*/;
	teleportAsync( arg0:org.bukkit.Location, arg1:any /*org.bukkit.event.player.PlayerTeleportEvent$TeleportCause*/ ):any /*java.util.concurrent.CompletableFuture*/;
	wouldCollideUsing( arg0:any /*org.bukkit.util.BoundingBox*/ ):boolean;

} // end Entity

} // end namespace org.bukkit.entity
declare namespace org.bukkit.entity {

interface LivingEntity/* extends org.bukkit.attribute.Attributable, Damageable, org.bukkit.projectiles.ProjectileSource, io.papermc.paper.entity.Frictional*/ {

	addAttachment( arg0:any /*org.bukkit.plugin.Plugin*/ ):any /*org.bukkit.permissions.PermissionAttachment*/;
	addAttachment( arg0:any /*org.bukkit.plugin.Plugin*/, arg1:int ):any /*org.bukkit.permissions.PermissionAttachment*/;
	addAttachment( arg0:any /*org.bukkit.plugin.Plugin*/, arg1:string, arg2:boolean ):any /*org.bukkit.permissions.PermissionAttachment*/;
	addAttachment( arg0:any /*org.bukkit.plugin.Plugin*/, arg1:string, arg2:boolean, arg3:int ):any /*org.bukkit.permissions.PermissionAttachment*/;
	addPassenger( arg0:Entity ):boolean;
	addPotionEffect( arg0:any /*org.bukkit.potion.PotionEffect*/ ):boolean;
	addPotionEffect( arg0:any /*org.bukkit.potion.PotionEffect*/, arg1:boolean ):boolean;
	addPotionEffects( arg0:java.util.Collection<any /*org.bukkit.potion.PotionEffect*/> ):boolean;
	addScoreboardTag( arg0:string ):boolean;
	asHoverEvent(  ):any /*net.kyori.adventure.text.event.HoverEvent*/;
	asHoverEvent( arg0:UnaryOperator<any /*net.kyori.adventure.text.event.HoverEvent$ShowEntity*/> ):any /*net.kyori.adventure.text.event.HoverEvent*/;
	attack( arg0:Entity ):void;
	broadcastSlotBreak( arg0:any /*org.bukkit.inventory.EquipmentSlot*/ ):void;
	broadcastSlotBreak( arg0:any /*org.bukkit.inventory.EquipmentSlot*/, arg1:java.util.Collection<Player> ):void;
	canBreatheUnderwater(  ):boolean;
	clearActiveItem(  ):void;
	clearTitle(  ):void;
	collidesAt( arg0:org.bukkit.Location ):boolean;
	customName(  ):any /*net.kyori.adventure.text.Component*/;
	customName( arg0:any /*net.kyori.adventure.text.Component*/ ):void;
	damage( arg0:double ):void;
	damage( arg0:double, arg1:Entity ):void;
	damageItemStack( arg0:any /*org.bukkit.inventory.EquipmentSlot*/, arg1:int ):void;
	damageItemStack( arg0:org.bukkit.inventory.ItemStack, arg1:int ):org.bukkit.inventory.ItemStack;
	deleteMessage( signature:any /*net.kyori.adventure.chat.SignedMessage$Signature*/ ):void;
	deleteMessage( signedMessage:any /*net.kyori.adventure.chat.SignedMessage*/ ):void;
	eject(  ):boolean;
	filterAudience( filter:Predicate<any /*net.kyori.adventure.audience.Audience*/> ):any /*net.kyori.adventure.audience.Audience*/;
	forEachAudience( action:Consumer<any /*net.kyori.adventure.audience.Audience*/> ):void;
	fromMobSpawner(  ):boolean;
	get<T>( pointer:any /*net.kyori.adventure.pointer.Pointer*/ ):java.util.Optional<T>;
	getAbsorptionAmount(  ):double;
	getActiveItem(  ):org.bukkit.inventory.ItemStack;
	getActivePotionEffects(  ):java.util.Collection<any /*org.bukkit.potion.PotionEffect*/>;
	getArrowCooldown(  ):int;
	getArrowsInBody(  ):int;
	getArrowsStuck(  ):int;
	getAttribute( arg0:any /*org.bukkit.attribute.Attribute*/ ):any /*org.bukkit.attribute.AttributeInstance*/;
	getBeeStingerCooldown(  ):int;
	getBeeStingersInBody(  ):int;
	getBodyYaw(  ):float;
	getBoundingBox(  ):any /*org.bukkit.util.BoundingBox*/;
	getCanPickupItems(  ):boolean;
	getCategory(  ):any /*org.bukkit.entity.EntityCategory*/;
	getChunk(  ):any /*org.bukkit.Chunk*/;
	getCollidableExemptions(  ):java.util.Set<any /*java.util.UUID*/>;
	getCustomName(  ):string;
	getDeathSound(  ):org.bukkit.Sound;
	getDrinkingSound( arg0:org.bukkit.inventory.ItemStack ):org.bukkit.Sound;
	getEatingSound( arg0:org.bukkit.inventory.ItemStack ):org.bukkit.Sound;
	getEffectivePermissions(  ):java.util.Set<any /*org.bukkit.permissions.PermissionAttachmentInfo*/>;
	getEntityId(  ):int;
	getEntitySpawnReason(  ):any /*org.bukkit.event.entity.CreatureSpawnEvent$SpawnReason*/;
	getEquipment(  ):any /*org.bukkit.inventory.EntityEquipment*/;
	getEyeHeight(  ):double;
	getEyeHeight( arg0:boolean ):double;
	getEyeLocation(  ):org.bukkit.Location;
	getFacing(  ):any /*org.bukkit.block.BlockFace*/;
	getFallDamageSound( arg0:int ):org.bukkit.Sound;
	getFallDamageSoundBig(  ):org.bukkit.Sound;
	getFallDamageSoundSmall(  ):org.bukkit.Sound;
	getFallDistance(  ):float;
	getFireTicks(  ):int;
	getFreezeTicks(  ):int;
	getFrictionState(  ):any /*net.kyori.adventure.util.TriState*/;
	getHandRaised(  ):any /*org.bukkit.inventory.EquipmentSlot*/;
	getHandRaisedTime(  ):int;
	getHealth(  ):double;
	getHeight(  ):double;
	getHurtDirection(  ):float;
	getHurtSound(  ):org.bukkit.Sound;
	getItemUseRemainingTime(  ):int;
	getKiller(  ):Player;
	getLastDamage(  ):double;
	getLastDamageCause(  ):org.bukkit.event.entity.EntityDamageEvent;
	getLastTwoTargetBlocks( arg0:java.util.Set<org.bukkit.Material>, arg1:int ):java.util.List<org.bukkit.block.Block>;
	getLeashHolder(  ):Entity;
	getLineOfSight( arg0:java.util.Set<org.bukkit.Material>, arg1:int ):java.util.List<org.bukkit.block.Block>;
	getLocation(  ):org.bukkit.Location;
	getLocation( arg0:org.bukkit.Location ):org.bukkit.Location;
	getMaxFireTicks(  ):int;
	getMaxFreezeTicks(  ):int;
	getMaxHealth(  ):double;
	getMaximumAir(  ):int;
	getMaximumNoDamageTicks(  ):int;
	getMemory<T>( arg0:any /*org.bukkit.entity.memory.MemoryKey*/ ):T;
	getMetadata( arg0:string ):java.util.List<any /*org.bukkit.metadata.MetadataValue*/>;
	getName(  ):string;
	getNearbyEntities( arg0:double, arg1:double, arg2:double ):java.util.List<Entity>;
	getNoDamageTicks(  ):int;
	getOrDefault<T>( pointer:any /*net.kyori.adventure.pointer.Pointer*/, defaultValue:T ):T;
	getOrDefaultFrom<T>( pointer:any /*net.kyori.adventure.pointer.Pointer*/, defaultValue:Supplier<T> ):T;
	getOrigin(  ):org.bukkit.Location;
	getPassenger(  ):Entity;
	getPassengers(  ):java.util.List<Entity>;
	getPersistentDataContainer(  ):any /*org.bukkit.persistence.PersistentDataContainer*/;
	getPistonMoveReaction(  ):any /*org.bukkit.block.PistonMoveReaction*/;
	getPortalCooldown(  ):int;
	getPose(  ):any /*org.bukkit.entity.Pose*/;
	getPotionEffect( arg0:any /*org.bukkit.potion.PotionEffectType*/ ):any /*org.bukkit.potion.PotionEffect*/;
	getRemainingAir(  ):int;
	getRemoveWhenFarAway(  ):boolean;
	getScoreboardTags(  ):java.util.Set<string>;
	getServer(  ):any /*org.bukkit.Server*/;
	getShieldBlockingDelay(  ):int;
	getSpawnCategory(  ):any /*org.bukkit.entity.SpawnCategory*/;
	getSwimHighSpeedSplashSound(  ):org.bukkit.Sound;
	getSwimSound(  ):org.bukkit.Sound;
	getSwimSplashSound(  ):org.bukkit.Sound;
	getTargetBlock( arg0:int ):org.bukkit.block.Block;
	getTargetBlock( arg0:int, arg1:any /*com.destroystokyo.paper.block.TargetBlockInfo$FluidMode*/ ):org.bukkit.block.Block;
	getTargetBlock( arg0:java.util.Set<org.bukkit.Material>, arg1:int ):org.bukkit.block.Block;
	getTargetBlockExact( arg0:int ):org.bukkit.block.Block;
	getTargetBlockExact( arg0:int, arg1:any /*org.bukkit.FluidCollisionMode*/ ):org.bukkit.block.Block;
	getTargetBlockFace( arg0:int ):any /*org.bukkit.block.BlockFace*/;
	getTargetBlockFace( arg0:int, arg1:any /*com.destroystokyo.paper.block.TargetBlockInfo$FluidMode*/ ):any /*org.bukkit.block.BlockFace*/;
	getTargetBlockFace( arg0:int, arg1:any /*org.bukkit.FluidCollisionMode*/ ):any /*org.bukkit.block.BlockFace*/;
	getTargetBlockInfo( arg0:int ):any /*com.destroystokyo.paper.block.TargetBlockInfo*/;
	getTargetBlockInfo( arg0:int, arg1:any /*com.destroystokyo.paper.block.TargetBlockInfo$FluidMode*/ ):any /*com.destroystokyo.paper.block.TargetBlockInfo*/;
	getTargetEntity( arg0:int ):Entity;
	getTargetEntity( arg0:int, arg1:boolean ):Entity;
	getTargetEntityInfo( arg0:int ):any /*com.destroystokyo.paper.entity.TargetEntityInfo*/;
	getTargetEntityInfo( arg0:int, arg1:boolean ):any /*com.destroystokyo.paper.entity.TargetEntityInfo*/;
	getTicksLived(  ):int;
	getTrackedPlayers(  ):java.util.Set<Player>;
	getType(  ):EntityType;
	getUniqueId(  ):any /*java.util.UUID*/;
	getVehicle(  ):Entity;
	getVelocity(  ):any /*org.bukkit.util.Vector*/;
	getWidth(  ):double;
	getWorld(  ):org.bukkit.World;
	hasAI(  ):boolean;
	hasGravity(  ):boolean;
	hasLineOfSight( arg0:Entity ):boolean;
	hasLineOfSight( arg0:org.bukkit.Location ):boolean;
	hasMetadata( arg0:string ):boolean;
	hasPermission( arg0:any /*org.bukkit.permissions.Permission*/ ):boolean;
	hasPermission( arg0:string ):boolean;
	hasPotionEffect( arg0:any /*org.bukkit.potion.PotionEffectType*/ ):boolean;
	hideBossBar( bar:any /*net.kyori.adventure.bossbar.BossBar*/ ):void;
	isClimbing(  ):boolean;
	isCollidable(  ):boolean;
	isCustomNameVisible(  ):boolean;
	isDead(  ):boolean;
	isEmpty(  ):boolean;
	isFreezeTickingLocked(  ):boolean;
	isFrozen(  ):boolean;
	isGliding(  ):boolean;
	isGlowing(  ):boolean;
	isHandRaised(  ):boolean;
	isInBubbleColumn(  ):boolean;
	isInLava(  ):boolean;
	isInPowderedSnow(  ):boolean;
	isInRain(  ):boolean;
	isInWater(  ):boolean;
	isInWaterOrBubbleColumn(  ):boolean;
	isInWaterOrRain(  ):boolean;
	isInWaterOrRainOrBubbleColumn(  ):boolean;
	isInsideVehicle(  ):boolean;
	isInvisible(  ):boolean;
	isInvulnerable(  ):boolean;
	isJumping(  ):boolean;
	isLeashed(  ):boolean;
	isOnGround(  ):boolean;
	isOp(  ):boolean;
	isPermissionSet( arg0:any /*org.bukkit.permissions.Permission*/ ):boolean;
	isPermissionSet( arg0:string ):boolean;
	isPersistent(  ):boolean;
	isRiptiding(  ):boolean;
	isSilent(  ):boolean;
	isSleeping(  ):boolean;
	isSneaking(  ):boolean;
	isSwimming(  ):boolean;
	isTicking(  ):boolean;
	isUnderWater(  ):boolean;
	isValid(  ):boolean;
	isVisibleByDefault(  ):boolean;
	isVisualFire(  ):boolean;
	knockback( arg0:double, arg1:double, arg2:double ):void;
	launchProjectile<T>( arg0:java.lang.Class<T> ):T;
	launchProjectile<T>( arg0:java.lang.Class<T>, arg1:any /*org.bukkit.util.Vector*/ ):T;
	launchProjectile<T>( arg0:java.lang.Class<T>, arg1:any /*org.bukkit.util.Vector*/, arg2:org.bukkit.util.Consumer<T> ):T;
	leaveVehicle(  ):boolean;
	lockFreezeTicks( arg0:boolean ):void;
	name(  ):any /*net.kyori.adventure.text.Component*/;
	openBook( book:any /*net.kyori.adventure.inventory.Book$Builder*/ ):void;
	openBook( book:any /*net.kyori.adventure.inventory.Book*/ ):void;
	permissionValue( arg0:any /*org.bukkit.permissions.Permission*/ ):any /*net.kyori.adventure.util.TriState*/;
	permissionValue( arg0:string ):any /*net.kyori.adventure.util.TriState*/;
	playEffect( arg0:any /*org.bukkit.EntityEffect*/ ):void;
	playPickupItemAnimation( arg0:any /*org.bukkit.entity.Item*/ ):void;
	playPickupItemAnimation( arg0:any /*org.bukkit.entity.Item*/, arg1:int ):void;
	playSound( sound:any /*net.kyori.adventure.sound.Sound*/ ):void;
	playSound( sound:any /*net.kyori.adventure.sound.Sound*/, emitter:any /*net.kyori.adventure.sound.Sound$Emitter*/ ):void;
	playSound( sound:any /*net.kyori.adventure.sound.Sound*/, x:double, y:double, z:double ):void;
	pointers(  ):any /*net.kyori.adventure.pointer.Pointers*/;
	rayTraceBlocks( arg0:double ):any /*org.bukkit.util.RayTraceResult*/;
	rayTraceBlocks( arg0:double, arg1:any /*org.bukkit.FluidCollisionMode*/ ):any /*org.bukkit.util.RayTraceResult*/;
	rayTraceEntities( arg0:int ):any /*org.bukkit.util.RayTraceResult*/;
	rayTraceEntities( arg0:int, arg1:boolean ):any /*org.bukkit.util.RayTraceResult*/;
	recalculatePermissions(  ):void;
	registerAttribute( arg0:any /*org.bukkit.attribute.Attribute*/ ):void;
	remove(  ):void;
	removeAttachment( arg0:any /*org.bukkit.permissions.PermissionAttachment*/ ):void;
	removeMetadata( arg0:string, arg1:any /*org.bukkit.plugin.Plugin*/ ):void;
	removePassenger( arg0:Entity ):boolean;
	removePotionEffect( arg0:any /*org.bukkit.potion.PotionEffectType*/ ):void;
	removeScoreboardTag( arg0:string ):boolean;
	resetMaxHealth(  ):void;
	resetTitle(  ):void;
	sendActionBar( message:any /*net.kyori.adventure.text.Component*/ ):void;
	sendActionBar( message:any /*net.kyori.adventure.text.ComponentLike*/ ):void;
	sendMessage( ...arg0:any /*net.md_5.bungee.api.chat.BaseComponent*/[] ):void;
	sendMessage( ...arg0:string[] ):void;
	sendMessage( arg0:any /*java.util.UUID*/, ...arg1:string[] ):void;
	sendMessage( arg0:any /*java.util.UUID*/, arg1:string ):void;
	sendMessage( arg0:any /*net.kyori.adventure.identity.Identity*/, arg1:any /*net.kyori.adventure.text.Component*/, arg2:any /*net.kyori.adventure.audience.MessageType*/ ):void;
	sendMessage( arg0:any /*net.md_5.bungee.api.chat.BaseComponent*/ ):void;
	sendMessage( arg0:string ):void;
	sendMessage( message:any /*net.kyori.adventure.text.Component*/ ):void;
	sendMessage( message:any /*net.kyori.adventure.text.Component*/, boundChatType:any /*net.kyori.adventure.chat.ChatType$Bound*/ ):void;
	sendMessage( message:any /*net.kyori.adventure.text.Component*/, type:any /*net.kyori.adventure.audience.MessageType*/ ):void;
	sendMessage( message:any /*net.kyori.adventure.text.ComponentLike*/ ):void;
	sendMessage( message:any /*net.kyori.adventure.text.ComponentLike*/, boundChatType:any /*net.kyori.adventure.chat.ChatType$Bound*/ ):void;
	sendMessage( message:any /*net.kyori.adventure.text.ComponentLike*/, type:any /*net.kyori.adventure.audience.MessageType*/ ):void;
	sendMessage( signedMessage:any /*net.kyori.adventure.chat.SignedMessage*/, boundChatType:any /*net.kyori.adventure.chat.ChatType$Bound*/ ):void;
	sendMessage( source:any /*net.kyori.adventure.identity.Identified*/, message:any /*net.kyori.adventure.text.Component*/ ):void;
	sendMessage( source:any /*net.kyori.adventure.identity.Identified*/, message:any /*net.kyori.adventure.text.Component*/, type:any /*net.kyori.adventure.audience.MessageType*/ ):void;
	sendMessage( source:any /*net.kyori.adventure.identity.Identified*/, message:any /*net.kyori.adventure.text.ComponentLike*/ ):void;
	sendMessage( source:any /*net.kyori.adventure.identity.Identified*/, message:any /*net.kyori.adventure.text.ComponentLike*/, type:any /*net.kyori.adventure.audience.MessageType*/ ):void;
	sendMessage( source:any /*net.kyori.adventure.identity.Identity*/, message:any /*net.kyori.adventure.text.Component*/ ):void;
	sendMessage( source:any /*net.kyori.adventure.identity.Identity*/, message:any /*net.kyori.adventure.text.ComponentLike*/ ):void;
	sendMessage( source:any /*net.kyori.adventure.identity.Identity*/, message:any /*net.kyori.adventure.text.ComponentLike*/, type:any /*net.kyori.adventure.audience.MessageType*/ ):void;
	sendPlainMessage( arg0:string ):void;
	sendPlayerListFooter( footer:any /*net.kyori.adventure.text.Component*/ ):void;
	sendPlayerListFooter( footer:any /*net.kyori.adventure.text.ComponentLike*/ ):void;
	sendPlayerListHeader( header:any /*net.kyori.adventure.text.Component*/ ):void;
	sendPlayerListHeader( header:any /*net.kyori.adventure.text.ComponentLike*/ ):void;
	sendPlayerListHeaderAndFooter( header:any /*net.kyori.adventure.text.Component*/, footer:any /*net.kyori.adventure.text.Component*/ ):void;
	sendPlayerListHeaderAndFooter( header:any /*net.kyori.adventure.text.ComponentLike*/, footer:any /*net.kyori.adventure.text.ComponentLike*/ ):void;
	sendRichMessage( arg0:string ):void;
	sendTitlePart<T>( part:any /*net.kyori.adventure.title.TitlePart*/, value:T ):void;
	setAI( arg0:boolean ):void;
	setAbsorptionAmount( arg0:double ):void;
	setArrowCooldown( arg0:int ):void;
	setArrowsInBody( arg0:int ):void;
	setArrowsInBody( arg0:int, arg1:boolean ):void;
	setArrowsStuck( arg0:int ):void;
	setBeeStingerCooldown( arg0:int ):void;
	setBeeStingersInBody( arg0:int ):void;
	setBodyYaw( arg0:float ):void;
	setCanPickupItems( arg0:boolean ):void;
	setCollidable( arg0:boolean ):void;
	setCustomName( arg0:string ):void;
	setCustomNameVisible( arg0:boolean ):void;
	setFallDistance( arg0:float ):void;
	setFireTicks( arg0:int ):void;
	setFreezeTicks( arg0:int ):void;
	setFrictionState( arg0:any /*net.kyori.adventure.util.TriState*/ ):void;
	setGliding( arg0:boolean ):void;
	setGlowing( arg0:boolean ):void;
	setGravity( arg0:boolean ):void;
	setHealth( arg0:double ):void;
	setHurtDirection( arg0:float ):void;
	setInvisible( arg0:boolean ):void;
	setInvulnerable( arg0:boolean ):void;
	setJumping( arg0:boolean ):void;
	setKiller( arg0:Player ):void;
	setLastDamage( arg0:double ):void;
	setLastDamageCause( arg0:org.bukkit.event.entity.EntityDamageEvent ):void;
	setLeashHolder( arg0:Entity ):boolean;
	setMaxHealth( arg0:double ):void;
	setMaximumAir( arg0:int ):void;
	setMaximumNoDamageTicks( arg0:int ):void;
	setMemory<T>( arg0:any /*org.bukkit.entity.memory.MemoryKey*/, arg1:T ):void;
	setMetadata( arg0:string, arg1:any /*org.bukkit.metadata.MetadataValue*/ ):void;
	setNoDamageTicks( arg0:int ):void;
	setOp( arg0:boolean ):void;
	setPassenger( arg0:Entity ):boolean;
	setPersistent( arg0:boolean ):void;
	setPortalCooldown( arg0:int ):void;
	setRemainingAir( arg0:int ):void;
	setRemoveWhenFarAway( arg0:boolean ):void;
	setRotation( arg0:float, arg1:float ):void;
	setShieldBlockingDelay( arg0:int ):void;
	setSilent( arg0:boolean ):void;
	setSneaking( arg0:boolean ):void;
	setSwimming( arg0:boolean ):void;
	setTicksLived( arg0:int ):void;
	setVelocity( arg0:any /*org.bukkit.util.Vector*/ ):void;
	setVisibleByDefault( arg0:boolean ):void;
	setVisualFire( arg0:boolean ):void;
	showBossBar( bar:any /*net.kyori.adventure.bossbar.BossBar*/ ):void;
	showTitle( title:any /*net.kyori.adventure.title.Title*/ ):void;
	spawnAt( arg0:org.bukkit.Location ):boolean;
	spawnAt( arg0:org.bukkit.Location, arg1:any /*org.bukkit.event.entity.CreatureSpawnEvent$SpawnReason*/ ):boolean;
	spigot(  ):any /*org.bukkit.entity.Entity$Spigot*/;
	stopSound( sound:any /*net.kyori.adventure.sound.Sound*/ ):void;
	stopSound( stop:any /*net.kyori.adventure.sound.SoundStop*/ ):void;
	swingHand( arg0:any /*org.bukkit.inventory.EquipmentSlot*/ ):void;
	swingMainHand(  ):void;
	swingOffHand(  ):void;
	teamDisplayName(  ):any /*net.kyori.adventure.text.Component*/;
	teleport( arg0:Entity ):boolean;
	teleport( arg0:Entity, arg1:any /*org.bukkit.event.player.PlayerTeleportEvent$TeleportCause*/ ):boolean;
	teleport( arg0:org.bukkit.Location ):boolean;
	teleport( arg0:org.bukkit.Location, ...arg1:any /*io.papermc.paper.entity.TeleportFlag*/[] ):boolean;
	teleport( arg0:org.bukkit.Location, arg1:any /*org.bukkit.event.player.PlayerTeleportEvent$TeleportCause*/ ):boolean;
	teleport( arg0:org.bukkit.Location, arg1:any /*org.bukkit.event.player.PlayerTeleportEvent$TeleportCause*/, ...arg2:any /*io.papermc.paper.entity.TeleportFlag*/[] ):boolean;
	teleportAsync( arg0:org.bukkit.Location ):any /*java.util.concurrent.CompletableFuture*/;
	teleportAsync( arg0:org.bukkit.Location, arg1:any /*org.bukkit.event.player.PlayerTeleportEvent$TeleportCause*/ ):any /*java.util.concurrent.CompletableFuture*/;
	wouldCollideUsing( arg0:any /*org.bukkit.util.BoundingBox*/ ):boolean;

} // end LivingEntity

} // end namespace org.bukkit.entity
declare namespace org.bukkit.entity {

interface Player/* extends HumanEntity, org.bukkit.conversations.Conversable, org.bukkit.OfflinePlayer, org.bukkit.plugin.messaging.PluginMessageRecipient, net.kyori.adventure.identity.Identified, com.destroystokyo.paper.network.NetworkClient*/ {

	abandonConversation( arg0:any /*org.bukkit.conversations.Conversation*/ ):void;
	abandonConversation( arg0:any /*org.bukkit.conversations.Conversation*/, arg1:any /*org.bukkit.conversations.ConversationAbandonedEvent*/ ):void;
	acceptConversationInput( arg0:string ):void;
	addAdditionalChatCompletions( arg0:java.util.Collection<string> ):void;
	addAttachment( arg0:any /*org.bukkit.plugin.Plugin*/ ):any /*org.bukkit.permissions.PermissionAttachment*/;
	addAttachment( arg0:any /*org.bukkit.plugin.Plugin*/, arg1:int ):any /*org.bukkit.permissions.PermissionAttachment*/;
	addAttachment( arg0:any /*org.bukkit.plugin.Plugin*/, arg1:string, arg2:boolean ):any /*org.bukkit.permissions.PermissionAttachment*/;
	addAttachment( arg0:any /*org.bukkit.plugin.Plugin*/, arg1:string, arg2:boolean, arg3:int ):any /*org.bukkit.permissions.PermissionAttachment*/;
	addCustomChatCompletions( arg0:java.util.Collection<string> ):void;
	addPassenger( arg0:Entity ):boolean;
	addPotionEffect( arg0:any /*org.bukkit.potion.PotionEffect*/ ):boolean;
	addPotionEffect( arg0:any /*org.bukkit.potion.PotionEffect*/, arg1:boolean ):boolean;
	addPotionEffects( arg0:java.util.Collection<any /*org.bukkit.potion.PotionEffect*/> ):boolean;
	addScoreboardTag( arg0:string ):boolean;
	applyMending( arg0:int ):int;
	asHoverEvent(  ):any /*net.kyori.adventure.text.event.HoverEvent*/;
	asHoverEvent( arg0:UnaryOperator<any /*net.kyori.adventure.text.event.HoverEvent$ShowEntity*/> ):any /*net.kyori.adventure.text.event.HoverEvent*/;
	attack( arg0:Entity ):void;
	banPlayer( arg0:string ):any /*org.bukkit.BanEntry*/;
	banPlayer( arg0:string, arg1:any /*java.util.Date*/ ):any /*org.bukkit.BanEntry*/;
	banPlayer( arg0:string, arg1:any /*java.util.Date*/, arg2:string ):any /*org.bukkit.BanEntry*/;
	banPlayer( arg0:string, arg1:any /*java.util.Date*/, arg2:string, arg3:boolean ):any /*org.bukkit.BanEntry*/;
	banPlayer( arg0:string, arg1:string ):any /*org.bukkit.BanEntry*/;
	banPlayerFull( arg0:string ):any /*org.bukkit.BanEntry*/;
	banPlayerFull( arg0:string, arg1:any /*java.util.Date*/ ):any /*org.bukkit.BanEntry*/;
	banPlayerFull( arg0:string, arg1:any /*java.util.Date*/, arg2:string ):any /*org.bukkit.BanEntry*/;
	banPlayerFull( arg0:string, arg1:string ):any /*org.bukkit.BanEntry*/;
	banPlayerIP( arg0:string ):any /*org.bukkit.BanEntry*/;
	banPlayerIP( arg0:string, arg1:any /*java.util.Date*/ ):any /*org.bukkit.BanEntry*/;
	banPlayerIP( arg0:string, arg1:any /*java.util.Date*/, arg2:boolean ):any /*org.bukkit.BanEntry*/;
	banPlayerIP( arg0:string, arg1:any /*java.util.Date*/, arg2:string ):any /*org.bukkit.BanEntry*/;
	banPlayerIP( arg0:string, arg1:any /*java.util.Date*/, arg2:string, arg3:boolean ):any /*org.bukkit.BanEntry*/;
	banPlayerIP( arg0:string, arg1:boolean ):any /*org.bukkit.BanEntry*/;
	banPlayerIP( arg0:string, arg1:string ):any /*org.bukkit.BanEntry*/;
	banPlayerIP( arg0:string, arg1:string, arg2:boolean ):any /*org.bukkit.BanEntry*/;
	beginConversation( arg0:any /*org.bukkit.conversations.Conversation*/ ):boolean;
	boostElytra( arg0:org.bukkit.inventory.ItemStack ):any /*org.bukkit.entity.Firework*/;
	breakBlock( arg0:org.bukkit.block.Block ):boolean;
	broadcastSlotBreak( arg0:any /*org.bukkit.inventory.EquipmentSlot*/ ):void;
	broadcastSlotBreak( arg0:any /*org.bukkit.inventory.EquipmentSlot*/, arg1:java.util.Collection<Player> ):void;
	canBreatheUnderwater(  ):boolean;
	canSee( arg0:Entity ):boolean;
	canSee( arg0:Player ):boolean;
	chat( arg0:string ):void;
	clearActiveItem(  ):void;
	clearTitle(  ):void;
	closeInventory(  ):void;
	closeInventory( arg0:any /*org.bukkit.event.inventory.InventoryCloseEvent$Reason*/ ):void;
	collidesAt( arg0:org.bukkit.Location ):boolean;
	customName(  ):any /*net.kyori.adventure.text.Component*/;
	customName( arg0:any /*net.kyori.adventure.text.Component*/ ):void;
	damage( arg0:double ):void;
	damage( arg0:double, arg1:Entity ):void;
	damageItemStack( arg0:any /*org.bukkit.inventory.EquipmentSlot*/, arg1:int ):void;
	damageItemStack( arg0:org.bukkit.inventory.ItemStack, arg1:int ):org.bukkit.inventory.ItemStack;
	decrementStatistic( arg0:any /*org.bukkit.Statistic*/ ):void;
	decrementStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:EntityType ):void;
	decrementStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:EntityType, arg2:int ):void;
	decrementStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:int ):void;
	decrementStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:org.bukkit.Material ):void;
	decrementStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:org.bukkit.Material, arg2:int ):void;
	deleteMessage( signature:any /*net.kyori.adventure.chat.SignedMessage$Signature*/ ):void;
	deleteMessage( signedMessage:any /*net.kyori.adventure.chat.SignedMessage*/ ):void;
	discoverRecipe( arg0:any /*org.bukkit.NamespacedKey*/ ):boolean;
	discoverRecipes( arg0:java.util.Collection<any /*org.bukkit.NamespacedKey*/> ):int;
	displayName(  ):any /*net.kyori.adventure.text.Component*/;
	displayName( arg0:any /*net.kyori.adventure.text.Component*/ ):void;
	dropItem( arg0:boolean ):boolean;
	eject(  ):boolean;
	filterAudience( filter:Predicate<any /*net.kyori.adventure.audience.Audience*/> ):any /*net.kyori.adventure.audience.Audience*/;
	fireworkBoost( arg0:org.bukkit.inventory.ItemStack ):any /*org.bukkit.entity.Firework*/;
	forEachAudience( action:Consumer<any /*net.kyori.adventure.audience.Audience*/> ):void;
	fromMobSpawner(  ):boolean;
	get<T>( pointer:any /*net.kyori.adventure.pointer.Pointer*/ ):java.util.Optional<T>;
	getAbsorptionAmount(  ):double;
	getActiveItem(  ):org.bukkit.inventory.ItemStack;
	getActivePotionEffects(  ):java.util.Collection<any /*org.bukkit.potion.PotionEffect*/>;
	getAddress(  ):any /*java.net.InetSocketAddress*/;
	getAdvancementProgress( arg0:any /*org.bukkit.advancement.Advancement*/ ):any /*org.bukkit.advancement.AdvancementProgress*/;
	getAffectsSpawning(  ):boolean;
	getAllowFlight(  ):boolean;
	getArrowCooldown(  ):int;
	getArrowsInBody(  ):int;
	getArrowsStuck(  ):int;
	getAttackCooldown(  ):float;
	getAttribute( arg0:any /*org.bukkit.attribute.Attribute*/ ):any /*org.bukkit.attribute.AttributeInstance*/;
	getBedLocation(  ):org.bukkit.Location;
	getBedSpawnLocation(  ):org.bukkit.Location;
	getBeeStingerCooldown(  ):int;
	getBeeStingersInBody(  ):int;
	getBodyYaw(  ):float;
	getBoundingBox(  ):any /*org.bukkit.util.BoundingBox*/;
	getCanPickupItems(  ):boolean;
	getCategory(  ):any /*org.bukkit.entity.EntityCategory*/;
	getChunk(  ):any /*org.bukkit.Chunk*/;
	getClientBrandName(  ):string;
	getClientOption<T>( arg0:any /*com.destroystokyo.paper.ClientOption*/ ):T;
	getClientViewDistance(  ):int;
	getCollidableExemptions(  ):java.util.Set<any /*java.util.UUID*/>;
	getCompassTarget(  ):org.bukkit.Location;
	getCooldown( arg0:org.bukkit.Material ):int;
	getCooldownPeriod(  ):float;
	getCooledAttackStrength( arg0:float ):float;
	getCustomName(  ):string;
	getDeathSound(  ):org.bukkit.Sound;
	getDiscoveredRecipes(  ):java.util.Set<any /*org.bukkit.NamespacedKey*/>;
	getDisplayName(  ):string;
	getDrinkingSound( arg0:org.bukkit.inventory.ItemStack ):org.bukkit.Sound;
	getEatingSound( arg0:org.bukkit.inventory.ItemStack ):org.bukkit.Sound;
	getEffectivePermissions(  ):java.util.Set<any /*org.bukkit.permissions.PermissionAttachmentInfo*/>;
	getEnchantmentSeed(  ):int;
	getEnderChest(  ):any /*org.bukkit.inventory.Inventory*/;
	getEntityId(  ):int;
	getEntitySpawnReason(  ):any /*org.bukkit.event.entity.CreatureSpawnEvent$SpawnReason*/;
	getEquipment(  ):any /*org.bukkit.inventory.EntityEquipment*/;
	getExhaustion(  ):float;
	getExp(  ):float;
	getExpCooldown(  ):int;
	getExpToLevel(  ):int;
	getEyeHeight(  ):double;
	getEyeHeight( arg0:boolean ):double;
	getEyeLocation(  ):org.bukkit.Location;
	getFacing(  ):any /*org.bukkit.block.BlockFace*/;
	getFallDamageSound( arg0:int ):org.bukkit.Sound;
	getFallDamageSoundBig(  ):org.bukkit.Sound;
	getFallDamageSoundSmall(  ):org.bukkit.Sound;
	getFallDistance(  ):float;
	getFireTicks(  ):int;
	getFirstPlayed(  ):long;
	getFishHook(  ):any /*org.bukkit.entity.FishHook*/;
	getFlySpeed(  ):float;
	getFoodLevel(  ):int;
	getFreezeTicks(  ):int;
	getFrictionState(  ):any /*net.kyori.adventure.util.TriState*/;
	getGameMode(  ):any /*org.bukkit.GameMode*/;
	getHandRaised(  ):any /*org.bukkit.inventory.EquipmentSlot*/;
	getHandRaisedTime(  ):int;
	getHealth(  ):double;
	getHealthScale(  ):double;
	getHeight(  ):double;
	getHurtDirection(  ):float;
	getHurtSound(  ):org.bukkit.Sound;
	getInventory(  ):org.bukkit.inventory.PlayerInventory;
	getItemInHand(  ):org.bukkit.inventory.ItemStack;
	getItemInUse(  ):org.bukkit.inventory.ItemStack;
	getItemOnCursor(  ):org.bukkit.inventory.ItemStack;
	getItemUseRemainingTime(  ):int;
	getKiller(  ):Player;
	getLastDamage(  ):double;
	getLastDamageCause(  ):org.bukkit.event.entity.EntityDamageEvent;
	getLastDeathLocation(  ):org.bukkit.Location;
	getLastDeathLocation(  ):org.bukkit.Location;
	getLastLogin(  ):long;
	getLastPlayed(  ):long;
	getLastSeen(  ):long;
	getLastTwoTargetBlocks( arg0:java.util.Set<org.bukkit.Material>, arg1:int ):java.util.List<org.bukkit.block.Block>;
	getLeashHolder(  ):Entity;
	getLevel(  ):int;
	getLineOfSight( arg0:java.util.Set<org.bukkit.Material>, arg1:int ):java.util.List<org.bukkit.block.Block>;
	getListeningPluginChannels(  ):java.util.Set<string>;
	getLocale(  ):string;
	getLocation(  ):org.bukkit.Location;
	getLocation( arg0:org.bukkit.Location ):org.bukkit.Location;
	getMainHand(  ):any /*org.bukkit.inventory.MainHand*/;
	getMaxFireTicks(  ):int;
	getMaxFreezeTicks(  ):int;
	getMaxHealth(  ):double;
	getMaximumAir(  ):int;
	getMaximumNoDamageTicks(  ):int;
	getMemory<T>( arg0:any /*org.bukkit.entity.memory.MemoryKey*/ ):T;
	getMetadata( arg0:string ):java.util.List<any /*org.bukkit.metadata.MetadataValue*/>;
	getName(  ):string;
	getNearbyEntities( arg0:double, arg1:double, arg2:double ):java.util.List<Entity>;
	getNoDamageTicks(  ):int;
	getNoTickViewDistance(  ):int;
	getOpenInventory(  ):any /*org.bukkit.inventory.InventoryView*/;
	getOrDefault<T>( pointer:any /*net.kyori.adventure.pointer.Pointer*/, defaultValue:T ):T;
	getOrDefaultFrom<T>( pointer:any /*net.kyori.adventure.pointer.Pointer*/, defaultValue:Supplier<T> ):T;
	getOrigin(  ):org.bukkit.Location;
	getPassenger(  ):Entity;
	getPassengers(  ):java.util.List<Entity>;
	getPersistentDataContainer(  ):any /*org.bukkit.persistence.PersistentDataContainer*/;
	getPing(  ):int;
	getPistonMoveReaction(  ):any /*org.bukkit.block.PistonMoveReaction*/;
	getPlayer(  ):Player;
	getPlayerListFooter(  ):string;
	getPlayerListHeader(  ):string;
	getPlayerListName(  ):string;
	getPlayerProfile(  ):any /*com.destroystokyo.paper.profile.PlayerProfile*/;
	getPlayerTime(  ):long;
	getPlayerTimeOffset(  ):long;
	getPlayerWeather(  ):any /*org.bukkit.WeatherType*/;
	getPortalCooldown(  ):int;
	getPose(  ):any /*org.bukkit.entity.Pose*/;
	getPotentialBedLocation(  ):org.bukkit.Location;
	getPotionEffect( arg0:any /*org.bukkit.potion.PotionEffectType*/ ):any /*org.bukkit.potion.PotionEffect*/;
	getPreviousGameMode(  ):any /*org.bukkit.GameMode*/;
	getProtocolVersion(  ):int;
	getRemainingAir(  ):int;
	getRemoveWhenFarAway(  ):boolean;
	getResourcePackHash(  ):string;
	getResourcePackStatus(  ):any /*org.bukkit.event.player.PlayerResourcePackStatusEvent$Status*/;
	getSaturatedRegenRate(  ):int;
	getSaturation(  ):float;
	getScoreboard(  ):any /*org.bukkit.scoreboard.Scoreboard*/;
	getScoreboardTags(  ):java.util.Set<string>;
	getSendViewDistance(  ):int;
	getServer(  ):any /*org.bukkit.Server*/;
	getShieldBlockingDelay(  ):int;
	getShoulderEntityLeft(  ):Entity;
	getShoulderEntityRight(  ):Entity;
	getSimulationDistance(  ):int;
	getSleepTicks(  ):int;
	getSpawnCategory(  ):any /*org.bukkit.entity.SpawnCategory*/;
	getSpectatorTarget(  ):Entity;
	getStarvationRate(  ):int;
	getStatistic( arg0:any /*org.bukkit.Statistic*/ ):int;
	getStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:EntityType ):int;
	getStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:org.bukkit.Material ):int;
	getSwimHighSpeedSplashSound(  ):org.bukkit.Sound;
	getSwimSound(  ):org.bukkit.Sound;
	getSwimSplashSound(  ):org.bukkit.Sound;
	getTargetBlock( arg0:int ):org.bukkit.block.Block;
	getTargetBlock( arg0:int, arg1:any /*com.destroystokyo.paper.block.TargetBlockInfo$FluidMode*/ ):org.bukkit.block.Block;
	getTargetBlock( arg0:java.util.Set<org.bukkit.Material>, arg1:int ):org.bukkit.block.Block;
	getTargetBlockExact( arg0:int ):org.bukkit.block.Block;
	getTargetBlockExact( arg0:int, arg1:any /*org.bukkit.FluidCollisionMode*/ ):org.bukkit.block.Block;
	getTargetBlockFace( arg0:int ):any /*org.bukkit.block.BlockFace*/;
	getTargetBlockFace( arg0:int, arg1:any /*com.destroystokyo.paper.block.TargetBlockInfo$FluidMode*/ ):any /*org.bukkit.block.BlockFace*/;
	getTargetBlockFace( arg0:int, arg1:any /*org.bukkit.FluidCollisionMode*/ ):any /*org.bukkit.block.BlockFace*/;
	getTargetBlockInfo( arg0:int ):any /*com.destroystokyo.paper.block.TargetBlockInfo*/;
	getTargetBlockInfo( arg0:int, arg1:any /*com.destroystokyo.paper.block.TargetBlockInfo$FluidMode*/ ):any /*com.destroystokyo.paper.block.TargetBlockInfo*/;
	getTargetEntity( arg0:int ):Entity;
	getTargetEntity( arg0:int, arg1:boolean ):Entity;
	getTargetEntityInfo( arg0:int ):any /*com.destroystokyo.paper.entity.TargetEntityInfo*/;
	getTargetEntityInfo( arg0:int, arg1:boolean ):any /*com.destroystokyo.paper.entity.TargetEntityInfo*/;
	getTicksLived(  ):int;
	getTotalExperience(  ):int;
	getTrackedPlayers(  ):java.util.Set<Player>;
	getType(  ):EntityType;
	getUniqueId(  ):any /*java.util.UUID*/;
	getUniqueId(  ):any /*java.util.UUID*/;
	getUnsaturatedRegenRate(  ):int;
	getVehicle(  ):Entity;
	getVelocity(  ):any /*org.bukkit.util.Vector*/;
	getViewDistance(  ):int;
	getVirtualHost(  ):any /*java.net.InetSocketAddress*/;
	getWalkSpeed(  ):float;
	getWardenTimeSinceLastWarning(  ):int;
	getWardenWarningCooldown(  ):int;
	getWardenWarningLevel(  ):int;
	getWidth(  ):double;
	getWorld(  ):org.bukkit.World;
	getWorldBorder(  ):any /*org.bukkit.WorldBorder*/;
	giveExp( arg0:int ):void;
	giveExp( arg0:int, arg1:boolean ):void;
	giveExpLevels( arg0:int ):void;
	hasAI(  ):boolean;
	hasCooldown( arg0:org.bukkit.Material ):boolean;
	hasDiscoveredRecipe( arg0:any /*org.bukkit.NamespacedKey*/ ):boolean;
	hasFlyingFallDamage(  ):any /*net.kyori.adventure.util.TriState*/;
	hasGravity(  ):boolean;
	hasLineOfSight( arg0:Entity ):boolean;
	hasLineOfSight( arg0:org.bukkit.Location ):boolean;
	hasMetadata( arg0:string ):boolean;
	hasPermission( arg0:any /*org.bukkit.permissions.Permission*/ ):boolean;
	hasPermission( arg0:string ):boolean;
	hasPlayedBefore(  ):boolean;
	hasPotionEffect( arg0:any /*org.bukkit.potion.PotionEffectType*/ ):boolean;
	hasResourcePack(  ):boolean;
	hasSeenWinScreen(  ):boolean;
	hideBossBar( bar:any /*net.kyori.adventure.bossbar.BossBar*/ ):void;
	hideEntity( arg0:any /*org.bukkit.plugin.Plugin*/, arg1:Entity ):void;
	hidePlayer( arg0:Player ):void;
	hidePlayer( arg0:any /*org.bukkit.plugin.Plugin*/, arg1:Player ):void;
	hideTitle(  ):void;
	identity(  ):any /*net.kyori.adventure.identity.Identity*/;
	increaseWardenWarningLevel(  ):void;
	incrementStatistic( arg0:any /*org.bukkit.Statistic*/ ):void;
	incrementStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:EntityType ):void;
	incrementStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:EntityType, arg2:int ):void;
	incrementStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:int ):void;
	incrementStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:org.bukkit.Material ):void;
	incrementStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:org.bukkit.Material, arg2:int ):void;
	isAllowingServerListings(  ):boolean;
	isBanned(  ):boolean;
	isBlocking(  ):boolean;
	isClimbing(  ):boolean;
	isCollidable(  ):boolean;
	isConversing(  ):boolean;
	isCustomNameVisible(  ):boolean;
	isDead(  ):boolean;
	isDeeplySleeping(  ):boolean;
	isEmpty(  ):boolean;
	isFlying(  ):boolean;
	isFreezeTickingLocked(  ):boolean;
	isFrozen(  ):boolean;
	isGliding(  ):boolean;
	isGlowing(  ):boolean;
	isHandRaised(  ):boolean;
	isHealthScaled(  ):boolean;
	isInBubbleColumn(  ):boolean;
	isInLava(  ):boolean;
	isInPowderedSnow(  ):boolean;
	isInRain(  ):boolean;
	isInWater(  ):boolean;
	isInWaterOrBubbleColumn(  ):boolean;
	isInWaterOrRain(  ):boolean;
	isInWaterOrRainOrBubbleColumn(  ):boolean;
	isInsideVehicle(  ):boolean;
	isInvisible(  ):boolean;
	isInvulnerable(  ):boolean;
	isJumping(  ):boolean;
	isLeashed(  ):boolean;
	isOnGround(  ):boolean;
	isOnline(  ):boolean;
	isOp(  ):boolean;
	isPermissionSet( arg0:any /*org.bukkit.permissions.Permission*/ ):boolean;
	isPermissionSet( arg0:string ):boolean;
	isPersistent(  ):boolean;
	isPlayerTimeRelative(  ):boolean;
	isRiptiding(  ):boolean;
	isSilent(  ):boolean;
	isSleeping(  ):boolean;
	isSleepingIgnored(  ):boolean;
	isSneaking(  ):boolean;
	isSprinting(  ):boolean;
	isSwimming(  ):boolean;
	isTicking(  ):boolean;
	isUnderWater(  ):boolean;
	isValid(  ):boolean;
	isVisibleByDefault(  ):boolean;
	isVisualFire(  ):boolean;
	isWhitelisted(  ):boolean;
	kick(  ):void;
	kick( arg0:any /*net.kyori.adventure.text.Component*/ ):void;
	kick( arg0:any /*net.kyori.adventure.text.Component*/, arg1:any /*org.bukkit.event.player.PlayerKickEvent$Cause*/ ):void;
	kickPlayer( arg0:string ):void;
	knockback( arg0:double, arg1:double, arg2:double ):void;
	launchProjectile<T>( arg0:java.lang.Class<T> ):T;
	launchProjectile<T>( arg0:java.lang.Class<T>, arg1:any /*org.bukkit.util.Vector*/ ):T;
	launchProjectile<T>( arg0:java.lang.Class<T>, arg1:any /*org.bukkit.util.Vector*/, arg2:org.bukkit.util.Consumer<T> ):T;
	leaveVehicle(  ):boolean;
	loadData(  ):void;
	locale(  ):any /*java.util.Locale*/;
	lockFreezeTicks( arg0:boolean ):void;
	lookAt( arg0:Entity, arg1:any /*io.papermc.paper.entity.LookAnchor*/, arg2:any /*io.papermc.paper.entity.LookAnchor*/ ):void;
	lookAt( arg0:any /*io.papermc.paper.math.Position*/, arg1:any /*io.papermc.paper.entity.LookAnchor*/ ):void;
	lookAt( arg0:double, arg1:double, arg2:double, arg3:any /*io.papermc.paper.entity.LookAnchor*/ ):void;
	name(  ):any /*net.kyori.adventure.text.Component*/;
	openAnvil( arg0:org.bukkit.Location, arg1:boolean ):any /*org.bukkit.inventory.InventoryView*/;
	openBook( arg0:org.bukkit.inventory.ItemStack ):void;
	openBook( book:any /*net.kyori.adventure.inventory.Book$Builder*/ ):void;
	openBook( book:any /*net.kyori.adventure.inventory.Book*/ ):void;
	openCartographyTable( arg0:org.bukkit.Location, arg1:boolean ):any /*org.bukkit.inventory.InventoryView*/;
	openEnchanting( arg0:org.bukkit.Location, arg1:boolean ):any /*org.bukkit.inventory.InventoryView*/;
	openGrindstone( arg0:org.bukkit.Location, arg1:boolean ):any /*org.bukkit.inventory.InventoryView*/;
	openInventory( arg0:any /*org.bukkit.inventory.Inventory*/ ):any /*org.bukkit.inventory.InventoryView*/;
	openInventory( arg0:any /*org.bukkit.inventory.InventoryView*/ ):void;
	openLoom( arg0:org.bukkit.Location, arg1:boolean ):any /*org.bukkit.inventory.InventoryView*/;
	openMerchant( arg0:any /*org.bukkit.entity.Villager*/, arg1:boolean ):any /*org.bukkit.inventory.InventoryView*/;
	openMerchant( arg0:any /*org.bukkit.inventory.Merchant*/, arg1:boolean ):any /*org.bukkit.inventory.InventoryView*/;
	openSign( arg0:any /*org.bukkit.block.Sign*/ ):void;
	openSign( arg0:any /*org.bukkit.block.Sign*/, arg1:any /*org.bukkit.block.sign.Side*/ ):void;
	openSmithingTable( arg0:org.bukkit.Location, arg1:boolean ):any /*org.bukkit.inventory.InventoryView*/;
	openStonecutter( arg0:org.bukkit.Location, arg1:boolean ):any /*org.bukkit.inventory.InventoryView*/;
	openWorkbench( arg0:org.bukkit.Location, arg1:boolean ):any /*org.bukkit.inventory.InventoryView*/;
	performCommand( arg0:string ):boolean;
	permissionValue( arg0:any /*org.bukkit.permissions.Permission*/ ):any /*net.kyori.adventure.util.TriState*/;
	permissionValue( arg0:string ):any /*net.kyori.adventure.util.TriState*/;
	playEffect( arg0:any /*org.bukkit.EntityEffect*/ ):void;
	playEffect( arg0:org.bukkit.Location, arg1:org.bukkit.Effect, arg2:int ):void;
	playEffect<T>( arg0:org.bukkit.Location, arg1:org.bukkit.Effect, arg2:T ):void;
	playNote( arg0:org.bukkit.Location, arg1:any /*byte*/, arg2:any /*byte*/ ):void;
	playNote( arg0:org.bukkit.Location, arg1:any /*org.bukkit.Instrument*/, arg2:any /*org.bukkit.Note*/ ):void;
	playPickupItemAnimation( arg0:any /*org.bukkit.entity.Item*/ ):void;
	playPickupItemAnimation( arg0:any /*org.bukkit.entity.Item*/, arg1:int ):void;
	playSound( arg0:Entity, arg1:org.bukkit.Sound, arg2:any /*org.bukkit.SoundCategory*/, arg3:float, arg4:float ):void;
	playSound( arg0:Entity, arg1:org.bukkit.Sound, arg2:float, arg3:float ):void;
	playSound( arg0:Entity, arg1:string, arg2:any /*org.bukkit.SoundCategory*/, arg3:float, arg4:float ):void;
	playSound( arg0:Entity, arg1:string, arg2:float, arg3:float ):void;
	playSound( arg0:org.bukkit.Location, arg1:org.bukkit.Sound, arg2:any /*org.bukkit.SoundCategory*/, arg3:float, arg4:float ):void;
	playSound( arg0:org.bukkit.Location, arg1:org.bukkit.Sound, arg2:float, arg3:float ):void;
	playSound( arg0:org.bukkit.Location, arg1:string, arg2:any /*org.bukkit.SoundCategory*/, arg3:float, arg4:float ):void;
	playSound( arg0:org.bukkit.Location, arg1:string, arg2:float, arg3:float ):void;
	playSound( sound:any /*net.kyori.adventure.sound.Sound*/ ):void;
	playSound( sound:any /*net.kyori.adventure.sound.Sound*/, emitter:any /*net.kyori.adventure.sound.Sound$Emitter*/ ):void;
	playSound( sound:any /*net.kyori.adventure.sound.Sound*/, x:double, y:double, z:double ):void;
	playerListFooter(  ):any /*net.kyori.adventure.text.Component*/;
	playerListHeader(  ):any /*net.kyori.adventure.text.Component*/;
	playerListName(  ):any /*net.kyori.adventure.text.Component*/;
	playerListName( arg0:any /*net.kyori.adventure.text.Component*/ ):void;
	pointers(  ):any /*net.kyori.adventure.pointer.Pointers*/;
	rayTraceBlocks( arg0:double ):any /*org.bukkit.util.RayTraceResult*/;
	rayTraceBlocks( arg0:double, arg1:any /*org.bukkit.FluidCollisionMode*/ ):any /*org.bukkit.util.RayTraceResult*/;
	rayTraceEntities( arg0:int ):any /*org.bukkit.util.RayTraceResult*/;
	rayTraceEntities( arg0:int, arg1:boolean ):any /*org.bukkit.util.RayTraceResult*/;
	recalculatePermissions(  ):void;
	registerAttribute( arg0:any /*org.bukkit.attribute.Attribute*/ ):void;
	releaseLeftShoulderEntity(  ):Entity;
	releaseRightShoulderEntity(  ):Entity;
	remove(  ):void;
	removeAdditionalChatCompletions( arg0:java.util.Collection<string> ):void;
	removeAttachment( arg0:any /*org.bukkit.permissions.PermissionAttachment*/ ):void;
	removeCustomChatCompletions( arg0:java.util.Collection<string> ):void;
	removeMetadata( arg0:string, arg1:any /*org.bukkit.plugin.Plugin*/ ):void;
	removePassenger( arg0:Entity ):boolean;
	removePotionEffect( arg0:any /*org.bukkit.potion.PotionEffectType*/ ):void;
	removeScoreboardTag( arg0:string ):boolean;
	resetCooldown(  ):void;
	resetMaxHealth(  ):void;
	resetPlayerTime(  ):void;
	resetPlayerWeather(  ):void;
	resetTitle(  ):void;
	saveData(  ):void;
	sendActionBar( ...arg0:any /*net.md_5.bungee.api.chat.BaseComponent*/[] ):void;
	sendActionBar( arg0:any /*char*/, arg1:string ):void;
	sendActionBar( arg0:string ):void;
	sendActionBar( message:any /*net.kyori.adventure.text.Component*/ ):void;
	sendActionBar( message:any /*net.kyori.adventure.text.ComponentLike*/ ):void;
	sendBlockChange( arg0:org.bukkit.Location, arg1:any /*org.bukkit.block.data.BlockData*/ ):void;
	sendBlockChange( arg0:org.bukkit.Location, arg1:org.bukkit.Material, arg2:any /*byte*/ ):void;
	sendBlockChanges( arg0:java.util.Collection<any /*org.bukkit.block.BlockState*/>, arg1:boolean ):void;
	sendBlockDamage( arg0:org.bukkit.Location, arg1:float ):void;
	sendBlockDamage( arg0:org.bukkit.Location, arg1:float, arg2:Entity ):void;
	sendBlockDamage( arg0:org.bukkit.Location, arg1:float, arg2:int ):void;
	sendEquipmentChange( arg0:LivingEntity, arg1:any /*org.bukkit.inventory.EquipmentSlot*/, arg2:org.bukkit.inventory.ItemStack ):void;
	sendEquipmentChange( arg0:LivingEntity, arg1:java.util.Map<any /*org.bukkit.inventory.EquipmentSlot*/, org.bukkit.inventory.ItemStack> ):void;
	sendExperienceChange( arg0:float ):void;
	sendExperienceChange( arg0:float, arg1:int ):void;
	sendHealthUpdate(  ):void;
	sendHealthUpdate( arg0:double, arg1:int, arg2:float ):void;
	sendHurtAnimation( arg0:float ):void;
	sendMap( arg0:any /*org.bukkit.map.MapView*/ ):void;
	sendMessage( ...arg0:any /*net.md_5.bungee.api.chat.BaseComponent*/[] ):void;
	sendMessage( ...arg0:string[] ):void;
	sendMessage( arg0:any /*java.util.UUID*/, ...arg1:string[] ):void;
	sendMessage( arg0:any /*java.util.UUID*/, arg1:string ):void;
	sendMessage( arg0:any /*net.kyori.adventure.identity.Identity*/, arg1:any /*net.kyori.adventure.text.Component*/, arg2:any /*net.kyori.adventure.audience.MessageType*/ ):void;
	sendMessage( arg0:any /*net.md_5.bungee.api.ChatMessageType*/, ...arg1:any /*net.md_5.bungee.api.chat.BaseComponent*/[] ):void;
	sendMessage( arg0:any /*net.md_5.bungee.api.chat.BaseComponent*/ ):void;
	sendMessage( arg0:string ):void;
	sendMessage( message:any /*net.kyori.adventure.text.Component*/ ):void;
	sendMessage( message:any /*net.kyori.adventure.text.Component*/, boundChatType:any /*net.kyori.adventure.chat.ChatType$Bound*/ ):void;
	sendMessage( message:any /*net.kyori.adventure.text.Component*/, type:any /*net.kyori.adventure.audience.MessageType*/ ):void;
	sendMessage( message:any /*net.kyori.adventure.text.ComponentLike*/ ):void;
	sendMessage( message:any /*net.kyori.adventure.text.ComponentLike*/, boundChatType:any /*net.kyori.adventure.chat.ChatType$Bound*/ ):void;
	sendMessage( message:any /*net.kyori.adventure.text.ComponentLike*/, type:any /*net.kyori.adventure.audience.MessageType*/ ):void;
	sendMessage( signedMessage:any /*net.kyori.adventure.chat.SignedMessage*/, boundChatType:any /*net.kyori.adventure.chat.ChatType$Bound*/ ):void;
	sendMessage( source:any /*net.kyori.adventure.identity.Identified*/, message:any /*net.kyori.adventure.text.Component*/ ):void;
	sendMessage( source:any /*net.kyori.adventure.identity.Identified*/, message:any /*net.kyori.adventure.text.Component*/, type:any /*net.kyori.adventure.audience.MessageType*/ ):void;
	sendMessage( source:any /*net.kyori.adventure.identity.Identified*/, message:any /*net.kyori.adventure.text.ComponentLike*/ ):void;
	sendMessage( source:any /*net.kyori.adventure.identity.Identified*/, message:any /*net.kyori.adventure.text.ComponentLike*/, type:any /*net.kyori.adventure.audience.MessageType*/ ):void;
	sendMessage( source:any /*net.kyori.adventure.identity.Identity*/, message:any /*net.kyori.adventure.text.Component*/ ):void;
	sendMessage( source:any /*net.kyori.adventure.identity.Identity*/, message:any /*net.kyori.adventure.text.ComponentLike*/ ):void;
	sendMessage( source:any /*net.kyori.adventure.identity.Identity*/, message:any /*net.kyori.adventure.text.ComponentLike*/, type:any /*net.kyori.adventure.audience.MessageType*/ ):void;
	sendMultiBlockChange( arg0:java.util.Map<any /*io.papermc.paper.math.Position*/, any /*org.bukkit.block.data.BlockData*/> ):void;
	sendMultiBlockChange( arg0:java.util.Map<any /*io.papermc.paper.math.Position*/, any /*org.bukkit.block.data.BlockData*/>, arg1:boolean ):void;
	sendOpLevel( arg0:any /*byte*/ ):void;
	sendPlainMessage( arg0:string ):void;
	sendPlayerListFooter( footer:any /*net.kyori.adventure.text.Component*/ ):void;
	sendPlayerListFooter( footer:any /*net.kyori.adventure.text.ComponentLike*/ ):void;
	sendPlayerListHeader( header:any /*net.kyori.adventure.text.Component*/ ):void;
	sendPlayerListHeader( header:any /*net.kyori.adventure.text.ComponentLike*/ ):void;
	sendPlayerListHeaderAndFooter( header:any /*net.kyori.adventure.text.Component*/, footer:any /*net.kyori.adventure.text.Component*/ ):void;
	sendPlayerListHeaderAndFooter( header:any /*net.kyori.adventure.text.ComponentLike*/, footer:any /*net.kyori.adventure.text.ComponentLike*/ ):void;
	sendPluginMessage( arg0:any /*org.bukkit.plugin.Plugin*/, arg1:string, arg2:bytearray ):void;
	sendRawMessage( arg0:any /*java.util.UUID*/, arg1:string ):void;
	sendRawMessage( arg0:string ):void;
	sendRichMessage( arg0:string ):void;
	sendSignChange( arg0:org.bukkit.Location, arg1:[string] ):void;
	sendSignChange( arg0:org.bukkit.Location, arg1:[string], arg2:any /*org.bukkit.DyeColor*/ ):void;
	sendSignChange( arg0:org.bukkit.Location, arg1:[string], arg2:any /*org.bukkit.DyeColor*/, arg3:boolean ):void;
	sendSignChange( arg0:org.bukkit.Location, arg1:java.util.List<any /*net.kyori.adventure.text.Component*/> ):void;
	sendSignChange( arg0:org.bukkit.Location, arg1:java.util.List<any /*net.kyori.adventure.text.Component*/>, arg2:any /*org.bukkit.DyeColor*/ ):void;
	sendSignChange( arg0:org.bukkit.Location, arg1:java.util.List<any /*net.kyori.adventure.text.Component*/>, arg2:any /*org.bukkit.DyeColor*/, arg3:boolean ):void;
	sendSignChange( arg0:org.bukkit.Location, arg1:java.util.List<any /*net.kyori.adventure.text.Component*/>, arg2:boolean ):void;
	sendTitle( arg0:any /*com.destroystokyo.paper.Title*/ ):void;
	sendTitle( arg0:string, arg1:string ):void;
	sendTitle( arg0:string, arg1:string, arg2:int, arg3:int, arg4:int ):void;
	sendTitlePart<T>( part:any /*net.kyori.adventure.title.TitlePart*/, value:T ):void;
	serialize(  ):java.util.Map<string, any /*java.lang.Object*/>;
	setAI( arg0:boolean ):void;
	setAbsorptionAmount( arg0:double ):void;
	setAffectsSpawning( arg0:boolean ):void;
	setAllowFlight( arg0:boolean ):void;
	setArrowCooldown( arg0:int ):void;
	setArrowsInBody( arg0:int ):void;
	setArrowsInBody( arg0:int, arg1:boolean ):void;
	setArrowsStuck( arg0:int ):void;
	setBedSpawnLocation( arg0:org.bukkit.Location ):void;
	setBedSpawnLocation( arg0:org.bukkit.Location, arg1:boolean ):void;
	setBeeStingerCooldown( arg0:int ):void;
	setBeeStingersInBody( arg0:int ):void;
	setBodyYaw( arg0:float ):void;
	setCanPickupItems( arg0:boolean ):void;
	setCollidable( arg0:boolean ):void;
	setCompassTarget( arg0:org.bukkit.Location ):void;
	setCooldown( arg0:org.bukkit.Material, arg1:int ):void;
	setCustomChatCompletions( arg0:java.util.Collection<string> ):void;
	setCustomName( arg0:string ):void;
	setCustomNameVisible( arg0:boolean ):void;
	setDisplayName( arg0:string ):void;
	setEnchantmentSeed( arg0:int ):void;
	setExhaustion( arg0:float ):void;
	setExp( arg0:float ):void;
	setExpCooldown( arg0:int ):void;
	setFallDistance( arg0:float ):void;
	setFireTicks( arg0:int ):void;
	setFlySpeed( arg0:float ):void;
	setFlying( arg0:boolean ):void;
	setFlyingFallDamage( arg0:any /*net.kyori.adventure.util.TriState*/ ):void;
	setFoodLevel( arg0:int ):void;
	setFreezeTicks( arg0:int ):void;
	setFrictionState( arg0:any /*net.kyori.adventure.util.TriState*/ ):void;
	setGameMode( arg0:any /*org.bukkit.GameMode*/ ):void;
	setGliding( arg0:boolean ):void;
	setGlowing( arg0:boolean ):void;
	setGravity( arg0:boolean ):void;
	setHasSeenWinScreen( arg0:boolean ):void;
	setHealth( arg0:double ):void;
	setHealthScale( arg0:double ):void;
	setHealthScaled( arg0:boolean ):void;
	setHurtDirection( arg0:float ):void;
	setInvisible( arg0:boolean ):void;
	setInvulnerable( arg0:boolean ):void;
	setItemInHand( arg0:org.bukkit.inventory.ItemStack ):void;
	setItemOnCursor( arg0:org.bukkit.inventory.ItemStack ):void;
	setJumping( arg0:boolean ):void;
	setKiller( arg0:Player ):void;
	setLastDamage( arg0:double ):void;
	setLastDamageCause( arg0:org.bukkit.event.entity.EntityDamageEvent ):void;
	setLastDeathLocation( arg0:org.bukkit.Location ):void;
	setLeashHolder( arg0:Entity ):boolean;
	setLevel( arg0:int ):void;
	setMaxHealth( arg0:double ):void;
	setMaximumAir( arg0:int ):void;
	setMaximumNoDamageTicks( arg0:int ):void;
	setMemory<T>( arg0:any /*org.bukkit.entity.memory.MemoryKey*/, arg1:T ):void;
	setMetadata( arg0:string, arg1:any /*org.bukkit.metadata.MetadataValue*/ ):void;
	setNoDamageTicks( arg0:int ):void;
	setNoTickViewDistance( arg0:int ):void;
	setOp( arg0:boolean ):void;
	setPassenger( arg0:Entity ):boolean;
	setPersistent( arg0:boolean ):void;
	setPlayerListFooter( arg0:string ):void;
	setPlayerListHeader( arg0:string ):void;
	setPlayerListHeaderFooter( arg0:[any /*net.md_5.bungee.api.chat.BaseComponent*/], arg1:[any /*net.md_5.bungee.api.chat.BaseComponent*/] ):void;
	setPlayerListHeaderFooter( arg0:any /*net.md_5.bungee.api.chat.BaseComponent*/, arg1:any /*net.md_5.bungee.api.chat.BaseComponent*/ ):void;
	setPlayerListHeaderFooter( arg0:string, arg1:string ):void;
	setPlayerListName( arg0:string ):void;
	setPlayerProfile( arg0:any /*com.destroystokyo.paper.profile.PlayerProfile*/ ):void;
	setPlayerTime( arg0:long, arg1:boolean ):void;
	setPlayerWeather( arg0:any /*org.bukkit.WeatherType*/ ):void;
	setPortalCooldown( arg0:int ):void;
	setRemainingAir( arg0:int ):void;
	setRemoveWhenFarAway( arg0:boolean ):void;
	setResourcePack( arg0:string ):void;
	setResourcePack( arg0:string, arg1:bytearray ):void;
	setResourcePack( arg0:string, arg1:bytearray, arg2:any /*net.kyori.adventure.text.Component*/ ):void;
	setResourcePack( arg0:string, arg1:bytearray, arg2:any /*net.kyori.adventure.text.Component*/, arg3:boolean ):void;
	setResourcePack( arg0:string, arg1:bytearray, arg2:boolean ):void;
	setResourcePack( arg0:string, arg1:bytearray, arg2:string ):void;
	setResourcePack( arg0:string, arg1:bytearray, arg2:string, arg3:boolean ):void;
	setResourcePack( arg0:string, arg1:string ):void;
	setResourcePack( arg0:string, arg1:string, arg2:boolean ):void;
	setResourcePack( arg0:string, arg1:string, arg2:boolean, arg3:any /*net.kyori.adventure.text.Component*/ ):void;
	setRotation( arg0:float, arg1:float ):void;
	setSaturatedRegenRate( arg0:int ):void;
	setSaturation( arg0:float ):void;
	setScoreboard( arg0:any /*org.bukkit.scoreboard.Scoreboard*/ ):void;
	setSendViewDistance( arg0:int ):void;
	setShieldBlockingDelay( arg0:int ):void;
	setShoulderEntityLeft( arg0:Entity ):void;
	setShoulderEntityRight( arg0:Entity ):void;
	setSilent( arg0:boolean ):void;
	setSimulationDistance( arg0:int ):void;
	setSleepingIgnored( arg0:boolean ):void;
	setSneaking( arg0:boolean ):void;
	setSpectatorTarget( arg0:Entity ):void;
	setSprinting( arg0:boolean ):void;
	setStarvationRate( arg0:int ):void;
	setStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:EntityType, arg2:int ):void;
	setStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:int ):void;
	setStatistic( arg0:any /*org.bukkit.Statistic*/, arg1:org.bukkit.Material, arg2:int ):void;
	setSubtitle( arg0:[any /*net.md_5.bungee.api.chat.BaseComponent*/] ):void;
	setSubtitle( arg0:any /*net.md_5.bungee.api.chat.BaseComponent*/ ):void;
	setSwimming( arg0:boolean ):void;
	setTexturePack( arg0:string ):void;
	setTicksLived( arg0:int ):void;
	setTitleTimes( arg0:int, arg1:int, arg2:int ):void;
	setTotalExperience( arg0:int ):void;
	setUnsaturatedRegenRate( arg0:int ):void;
	setVelocity( arg0:any /*org.bukkit.util.Vector*/ ):void;
	setViewDistance( arg0:int ):void;
	setVisibleByDefault( arg0:boolean ):void;
	setVisualFire( arg0:boolean ):void;
	setWalkSpeed( arg0:float ):void;
	setWardenTimeSinceLastWarning( arg0:int ):void;
	setWardenWarningCooldown( arg0:int ):void;
	setWardenWarningLevel( arg0:int ):void;
	setWhitelisted( arg0:boolean ):void;
	setWindowProperty( arg0:any /*org.bukkit.inventory.InventoryView$Property*/, arg1:int ):boolean;
	setWorldBorder( arg0:any /*org.bukkit.WorldBorder*/ ):void;
	showBossBar( bar:any /*net.kyori.adventure.bossbar.BossBar*/ ):void;
	showDemoScreen(  ):void;
	showElderGuardian(  ):void;
	showElderGuardian( arg0:boolean ):void;
	showEntity( arg0:any /*org.bukkit.plugin.Plugin*/, arg1:Entity ):void;
	showPlayer( arg0:Player ):void;
	showPlayer( arg0:any /*org.bukkit.plugin.Plugin*/, arg1:Player ):void;
	showTitle( arg0:[any /*net.md_5.bungee.api.chat.BaseComponent*/] ):void;
	showTitle( arg0:[any /*net.md_5.bungee.api.chat.BaseComponent*/], arg1:[any /*net.md_5.bungee.api.chat.BaseComponent*/], arg2:int, arg3:int, arg4:int ):void;
	showTitle( arg0:any /*net.md_5.bungee.api.chat.BaseComponent*/ ):void;
	showTitle( arg0:any /*net.md_5.bungee.api.chat.BaseComponent*/, arg1:any /*net.md_5.bungee.api.chat.BaseComponent*/, arg2:int, arg3:int, arg4:int ):void;
	showTitle( title:any /*net.kyori.adventure.title.Title*/ ):void;
	showWinScreen(  ):void;
	sleep( arg0:org.bukkit.Location, arg1:boolean ):boolean;
	spawnAt( arg0:org.bukkit.Location ):boolean;
	spawnAt( arg0:org.bukkit.Location, arg1:any /*org.bukkit.event.entity.CreatureSpawnEvent$SpawnReason*/ ):boolean;
	spawnParticle( arg0:org.bukkit.Particle, arg1:double, arg2:double, arg3:double, arg4:int ):void;
	spawnParticle( arg0:org.bukkit.Particle, arg1:double, arg2:double, arg3:double, arg4:int, arg5:double, arg6:double, arg7:double ):void;
	spawnParticle( arg0:org.bukkit.Particle, arg1:double, arg2:double, arg3:double, arg4:int, arg5:double, arg6:double, arg7:double, arg8:double ):void;
	spawnParticle( arg0:org.bukkit.Particle, arg1:org.bukkit.Location, arg2:int ):void;
	spawnParticle( arg0:org.bukkit.Particle, arg1:org.bukkit.Location, arg2:int, arg3:double, arg4:double, arg5:double ):void;
	spawnParticle( arg0:org.bukkit.Particle, arg1:org.bukkit.Location, arg2:int, arg3:double, arg4:double, arg5:double, arg6:double ):void;
	spawnParticle<T>( arg0:org.bukkit.Particle, arg1:double, arg2:double, arg3:double, arg4:int, arg5:T ):void;
	spawnParticle<T>( arg0:org.bukkit.Particle, arg1:double, arg2:double, arg3:double, arg4:int, arg5:double, arg6:double, arg7:double, arg8:T ):void;
	spawnParticle<T>( arg0:org.bukkit.Particle, arg1:double, arg2:double, arg3:double, arg4:int, arg5:double, arg6:double, arg7:double, arg8:double, arg9:T ):void;
	spawnParticle<T>( arg0:org.bukkit.Particle, arg1:org.bukkit.Location, arg2:int, arg3:T ):void;
	spawnParticle<T>( arg0:org.bukkit.Particle, arg1:org.bukkit.Location, arg2:int, arg3:double, arg4:double, arg5:double, arg6:T ):void;
	spawnParticle<T>( arg0:org.bukkit.Particle, arg1:org.bukkit.Location, arg2:int, arg3:double, arg4:double, arg5:double, arg6:double, arg7:T ):void;
	spigot(  ):any /*org.bukkit.entity.Player$Spigot*/;
	stopAllSounds(  ):void;
	stopSound( arg0:any /*org.bukkit.SoundCategory*/ ):void;
	stopSound( arg0:org.bukkit.Sound ):void;
	stopSound( arg0:org.bukkit.Sound, arg1:any /*org.bukkit.SoundCategory*/ ):void;
	stopSound( arg0:string ):void;
	stopSound( arg0:string, arg1:any /*org.bukkit.SoundCategory*/ ):void;
	stopSound( sound:any /*net.kyori.adventure.sound.Sound*/ ):void;
	stopSound( stop:any /*net.kyori.adventure.sound.SoundStop*/ ):void;
	swingHand( arg0:any /*org.bukkit.inventory.EquipmentSlot*/ ):void;
	swingMainHand(  ):void;
	swingOffHand(  ):void;
	teamDisplayName(  ):any /*net.kyori.adventure.text.Component*/;
	teleport( arg0:Entity ):boolean;
	teleport( arg0:Entity, arg1:any /*org.bukkit.event.player.PlayerTeleportEvent$TeleportCause*/ ):boolean;
	teleport( arg0:org.bukkit.Location ):boolean;
	teleport( arg0:org.bukkit.Location, ...arg1:any /*io.papermc.paper.entity.TeleportFlag*/[] ):boolean;
	teleport( arg0:org.bukkit.Location, arg1:any /*org.bukkit.event.player.PlayerTeleportEvent$TeleportCause*/ ):boolean;
	teleport( arg0:org.bukkit.Location, arg1:any /*org.bukkit.event.player.PlayerTeleportEvent$TeleportCause*/, ...arg2:any /*io.papermc.paper.entity.TeleportFlag*/[] ):boolean;
	teleportAsync( arg0:org.bukkit.Location ):any /*java.util.concurrent.CompletableFuture*/;
	teleportAsync( arg0:org.bukkit.Location, arg1:any /*org.bukkit.event.player.PlayerTeleportEvent$TeleportCause*/ ):any /*java.util.concurrent.CompletableFuture*/;
	undiscoverRecipe( arg0:any /*org.bukkit.NamespacedKey*/ ):boolean;
	undiscoverRecipes( arg0:java.util.Collection<any /*org.bukkit.NamespacedKey*/> ):int;
	updateCommands(  ):void;
	updateInventory(  ):void;
	updateTitle( arg0:any /*com.destroystokyo.paper.Title*/ ):void;
	wakeup( arg0:boolean ):void;
	wouldCollideUsing( arg0:any /*org.bukkit.util.BoundingBox*/ ):boolean;

} // end Player

} // end namespace org.bukkit.entity
declare namespace org.bukkit.event {

class Event/* extends java.lang.Object*/ {

	callEvent(  ):boolean;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	getEventName(  ):string;
	getHandlers(  ):any /*org.bukkit.event.HandlerList*/;
	isAsynchronous(  ):boolean;
	toString(  ):string;

} // end Event

} // end namespace org.bukkit.event
declare namespace org.bukkit.event {

interface Cancellable {

	isCancelled(  ):boolean;
	setCancelled( arg0:boolean ):void;

} // end Cancellable

} // end namespace org.bukkit.event
declare namespace org.bukkit.event {

interface EventHandler/* extends java.lang.annotation.Annotation*/ {

	annotationType(  ):java.lang.Class<any /*java.lang.annotation.Annotation*/>;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	ignoreCancelled(  ):boolean;
	priority(  ):any /*org.bukkit.event.EventPriority*/;
	toString(  ):string;

} // end EventHandler

} // end namespace org.bukkit.event
declare namespace org.bukkit.event {

interface Listener {


} // end Listener

} // end namespace org.bukkit.event
declare namespace org.bukkit.event.entity {

class EntityDamageByEntityEvent/* extends EntityDamageEvent*/ {

	callEvent(  ):boolean;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	getCause(  ):any /*org.bukkit.event.entity.EntityDamageEvent$DamageCause*/;
	getDamage(  ):double;
	getDamage( arg0:any /*org.bukkit.event.entity.EntityDamageEvent$DamageModifier*/ ):double;
	getDamager(  ):org.bukkit.entity.Entity;
	getEntity(  ):org.bukkit.entity.Entity;
	getEntityType(  ):org.bukkit.entity.EntityType;
	getEventName(  ):string;
	getFinalDamage(  ):double;
	getHandlers(  ):any /*org.bukkit.event.HandlerList*/;
	getOriginalDamage( arg0:any /*org.bukkit.event.entity.EntityDamageEvent$DamageModifier*/ ):double;
	isApplicable( arg0:any /*org.bukkit.event.entity.EntityDamageEvent$DamageModifier*/ ):boolean;
	isAsynchronous(  ):boolean;
	isCancelled(  ):boolean;
	isCritical(  ):boolean;
	setCancelled( arg0:boolean ):void;
	setDamage( arg0:any /*org.bukkit.event.entity.EntityDamageEvent$DamageModifier*/, arg1:double ):void;
	setDamage( arg0:double ):void;
	toString(  ):string;

} // end EntityDamageByEntityEvent

} // end namespace org.bukkit.event.entity
declare namespace org.bukkit.event.entity {

class EntityDamageEvent/* extends EntityEvent implements org.bukkit.event.Cancellable*/ {

	callEvent(  ):boolean;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	getCause(  ):any /*org.bukkit.event.entity.EntityDamageEvent$DamageCause*/;
	getDamage(  ):double;
	getDamage( arg0:any /*org.bukkit.event.entity.EntityDamageEvent$DamageModifier*/ ):double;
	getEntity(  ):org.bukkit.entity.Entity;
	getEntityType(  ):org.bukkit.entity.EntityType;
	getEventName(  ):string;
	getFinalDamage(  ):double;
	getHandlers(  ):any /*org.bukkit.event.HandlerList*/;
	getOriginalDamage( arg0:any /*org.bukkit.event.entity.EntityDamageEvent$DamageModifier*/ ):double;
	isApplicable( arg0:any /*org.bukkit.event.entity.EntityDamageEvent$DamageModifier*/ ):boolean;
	isAsynchronous(  ):boolean;
	isCancelled(  ):boolean;
	setCancelled( arg0:boolean ):void;
	setDamage( arg0:any /*org.bukkit.event.entity.EntityDamageEvent$DamageModifier*/, arg1:double ):void;
	setDamage( arg0:double ):void;
	toString(  ):string;

} // end EntityDamageEvent

} // end namespace org.bukkit.event.entity
declare namespace org.bukkit.event.entity {

class EntityEvent/* extends org.bukkit.event.Event*/ {

	callEvent(  ):boolean;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	getEntity(  ):org.bukkit.entity.Entity;
	getEntityType(  ):org.bukkit.entity.EntityType;
	getEventName(  ):string;
	getHandlers(  ):any /*org.bukkit.event.HandlerList*/;
	isAsynchronous(  ):boolean;
	toString(  ):string;

} // end EntityEvent

} // end namespace org.bukkit.event.entity
declare namespace org.bukkit.event.player {

class PlayerEvent/* extends org.bukkit.event.Event*/ {

	callEvent(  ):boolean;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	getEventName(  ):string;
	getHandlers(  ):any /*org.bukkit.event.HandlerList*/;
	getPlayer(  ):org.bukkit.entity.Player;
	isAsynchronous(  ):boolean;
	toString(  ):string;

} // end PlayerEvent

} // end namespace org.bukkit.event.player
declare namespace org.bukkit.inventory {

class ItemStack/* extends java.lang.Object implements java.lang.Cloneable, org.bukkit.configuration.serialization.ConfigurationSerializable, org.bukkit.Translatable, net.kyori.adventure.text.event.HoverEventSource<any>, net.kyori.adventure.translation.Translatable*/ {

	add(  ):ItemStack;
	add( arg0:int ):ItemStack;
	addEnchantment( arg0:any /*org.bukkit.enchantments.Enchantment*/, arg1:int ):void;
	addEnchantments( arg0:java.util.Map<any /*org.bukkit.enchantments.Enchantment*/, int|null> ):void;
	addItemFlags( ...arg0:any /*org.bukkit.inventory.ItemFlag*/[] ):void;
	addUnsafeEnchantment( arg0:any /*org.bukkit.enchantments.Enchantment*/, arg1:int ):void;
	addUnsafeEnchantments( arg0:java.util.Map<any /*org.bukkit.enchantments.Enchantment*/, int|null> ):void;
	asHoverEvent(  ):any /*net.kyori.adventure.text.event.HoverEvent*/;
	asHoverEvent( arg0:UnaryOperator<any /*net.kyori.adventure.text.event.HoverEvent$ShowItem*/> ):any /*net.kyori.adventure.text.event.HoverEvent*/;
	asOne(  ):ItemStack;
	asQuantity( arg0:int ):ItemStack;
	canRepair( arg0:ItemStack ):boolean;
	clone(  ):ItemStack;
	containsEnchantment( arg0:any /*org.bukkit.enchantments.Enchantment*/ ):boolean;
	damage( arg0:int, arg1:org.bukkit.entity.LivingEntity ):ItemStack;
	displayName(  ):any /*net.kyori.adventure.text.Component*/;
	editMeta( arg0:Consumer<org.bukkit.inventory.meta.ItemMeta> ):boolean;
	editMeta<M>( arg0:java.lang.Class<M>, arg1:Consumer<M> ):boolean;
	enchantWithLevels( arg0:int, arg1:boolean, arg2:any /*java.util.Random*/ ):ItemStack;
	ensureServerConversions(  ):ItemStack;
	equals( arg0:any /*java.lang.Object*/ ):boolean;
	getAmount(  ):int;
	getData(  ):any /*org.bukkit.material.MaterialData*/;
	getDurability(  ):any /*short*/;
	getEnchantmentLevel( arg0:any /*org.bukkit.enchantments.Enchantment*/ ):int;
	getEnchantments(  ):java.util.Map<any /*org.bukkit.enchantments.Enchantment*/, int|null>;
	getI18NDisplayName(  ):string;
	getItemFlags(  ):java.util.Set<any /*org.bukkit.inventory.ItemFlag*/>;
	getItemMeta(  ):org.bukkit.inventory.meta.ItemMeta;
	getLore(  ):java.util.List<string>;
	getMaxItemUseDuration(  ):int;
	getMaxStackSize(  ):int;
	getRarity(  ):any /*io.papermc.paper.inventory.ItemRarity*/;
	getTranslationKey(  ):string;
	getType(  ):org.bukkit.Material;
	hasItemFlag( arg0:any /*org.bukkit.inventory.ItemFlag*/ ):boolean;
	hasItemMeta(  ):boolean;
	isRepairableBy( arg0:ItemStack ):boolean;
	isSimilar( arg0:ItemStack ):boolean;
	lore(  ):java.util.List<any /*net.kyori.adventure.text.Component*/>;
	lore( arg0:java.util.List<any /*net.kyori.adventure.text.Component*/> ):void;
	removeEnchantment( arg0:any /*org.bukkit.enchantments.Enchantment*/ ):int;
	removeItemFlags( ...arg0:any /*org.bukkit.inventory.ItemFlag*/[] ):void;
	serialize(  ):java.util.Map<string, any /*java.lang.Object*/>;
	serializeAsBytes(  ):bytearray;
	setAmount( arg0:int ):void;
	setData( arg0:any /*org.bukkit.material.MaterialData*/ ):void;
	setDurability( arg0:any /*short*/ ):void;
	setItemMeta( arg0:org.bukkit.inventory.meta.ItemMeta ):boolean;
	setLore( arg0:java.util.List<string> ):void;
	setType( arg0:org.bukkit.Material ):void;
	subtract(  ):ItemStack;
	subtract( arg0:int ):ItemStack;
	toString(  ):string;
	translationKey(  ):string;

} // end ItemStack

} // end namespace org.bukkit.inventory
declare namespace org.bukkit.inventory {

interface PlayerInventory/* extends Inventory*/ {

	addItem( ...arg0:ItemStack[] ):java.util.HashMap<int|null, ItemStack>;
	all( arg0:ItemStack ):java.util.HashMap<int|null, ItemStack>;
	all( arg0:org.bukkit.Material ):java.util.HashMap<int|null, ItemStack>;
	clear(  ):void;
	clear( arg0:int ):void;
	close(  ):int;
	contains( arg0:ItemStack ):boolean;
	contains( arg0:ItemStack, arg1:int ):boolean;
	contains( arg0:org.bukkit.Material ):boolean;
	contains( arg0:org.bukkit.Material, arg1:int ):boolean;
	containsAtLeast( arg0:ItemStack, arg1:int ):boolean;
	first( arg0:ItemStack ):int;
	first( arg0:org.bukkit.Material ):int;
	firstEmpty(  ):int;
	forEach<T>( arg0:Consumer<T> ):void;
	getArmorContents(  ):[ItemStack];
	getBoots(  ):ItemStack;
	getChestplate(  ):ItemStack;
	getContents(  ):[ItemStack];
	getExtraContents(  ):[ItemStack];
	getHeldItemSlot(  ):int;
	getHelmet(  ):ItemStack;
	getHolder(  ):any /*org.bukkit.entity.HumanEntity*/;
	getHolder( arg0:boolean ):any /*org.bukkit.inventory.InventoryHolder*/;
	getItem( arg0:any /*org.bukkit.inventory.EquipmentSlot*/ ):ItemStack;
	getItem( arg0:int ):ItemStack;
	getItemInHand(  ):ItemStack;
	getItemInMainHand(  ):ItemStack;
	getItemInOffHand(  ):ItemStack;
	getLeggings(  ):ItemStack;
	getLocation(  ):org.bukkit.Location;
	getMaxStackSize(  ):int;
	getSize(  ):int;
	getStorageContents(  ):[ItemStack];
	getType(  ):any /*org.bukkit.event.inventory.InventoryType*/;
	getViewers(  ):java.util.List<any /*org.bukkit.entity.HumanEntity*/>;
	isEmpty(  ):boolean;
	iterator(  ):any /*java.util.ListIterator*/;
	iterator( arg0:int ):any /*java.util.ListIterator*/;
	remove( arg0:ItemStack ):void;
	remove( arg0:org.bukkit.Material ):void;
	removeItem( ...arg0:ItemStack[] ):java.util.HashMap<int|null, ItemStack>;
	removeItemAnySlot( ...arg0:ItemStack[] ):java.util.HashMap<int|null, ItemStack>;
	setArmorContents( arg0:[ItemStack] ):void;
	setBoots( arg0:ItemStack ):void;
	setChestplate( arg0:ItemStack ):void;
	setContents( arg0:[ItemStack] ):void;
	setExtraContents( arg0:[ItemStack] ):void;
	setHeldItemSlot( arg0:int ):void;
	setHelmet( arg0:ItemStack ):void;
	setItem( arg0:any /*org.bukkit.inventory.EquipmentSlot*/, arg1:ItemStack ):void;
	setItem( arg0:int, arg1:ItemStack ):void;
	setItemInHand( arg0:ItemStack ):void;
	setItemInMainHand( arg0:ItemStack ):void;
	setItemInOffHand( arg0:ItemStack ):void;
	setLeggings( arg0:ItemStack ):void;
	setMaxStackSize( arg0:int ):void;
	setStorageContents( arg0:[ItemStack] ):void;
	spliterator(  ):any /*java.util.Spliterator*/;

} // end PlayerInventory

} // end namespace org.bukkit.inventory
declare namespace org.bukkit.inventory.meta {

interface ItemMeta/* extends java.lang.Cloneable, org.bukkit.configuration.serialization.ConfigurationSerializable, org.bukkit.persistence.PersistentDataHolder*/ {

	addAttributeModifier( arg0:any /*org.bukkit.attribute.Attribute*/, arg1:any /*org.bukkit.attribute.AttributeModifier*/ ):boolean;
	addEnchant( arg0:any /*org.bukkit.enchantments.Enchantment*/, arg1:int, arg2:boolean ):boolean;
	addItemFlags( ...arg0:any /*org.bukkit.inventory.ItemFlag*/[] ):void;
	clone(  ):ItemMeta;
	displayName(  ):any /*net.kyori.adventure.text.Component*/;
	displayName( arg0:any /*net.kyori.adventure.text.Component*/ ):void;
	getAsString(  ):string;
	getAttributeModifiers(  ):any /*com.google.common.collect.Multimap*/;
	getAttributeModifiers( arg0:any /*org.bukkit.attribute.Attribute*/ ):java.util.Collection<any /*org.bukkit.attribute.AttributeModifier*/>;
	getAttributeModifiers( arg0:any /*org.bukkit.inventory.EquipmentSlot*/ ):any /*com.google.common.collect.Multimap*/;
	getCanDestroy(  ):java.util.Set<org.bukkit.Material>;
	getCanPlaceOn(  ):java.util.Set<org.bukkit.Material>;
	getCustomModelData(  ):int;
	getCustomTagContainer(  ):any /*org.bukkit.inventory.meta.tags.CustomItemTagContainer*/;
	getDestroyableKeys(  ):java.util.Set<any /*com.destroystokyo.paper.Namespaced*/>;
	getDisplayName(  ):string;
	getDisplayNameComponent(  ):[any /*net.md_5.bungee.api.chat.BaseComponent*/];
	getEnchantLevel( arg0:any /*org.bukkit.enchantments.Enchantment*/ ):int;
	getEnchants(  ):java.util.Map<any /*org.bukkit.enchantments.Enchantment*/, int|null>;
	getItemFlags(  ):java.util.Set<any /*org.bukkit.inventory.ItemFlag*/>;
	getLocalizedName(  ):string;
	getLore(  ):java.util.List<string>;
	getLoreComponents(  ):java.util.List<[any /*net.md_5.bungee.api.chat.BaseComponent*/]>;
	getPersistentDataContainer(  ):any /*org.bukkit.persistence.PersistentDataContainer*/;
	getPlaceableKeys(  ):java.util.Set<any /*com.destroystokyo.paper.Namespaced*/>;
	hasAttributeModifiers(  ):boolean;
	hasConflictingEnchant( arg0:any /*org.bukkit.enchantments.Enchantment*/ ):boolean;
	hasCustomModelData(  ):boolean;
	hasDestroyableKeys(  ):boolean;
	hasDisplayName(  ):boolean;
	hasEnchant( arg0:any /*org.bukkit.enchantments.Enchantment*/ ):boolean;
	hasEnchants(  ):boolean;
	hasItemFlag( arg0:any /*org.bukkit.inventory.ItemFlag*/ ):boolean;
	hasLocalizedName(  ):boolean;
	hasLore(  ):boolean;
	hasPlaceableKeys(  ):boolean;
	isUnbreakable(  ):boolean;
	lore(  ):java.util.List<any /*net.kyori.adventure.text.Component*/>;
	lore( arg0:java.util.List<any /*net.kyori.adventure.text.Component*/> ):void;
	removeAttributeModifier( arg0:any /*org.bukkit.attribute.Attribute*/ ):boolean;
	removeAttributeModifier( arg0:any /*org.bukkit.attribute.Attribute*/, arg1:any /*org.bukkit.attribute.AttributeModifier*/ ):boolean;
	removeAttributeModifier( arg0:any /*org.bukkit.inventory.EquipmentSlot*/ ):boolean;
	removeEnchant( arg0:any /*org.bukkit.enchantments.Enchantment*/ ):boolean;
	removeItemFlags( ...arg0:any /*org.bukkit.inventory.ItemFlag*/[] ):void;
	serialize(  ):java.util.Map<string, any /*java.lang.Object*/>;
	setAttributeModifiers( arg0:any /*com.google.common.collect.Multimap*/ ):void;
	setCanDestroy( arg0:java.util.Set<org.bukkit.Material> ):void;
	setCanPlaceOn( arg0:java.util.Set<org.bukkit.Material> ):void;
	setCustomModelData( arg0:int|null ):void;
	setDestroyableKeys( arg0:java.util.Collection<any /*com.destroystokyo.paper.Namespaced*/> ):void;
	setDisplayName( arg0:string ):void;
	setDisplayNameComponent( arg0:[any /*net.md_5.bungee.api.chat.BaseComponent*/] ):void;
	setLocalizedName( arg0:string ):void;
	setLore( arg0:java.util.List<string> ):void;
	setLoreComponents( arg0:java.util.List<[any /*net.md_5.bungee.api.chat.BaseComponent*/]> ):void;
	setPlaceableKeys( arg0:java.util.Collection<any /*com.destroystokyo.paper.Namespaced*/> ):void;
	setUnbreakable( arg0:boolean ):void;
	setVersion( arg0:int ):void;

} // end ItemMeta

} // end namespace org.bukkit.inventory.meta
declare namespace org.bukkit.plugin {

interface PluginManager/* extends io.papermc.paper.plugin.PermissionManager*/ {

	addPermission( arg0:any /*org.bukkit.permissions.Permission*/ ):void;
	addPermissions( arg0:java.util.List<any /*org.bukkit.permissions.Permission*/> ):void;
	callEvent( arg0:org.bukkit.event.Event ):void;
	clearPermissions(  ):void;
	clearPlugins(  ):void;
	disablePlugin( arg0:any /*org.bukkit.plugin.Plugin*/ ):void;
	disablePlugins(  ):void;
	enablePlugin( arg0:any /*org.bukkit.plugin.Plugin*/ ):void;
	getDefaultPermSubscriptions( arg0:boolean ):java.util.Set<any /*org.bukkit.permissions.Permissible*/>;
	getDefaultPermissions( arg0:boolean ):java.util.Set<any /*org.bukkit.permissions.Permission*/>;
	getPermission( arg0:string ):any /*org.bukkit.permissions.Permission*/;
	getPermissionSubscriptions( arg0:string ):java.util.Set<any /*org.bukkit.permissions.Permissible*/>;
	getPermissions(  ):java.util.Set<any /*org.bukkit.permissions.Permission*/>;
	getPlugin( arg0:string ):any /*org.bukkit.plugin.Plugin*/;
	getPlugins(  ):[any /*org.bukkit.plugin.Plugin*/];
	isPluginEnabled( arg0:any /*org.bukkit.plugin.Plugin*/ ):boolean;
	isPluginEnabled( arg0:string ):boolean;
	isTransitiveDependency( arg0:any /*io.papermc.paper.plugin.configuration.PluginMeta*/, arg1:any /*io.papermc.paper.plugin.configuration.PluginMeta*/ ):boolean;
	loadPlugin( arg0:any /*java.io.File*/ ):any /*org.bukkit.plugin.Plugin*/;
	loadPlugins( arg0:any /*java.io.File*/ ):[any /*org.bukkit.plugin.Plugin*/];
	overridePermissionManager( arg0:any /*org.bukkit.plugin.Plugin*/, arg1:any /*io.papermc.paper.plugin.PermissionManager*/ ):void;
	recalculatePermissionDefaults( arg0:any /*org.bukkit.permissions.Permission*/ ):void;
	registerEvent( arg0:java.lang.Class<org.bukkit.event.Event>, arg1:org.bukkit.event.Listener, arg2:any /*org.bukkit.event.EventPriority*/, arg3:any /*org.bukkit.plugin.EventExecutor*/, arg4:any /*org.bukkit.plugin.Plugin*/ ):void;
	registerEvent( arg0:java.lang.Class<org.bukkit.event.Event>, arg1:org.bukkit.event.Listener, arg2:any /*org.bukkit.event.EventPriority*/, arg3:any /*org.bukkit.plugin.EventExecutor*/, arg4:any /*org.bukkit.plugin.Plugin*/, arg5:boolean ):void;
	registerEvents( arg0:org.bukkit.event.Listener, arg1:any /*org.bukkit.plugin.Plugin*/ ):void;
	registerInterface( arg0:java.lang.Class<any /*org.bukkit.plugin.PluginLoader*/> ):void;
	removePermission( arg0:any /*org.bukkit.permissions.Permission*/ ):void;
	removePermission( arg0:string ):void;
	subscribeToDefaultPerms( arg0:boolean, arg1:any /*org.bukkit.permissions.Permissible*/ ):void;
	subscribeToPermission( arg0:string, arg1:any /*org.bukkit.permissions.Permissible*/ ):void;
	unsubscribeFromDefaultPerms( arg0:boolean, arg1:any /*org.bukkit.permissions.Permissible*/ ):void;
	unsubscribeFromPermission( arg0:string, arg1:any /*org.bukkit.permissions.Permissible*/ ):void;
	useTimings(  ):boolean;

} // end PluginManager

} // end namespace org.bukkit.plugin
declare namespace org.bukkit.util {

interface Consumer<T> {

	( arg0:T ):void;

} // end Consumer

} // end namespace org.bukkit.util
interface BiConsumer<T, U>/*java.util.function.BiConsumer*/ {

	( arg0:T, arg1:U ):void;
	andThen?( arg0:BiConsumer<T, U> ):BiConsumer<T, U>;

} // end BiConsumer
interface BiFunction<T, U, R>/*java.util.function.BiFunction*/ {

	( arg0:T, arg1:U ):R;
	andThen?<V>( arg0:Func<R, V> ):BiFunction<T, U, V>;

} // end BiFunction
interface BiPredicate<T, U>/*java.util.function.BiPredicate*/ {

	( arg0:T, arg1:U ):boolean;
	and?( arg0:BiPredicate<T, U> ):BiPredicate<T, U>;
	negate?(  ):BiPredicate<T, U>;
	or?( arg0:BiPredicate<T, U> ):BiPredicate<T, U>;

} // end BiPredicate
interface BinaryOperator<T>/*java.util.function.BinaryOperator extends BiFunction<T, any, any>*/ {

	<R,U>( arg0:T, arg1:U ):R;
	// static maxBy<T>( arg0:any /*java.util.Comparator*/ ):BinaryOperator<T>;
	// static minBy<T>( arg0:any /*java.util.Comparator*/ ):BinaryOperator<T>;
	andThen?<R,U,V>( arg0:Func<R, V> ):BiFunction<T, U, V>;

} // end BinaryOperator
interface Consumer<T>/*java.util.function.Consumer*/ {

	( arg0:T ):void;
	andThen?( arg0:Consumer<T> ):Consumer<T>;

} // end Consumer
interface Func<T, R>/*java.util.function.Function*/ {

	( arg0:T ):R;
	// static identity<T>(  ):Func<T, T>;
	andThen?<V>( arg0:Func<R, V> ):Func<T, V>;
	compose?<V>( arg0:Func<V, T> ):Func<V, R>;

} // end Func
interface Predicate<T>/*java.util.function.Predicate*/ {

	( arg0:T ):boolean;
	// static isEqual<T>( arg0:any /*java.lang.Object*/ ):Predicate<T>;
	// static not<T>( arg0:Predicate<T> ):Predicate<T>;
	and?( arg0:Predicate<T> ):Predicate<T>;
	negate?(  ):Predicate<T>;
	or?( arg0:Predicate<T> ):Predicate<T>;

} // end Predicate
interface Supplier<T>/*java.util.function.Supplier*/ {

	(  ):T;

} // end Supplier
interface UnaryOperator<T>/*java.util.function.UnaryOperator extends Function<T, any>*/ {

	<R>( arg0:T ):R;
	// static identity<T>(  ):UnaryOperator<T>;
	andThen?<R,V>( arg0:Func<R, V> ):Func<T, V>;
	compose?<R,V>( arg0:Func<V, T> ):Func<V, R>;

} // end UnaryOperator
